Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    COMMENT
    DOSPTOS
    PUNTO

Grammar

Rule 0     S' -> PROGRAMA
Rule 1     PROGRAMA -> PROGRAM CREATE_DIRFUNC ID PTOCOMA VARS_P FUNCS_P MAIN_G
Rule 2     VARS -> VAR TYPE ID ADD_VAR VARS_PP PTOCOMA
Rule 3     VARS -> MAT TYPE ID CORIZQ CTE_INT CORDER VARS_PPP PTOCOMA
Rule 4     VARS_P -> VARS VARS_P
Rule 5     VARS_P -> empty
Rule 6     VARS_PP -> COMMA ID ADD_VAR VARS_PP
Rule 7     VARS_PP -> empty
Rule 8     VARS_PPP -> CORIZQ CTE_INT CORDER
Rule 9     VARS_PPP -> empty
Rule 10    FUNCS -> FUNC TYPE_P ID ADD_FUNC PARIZQ PARAMS PARDER LLVEIZQ ESTATUTO_P RETURN EXPRESION cuad_return PTOCOMA LLVEDER
Rule 11    FUNCS_P -> FUNCS FUNCS_P
Rule 12    FUNCS_P -> empty
Rule 13    TYPE -> INT CURR_TYPE
Rule 14    TYPE -> FLOAT CURR_TYPE
Rule 15    TYPE -> BOOL CURR_TYPE
Rule 16    TYPE -> CHAR CURR_TYPE
Rule 17    TYPE_P -> TYPE
Rule 18    TYPE_P -> VOID CURR_TYPE
Rule 19    PARAMS -> TYPE ID ADD_VAR PARAMS_P
Rule 20    PARAMS -> empty
Rule 21    PARAMS_P -> COMMA TYPE ID ADD_VAR PARAMS_P
Rule 22    PARAMS_P -> empty
Rule 23    MAIN_G -> VOID MAIN PARIZQ PARDER LLVEIZQ ESTATUTO_P LLVEDER
Rule 24    ESTATUTO -> ASIGNACION
Rule 25    ESTATUTO -> CONDICION
Rule 26    ESTATUTO -> LOOP_FOR
Rule 27    ESTATUTO -> ESCRITURA
Rule 28    ESTATUTO -> FUNC_CALL
Rule 29    ESTATUTO_P -> ESTATUTO ESTATUTO_P
Rule 30    ESTATUTO_P -> empty
Rule 31    ASIGNACION -> ID pila_operando_id ASIGN pila_operadores_add EXPRESION cuad_asign PTOCOMA
Rule 32    CONDICION -> IF PARIZQ EXPRESION PARDER LLVEIZQ ESTATUTO_P LLVEDER CONDICION_P
Rule 33    CONDICION_P -> ELSE LLVEIZQ ESTATUTO_P LLVEDER
Rule 34    CONDICION_P -> empty
Rule 35    LOOP_FOR -> FOR PARIZQ CTE_INT COMMA CTE_INT COMMA CTE_INT PARDER LLVEIZQ ESTATUTO_P LLVEDER
Rule 36    ESCRITURA -> PRINT PARIZQ PRINTABLE PRINTABLE_P PARDER
Rule 37    PRINTABLE -> EXPRESION
Rule 38    PRINTABLE -> CTE_STR
Rule 39    PRINTABLE_P -> COMMA PRINTABLE PRINTABLE_P
Rule 40    PRINTABLE_P -> empty
Rule 41    FUNC_CALL -> ID PARIZQ PARM PARDER
Rule 42    PARM -> PARM_P
Rule 43    PARM -> empty
Rule 44    PARM_P -> CTE_INT PARM_PP
Rule 45    PARM_P -> CTE_FLT PARM_PP
Rule 46    PARM_P -> ID PARM_PP
Rule 47    PARM_PP -> COMMA PARM_P
Rule 48    PARM_PP -> empty
Rule 49    EXPRESION -> EXPRE cuad_or OR pila_operadores_add EXPRESION
Rule 50    EXPRESION -> EXPRE cuad_or
Rule 51    EXPRE -> EXPR cuad_and AND pila_operadores_add EXPRE
Rule 52    EXPRE -> EXPR cuad_and
Rule 53    EXPR -> EXP cuad_comp EXPR_P
Rule 54    EXPR_P -> LT pila_operadores_add EXPR
Rule 55    EXPR_P -> GT pila_operadores_add EXPR
Rule 56    EXPR_P -> DIFF pila_operadores_add EXPR
Rule 57    EXPR_P -> LTE pila_operadores_add EXPR
Rule 58    EXPR_P -> GTE pila_operadores_add EXPR
Rule 59    EXPR_P -> EQUAL pila_operadores_add EXPR
Rule 60    EXPR_P -> empty
Rule 61    EXP -> TERM cuad_sumres EXP_P
Rule 62    EXP_P -> MAS pila_operadores_add EXP
Rule 63    EXP_P -> MENOS pila_operadores_add EXP
Rule 64    EXP_P -> empty
Rule 65    TERM -> FACTOR cuad_muldiv TERM_P
Rule 66    TERM_P -> MULT pila_operadores_add TERM
Rule 67    TERM_P -> DIV pila_operadores_add TERM
Rule 68    TERM_P -> empty
Rule 69    FACTOR -> PARIZQ fondo_falso_add EXPRESION PARDER fondo_falso_pop
Rule 70    FACTOR -> VAR_CTE
Rule 71    VAR_CTE -> ID pila_operando_id
Rule 72    VAR_CTE -> CTE_INT pila_operando_int
Rule 73    VAR_CTE -> CTE_FLT pila_operando_float
Rule 74    VAR_CTE -> CTE_CHAR pila_operando_char
Rule 75    empty -> <empty>
Rule 76    CREATE_DIRFUNC -> <empty>
Rule 77    CURR_TYPE -> <empty>
Rule 78    ADD_VAR -> <empty>
Rule 79    ADD_FUNC -> <empty>
Rule 80    pila_operando_id -> <empty>
Rule 81    pila_operando_int -> <empty>
Rule 82    pila_operando_float -> <empty>
Rule 83    pila_operando_char -> <empty>
Rule 84    pila_operadores_add -> <empty>
Rule 85    fondo_falso_add -> <empty>
Rule 86    fondo_falso_pop -> <empty>
Rule 87    cuad_and -> <empty>
Rule 88    cuad_or -> <empty>
Rule 89    cuad_comp -> <empty>
Rule 90    cuad_sumres -> <empty>
Rule 91    cuad_muldiv -> <empty>
Rule 92    cuad_asign -> <empty>
Rule 93    cuad_return -> <empty>

Terminals, with rules where they appear

AND                  : 51
ASIGN                : 31
BOOL                 : 15
CHAR                 : 16
COMMA                : 6 21 35 35 39 47
COMMENT              : 
CORDER               : 3 8
CORIZQ               : 3 8
CTE_CHAR             : 74
CTE_FLT              : 45 73
CTE_INT              : 3 8 35 35 35 44 72
CTE_STR              : 38
DIFF                 : 56
DIV                  : 67
DOSPTOS              : 
ELSE                 : 33
EQUAL                : 59
FLOAT                : 14
FOR                  : 35
FUNC                 : 10
GT                   : 55
GTE                  : 58
ID                   : 1 2 3 6 10 19 21 31 41 46 71
IF                   : 32
INT                  : 13
LLVEDER              : 10 23 32 33 35
LLVEIZQ              : 10 23 32 33 35
LT                   : 54
LTE                  : 57
MAIN                 : 23
MAS                  : 62
MAT                  : 3
MENOS                : 63
MULT                 : 66
OR                   : 49
PARDER               : 10 23 32 35 36 41 69
PARIZQ               : 10 23 32 35 36 41 69
PRINT                : 36
PROGRAM              : 1
PTOCOMA              : 1 2 3 10 31
PUNTO                : 
RETURN               : 10
VAR                  : 2
VOID                 : 18 23
error                : 

Nonterminals, with rules where they appear

ADD_FUNC             : 10
ADD_VAR              : 2 6 19 21
ASIGNACION           : 24
CONDICION            : 25
CONDICION_P          : 32
CREATE_DIRFUNC       : 1
CURR_TYPE            : 13 14 15 16 18
ESCRITURA            : 27
ESTATUTO             : 29
ESTATUTO_P           : 10 23 29 32 33 35
EXP                  : 53 62 63
EXPR                 : 51 52 54 55 56 57 58 59
EXPRE                : 49 50 51
EXPRESION            : 10 31 32 37 49 69
EXPR_P               : 53
EXP_P                : 61
FACTOR               : 65
FUNCS                : 11
FUNCS_P              : 1 11
FUNC_CALL            : 28
LOOP_FOR             : 26
MAIN_G               : 1
PARAMS               : 10
PARAMS_P             : 19 21
PARM                 : 41
PARM_P               : 42 47
PARM_PP              : 44 45 46
PRINTABLE            : 36 39
PRINTABLE_P          : 36 39
PROGRAMA             : 0
TERM                 : 61 66 67
TERM_P               : 65
TYPE                 : 2 3 17 19 21
TYPE_P               : 10
VARS                 : 4
VARS_P               : 1 4
VARS_PP              : 2 6
VARS_PPP             : 3
VAR_CTE              : 70
cuad_and             : 51 52
cuad_asign           : 31
cuad_comp            : 53
cuad_muldiv          : 65
cuad_or              : 49 50
cuad_return          : 10
cuad_sumres          : 61
empty                : 5 7 9 12 20 22 30 34 40 43 48 60 64 68
fondo_falso_add      : 69
fondo_falso_pop      : 69
pila_operadores_add  : 31 49 51 54 55 56 57 58 59 62 63 66 67
pila_operando_char   : 74
pila_operando_float  : 73
pila_operando_id     : 31 71
pila_operando_int    : 72

Parsing method: LALR

state 0

    (0) S' -> . PROGRAMA
    (1) PROGRAMA -> . PROGRAM CREATE_DIRFUNC ID PTOCOMA VARS_P FUNCS_P MAIN_G

    PROGRAM         shift and go to state 2

    PROGRAMA                       shift and go to state 1

state 1

    (0) S' -> PROGRAMA .



state 2

    (1) PROGRAMA -> PROGRAM . CREATE_DIRFUNC ID PTOCOMA VARS_P FUNCS_P MAIN_G
    (76) CREATE_DIRFUNC -> .

    ID              reduce using rule 76 (CREATE_DIRFUNC -> .)

    CREATE_DIRFUNC                 shift and go to state 3

state 3

    (1) PROGRAMA -> PROGRAM CREATE_DIRFUNC . ID PTOCOMA VARS_P FUNCS_P MAIN_G

    ID              shift and go to state 4


state 4

    (1) PROGRAMA -> PROGRAM CREATE_DIRFUNC ID . PTOCOMA VARS_P FUNCS_P MAIN_G

    PTOCOMA         shift and go to state 5


state 5

    (1) PROGRAMA -> PROGRAM CREATE_DIRFUNC ID PTOCOMA . VARS_P FUNCS_P MAIN_G
    (4) VARS_P -> . VARS VARS_P
    (5) VARS_P -> . empty
    (2) VARS -> . VAR TYPE ID ADD_VAR VARS_PP PTOCOMA
    (3) VARS -> . MAT TYPE ID CORIZQ CTE_INT CORDER VARS_PPP PTOCOMA
    (75) empty -> .

    VAR             shift and go to state 9
    MAT             shift and go to state 10
    FUNC            reduce using rule 75 (empty -> .)
    VOID            reduce using rule 75 (empty -> .)

    VARS_P                         shift and go to state 6
    VARS                           shift and go to state 7
    empty                          shift and go to state 8

state 6

    (1) PROGRAMA -> PROGRAM CREATE_DIRFUNC ID PTOCOMA VARS_P . FUNCS_P MAIN_G
    (11) FUNCS_P -> . FUNCS FUNCS_P
    (12) FUNCS_P -> . empty
    (10) FUNCS -> . FUNC TYPE_P ID ADD_FUNC PARIZQ PARAMS PARDER LLVEIZQ ESTATUTO_P RETURN EXPRESION cuad_return PTOCOMA LLVEDER
    (75) empty -> .

    FUNC            shift and go to state 14
    VOID            reduce using rule 75 (empty -> .)

    FUNCS_P                        shift and go to state 11
    FUNCS                          shift and go to state 12
    empty                          shift and go to state 13

state 7

    (4) VARS_P -> VARS . VARS_P
    (4) VARS_P -> . VARS VARS_P
    (5) VARS_P -> . empty
    (2) VARS -> . VAR TYPE ID ADD_VAR VARS_PP PTOCOMA
    (3) VARS -> . MAT TYPE ID CORIZQ CTE_INT CORDER VARS_PPP PTOCOMA
    (75) empty -> .

    VAR             shift and go to state 9
    MAT             shift and go to state 10
    FUNC            reduce using rule 75 (empty -> .)
    VOID            reduce using rule 75 (empty -> .)

    VARS                           shift and go to state 7
    VARS_P                         shift and go to state 15
    empty                          shift and go to state 8

state 8

    (5) VARS_P -> empty .

    FUNC            reduce using rule 5 (VARS_P -> empty .)
    VOID            reduce using rule 5 (VARS_P -> empty .)


state 9

    (2) VARS -> VAR . TYPE ID ADD_VAR VARS_PP PTOCOMA
    (13) TYPE -> . INT CURR_TYPE
    (14) TYPE -> . FLOAT CURR_TYPE
    (15) TYPE -> . BOOL CURR_TYPE
    (16) TYPE -> . CHAR CURR_TYPE

    INT             shift and go to state 17
    FLOAT           shift and go to state 18
    BOOL            shift and go to state 19
    CHAR            shift and go to state 20

    TYPE                           shift and go to state 16

state 10

    (3) VARS -> MAT . TYPE ID CORIZQ CTE_INT CORDER VARS_PPP PTOCOMA
    (13) TYPE -> . INT CURR_TYPE
    (14) TYPE -> . FLOAT CURR_TYPE
    (15) TYPE -> . BOOL CURR_TYPE
    (16) TYPE -> . CHAR CURR_TYPE

    INT             shift and go to state 17
    FLOAT           shift and go to state 18
    BOOL            shift and go to state 19
    CHAR            shift and go to state 20

    TYPE                           shift and go to state 21

state 11

    (1) PROGRAMA -> PROGRAM CREATE_DIRFUNC ID PTOCOMA VARS_P FUNCS_P . MAIN_G
    (23) MAIN_G -> . VOID MAIN PARIZQ PARDER LLVEIZQ ESTATUTO_P LLVEDER

    VOID            shift and go to state 23

    MAIN_G                         shift and go to state 22

state 12

    (11) FUNCS_P -> FUNCS . FUNCS_P
    (11) FUNCS_P -> . FUNCS FUNCS_P
    (12) FUNCS_P -> . empty
    (10) FUNCS -> . FUNC TYPE_P ID ADD_FUNC PARIZQ PARAMS PARDER LLVEIZQ ESTATUTO_P RETURN EXPRESION cuad_return PTOCOMA LLVEDER
    (75) empty -> .

    FUNC            shift and go to state 14
    VOID            reduce using rule 75 (empty -> .)

    FUNCS                          shift and go to state 12
    FUNCS_P                        shift and go to state 24
    empty                          shift and go to state 13

state 13

    (12) FUNCS_P -> empty .

    VOID            reduce using rule 12 (FUNCS_P -> empty .)


state 14

    (10) FUNCS -> FUNC . TYPE_P ID ADD_FUNC PARIZQ PARAMS PARDER LLVEIZQ ESTATUTO_P RETURN EXPRESION cuad_return PTOCOMA LLVEDER
    (17) TYPE_P -> . TYPE
    (18) TYPE_P -> . VOID CURR_TYPE
    (13) TYPE -> . INT CURR_TYPE
    (14) TYPE -> . FLOAT CURR_TYPE
    (15) TYPE -> . BOOL CURR_TYPE
    (16) TYPE -> . CHAR CURR_TYPE

    VOID            shift and go to state 27
    INT             shift and go to state 17
    FLOAT           shift and go to state 18
    BOOL            shift and go to state 19
    CHAR            shift and go to state 20

    TYPE_P                         shift and go to state 25
    TYPE                           shift and go to state 26

state 15

    (4) VARS_P -> VARS VARS_P .

    FUNC            reduce using rule 4 (VARS_P -> VARS VARS_P .)
    VOID            reduce using rule 4 (VARS_P -> VARS VARS_P .)


state 16

    (2) VARS -> VAR TYPE . ID ADD_VAR VARS_PP PTOCOMA

    ID              shift and go to state 28


state 17

    (13) TYPE -> INT . CURR_TYPE
    (77) CURR_TYPE -> .

    ID              reduce using rule 77 (CURR_TYPE -> .)

    CURR_TYPE                      shift and go to state 29

state 18

    (14) TYPE -> FLOAT . CURR_TYPE
    (77) CURR_TYPE -> .

    ID              reduce using rule 77 (CURR_TYPE -> .)

    CURR_TYPE                      shift and go to state 30

state 19

    (15) TYPE -> BOOL . CURR_TYPE
    (77) CURR_TYPE -> .

    ID              reduce using rule 77 (CURR_TYPE -> .)

    CURR_TYPE                      shift and go to state 31

state 20

    (16) TYPE -> CHAR . CURR_TYPE
    (77) CURR_TYPE -> .

    ID              reduce using rule 77 (CURR_TYPE -> .)

    CURR_TYPE                      shift and go to state 32

state 21

    (3) VARS -> MAT TYPE . ID CORIZQ CTE_INT CORDER VARS_PPP PTOCOMA

    ID              shift and go to state 33


state 22

    (1) PROGRAMA -> PROGRAM CREATE_DIRFUNC ID PTOCOMA VARS_P FUNCS_P MAIN_G .

    $end            reduce using rule 1 (PROGRAMA -> PROGRAM CREATE_DIRFUNC ID PTOCOMA VARS_P FUNCS_P MAIN_G .)


state 23

    (23) MAIN_G -> VOID . MAIN PARIZQ PARDER LLVEIZQ ESTATUTO_P LLVEDER

    MAIN            shift and go to state 34


state 24

    (11) FUNCS_P -> FUNCS FUNCS_P .

    VOID            reduce using rule 11 (FUNCS_P -> FUNCS FUNCS_P .)


state 25

    (10) FUNCS -> FUNC TYPE_P . ID ADD_FUNC PARIZQ PARAMS PARDER LLVEIZQ ESTATUTO_P RETURN EXPRESION cuad_return PTOCOMA LLVEDER

    ID              shift and go to state 35


state 26

    (17) TYPE_P -> TYPE .

    ID              reduce using rule 17 (TYPE_P -> TYPE .)


state 27

    (18) TYPE_P -> VOID . CURR_TYPE
    (77) CURR_TYPE -> .

    ID              reduce using rule 77 (CURR_TYPE -> .)

    CURR_TYPE                      shift and go to state 36

state 28

    (2) VARS -> VAR TYPE ID . ADD_VAR VARS_PP PTOCOMA
    (78) ADD_VAR -> .

    COMMA           reduce using rule 78 (ADD_VAR -> .)
    PTOCOMA         reduce using rule 78 (ADD_VAR -> .)

    ADD_VAR                        shift and go to state 37

state 29

    (13) TYPE -> INT CURR_TYPE .

    ID              reduce using rule 13 (TYPE -> INT CURR_TYPE .)


state 30

    (14) TYPE -> FLOAT CURR_TYPE .

    ID              reduce using rule 14 (TYPE -> FLOAT CURR_TYPE .)


state 31

    (15) TYPE -> BOOL CURR_TYPE .

    ID              reduce using rule 15 (TYPE -> BOOL CURR_TYPE .)


state 32

    (16) TYPE -> CHAR CURR_TYPE .

    ID              reduce using rule 16 (TYPE -> CHAR CURR_TYPE .)


state 33

    (3) VARS -> MAT TYPE ID . CORIZQ CTE_INT CORDER VARS_PPP PTOCOMA

    CORIZQ          shift and go to state 38


state 34

    (23) MAIN_G -> VOID MAIN . PARIZQ PARDER LLVEIZQ ESTATUTO_P LLVEDER

    PARIZQ          shift and go to state 39


state 35

    (10) FUNCS -> FUNC TYPE_P ID . ADD_FUNC PARIZQ PARAMS PARDER LLVEIZQ ESTATUTO_P RETURN EXPRESION cuad_return PTOCOMA LLVEDER
    (79) ADD_FUNC -> .

    PARIZQ          reduce using rule 79 (ADD_FUNC -> .)

    ADD_FUNC                       shift and go to state 40

state 36

    (18) TYPE_P -> VOID CURR_TYPE .

    ID              reduce using rule 18 (TYPE_P -> VOID CURR_TYPE .)


state 37

    (2) VARS -> VAR TYPE ID ADD_VAR . VARS_PP PTOCOMA
    (6) VARS_PP -> . COMMA ID ADD_VAR VARS_PP
    (7) VARS_PP -> . empty
    (75) empty -> .

    COMMA           shift and go to state 42
    PTOCOMA         reduce using rule 75 (empty -> .)

    VARS_PP                        shift and go to state 41
    empty                          shift and go to state 43

state 38

    (3) VARS -> MAT TYPE ID CORIZQ . CTE_INT CORDER VARS_PPP PTOCOMA

    CTE_INT         shift and go to state 44


state 39

    (23) MAIN_G -> VOID MAIN PARIZQ . PARDER LLVEIZQ ESTATUTO_P LLVEDER

    PARDER          shift and go to state 45


state 40

    (10) FUNCS -> FUNC TYPE_P ID ADD_FUNC . PARIZQ PARAMS PARDER LLVEIZQ ESTATUTO_P RETURN EXPRESION cuad_return PTOCOMA LLVEDER

    PARIZQ          shift and go to state 46


state 41

    (2) VARS -> VAR TYPE ID ADD_VAR VARS_PP . PTOCOMA

    PTOCOMA         shift and go to state 47


state 42

    (6) VARS_PP -> COMMA . ID ADD_VAR VARS_PP

    ID              shift and go to state 48


state 43

    (7) VARS_PP -> empty .

    PTOCOMA         reduce using rule 7 (VARS_PP -> empty .)


state 44

    (3) VARS -> MAT TYPE ID CORIZQ CTE_INT . CORDER VARS_PPP PTOCOMA

    CORDER          shift and go to state 49


state 45

    (23) MAIN_G -> VOID MAIN PARIZQ PARDER . LLVEIZQ ESTATUTO_P LLVEDER

    LLVEIZQ         shift and go to state 50


state 46

    (10) FUNCS -> FUNC TYPE_P ID ADD_FUNC PARIZQ . PARAMS PARDER LLVEIZQ ESTATUTO_P RETURN EXPRESION cuad_return PTOCOMA LLVEDER
    (19) PARAMS -> . TYPE ID ADD_VAR PARAMS_P
    (20) PARAMS -> . empty
    (13) TYPE -> . INT CURR_TYPE
    (14) TYPE -> . FLOAT CURR_TYPE
    (15) TYPE -> . BOOL CURR_TYPE
    (16) TYPE -> . CHAR CURR_TYPE
    (75) empty -> .

    INT             shift and go to state 17
    FLOAT           shift and go to state 18
    BOOL            shift and go to state 19
    CHAR            shift and go to state 20
    PARDER          reduce using rule 75 (empty -> .)

    PARAMS                         shift and go to state 51
    TYPE                           shift and go to state 52
    empty                          shift and go to state 53

state 47

    (2) VARS -> VAR TYPE ID ADD_VAR VARS_PP PTOCOMA .

    VAR             reduce using rule 2 (VARS -> VAR TYPE ID ADD_VAR VARS_PP PTOCOMA .)
    MAT             reduce using rule 2 (VARS -> VAR TYPE ID ADD_VAR VARS_PP PTOCOMA .)
    FUNC            reduce using rule 2 (VARS -> VAR TYPE ID ADD_VAR VARS_PP PTOCOMA .)
    VOID            reduce using rule 2 (VARS -> VAR TYPE ID ADD_VAR VARS_PP PTOCOMA .)


state 48

    (6) VARS_PP -> COMMA ID . ADD_VAR VARS_PP
    (78) ADD_VAR -> .

    COMMA           reduce using rule 78 (ADD_VAR -> .)
    PTOCOMA         reduce using rule 78 (ADD_VAR -> .)

    ADD_VAR                        shift and go to state 54

state 49

    (3) VARS -> MAT TYPE ID CORIZQ CTE_INT CORDER . VARS_PPP PTOCOMA
    (8) VARS_PPP -> . CORIZQ CTE_INT CORDER
    (9) VARS_PPP -> . empty
    (75) empty -> .

    CORIZQ          shift and go to state 55
    PTOCOMA         reduce using rule 75 (empty -> .)

    VARS_PPP                       shift and go to state 56
    empty                          shift and go to state 57

state 50

    (23) MAIN_G -> VOID MAIN PARIZQ PARDER LLVEIZQ . ESTATUTO_P LLVEDER
    (29) ESTATUTO_P -> . ESTATUTO ESTATUTO_P
    (30) ESTATUTO_P -> . empty
    (24) ESTATUTO -> . ASIGNACION
    (25) ESTATUTO -> . CONDICION
    (26) ESTATUTO -> . LOOP_FOR
    (27) ESTATUTO -> . ESCRITURA
    (28) ESTATUTO -> . FUNC_CALL
    (75) empty -> .
    (31) ASIGNACION -> . ID pila_operando_id ASIGN pila_operadores_add EXPRESION cuad_asign PTOCOMA
    (32) CONDICION -> . IF PARIZQ EXPRESION PARDER LLVEIZQ ESTATUTO_P LLVEDER CONDICION_P
    (35) LOOP_FOR -> . FOR PARIZQ CTE_INT COMMA CTE_INT COMMA CTE_INT PARDER LLVEIZQ ESTATUTO_P LLVEDER
    (36) ESCRITURA -> . PRINT PARIZQ PRINTABLE PRINTABLE_P PARDER
    (41) FUNC_CALL -> . ID PARIZQ PARM PARDER

    LLVEDER         reduce using rule 75 (empty -> .)
    ID              shift and go to state 66
    IF              shift and go to state 67
    FOR             shift and go to state 68
    PRINT           shift and go to state 69

    ESTATUTO_P                     shift and go to state 58
    ESTATUTO                       shift and go to state 59
    empty                          shift and go to state 60
    ASIGNACION                     shift and go to state 61
    CONDICION                      shift and go to state 62
    LOOP_FOR                       shift and go to state 63
    ESCRITURA                      shift and go to state 64
    FUNC_CALL                      shift and go to state 65

state 51

    (10) FUNCS -> FUNC TYPE_P ID ADD_FUNC PARIZQ PARAMS . PARDER LLVEIZQ ESTATUTO_P RETURN EXPRESION cuad_return PTOCOMA LLVEDER

    PARDER          shift and go to state 70


state 52

    (19) PARAMS -> TYPE . ID ADD_VAR PARAMS_P

    ID              shift and go to state 71


state 53

    (20) PARAMS -> empty .

    PARDER          reduce using rule 20 (PARAMS -> empty .)


state 54

    (6) VARS_PP -> COMMA ID ADD_VAR . VARS_PP
    (6) VARS_PP -> . COMMA ID ADD_VAR VARS_PP
    (7) VARS_PP -> . empty
    (75) empty -> .

    COMMA           shift and go to state 42
    PTOCOMA         reduce using rule 75 (empty -> .)

    VARS_PP                        shift and go to state 72
    empty                          shift and go to state 43

state 55

    (8) VARS_PPP -> CORIZQ . CTE_INT CORDER

    CTE_INT         shift and go to state 73


state 56

    (3) VARS -> MAT TYPE ID CORIZQ CTE_INT CORDER VARS_PPP . PTOCOMA

    PTOCOMA         shift and go to state 74


state 57

    (9) VARS_PPP -> empty .

    PTOCOMA         reduce using rule 9 (VARS_PPP -> empty .)


state 58

    (23) MAIN_G -> VOID MAIN PARIZQ PARDER LLVEIZQ ESTATUTO_P . LLVEDER

    LLVEDER         shift and go to state 75


state 59

    (29) ESTATUTO_P -> ESTATUTO . ESTATUTO_P
    (29) ESTATUTO_P -> . ESTATUTO ESTATUTO_P
    (30) ESTATUTO_P -> . empty
    (24) ESTATUTO -> . ASIGNACION
    (25) ESTATUTO -> . CONDICION
    (26) ESTATUTO -> . LOOP_FOR
    (27) ESTATUTO -> . ESCRITURA
    (28) ESTATUTO -> . FUNC_CALL
    (75) empty -> .
    (31) ASIGNACION -> . ID pila_operando_id ASIGN pila_operadores_add EXPRESION cuad_asign PTOCOMA
    (32) CONDICION -> . IF PARIZQ EXPRESION PARDER LLVEIZQ ESTATUTO_P LLVEDER CONDICION_P
    (35) LOOP_FOR -> . FOR PARIZQ CTE_INT COMMA CTE_INT COMMA CTE_INT PARDER LLVEIZQ ESTATUTO_P LLVEDER
    (36) ESCRITURA -> . PRINT PARIZQ PRINTABLE PRINTABLE_P PARDER
    (41) FUNC_CALL -> . ID PARIZQ PARM PARDER

    LLVEDER         reduce using rule 75 (empty -> .)
    RETURN          reduce using rule 75 (empty -> .)
    ID              shift and go to state 66
    IF              shift and go to state 67
    FOR             shift and go to state 68
    PRINT           shift and go to state 69

    ESTATUTO                       shift and go to state 59
    ESTATUTO_P                     shift and go to state 76
    empty                          shift and go to state 60
    ASIGNACION                     shift and go to state 61
    CONDICION                      shift and go to state 62
    LOOP_FOR                       shift and go to state 63
    ESCRITURA                      shift and go to state 64
    FUNC_CALL                      shift and go to state 65

state 60

    (30) ESTATUTO_P -> empty .

    LLVEDER         reduce using rule 30 (ESTATUTO_P -> empty .)
    RETURN          reduce using rule 30 (ESTATUTO_P -> empty .)


state 61

    (24) ESTATUTO -> ASIGNACION .

    ID              reduce using rule 24 (ESTATUTO -> ASIGNACION .)
    IF              reduce using rule 24 (ESTATUTO -> ASIGNACION .)
    FOR             reduce using rule 24 (ESTATUTO -> ASIGNACION .)
    PRINT           reduce using rule 24 (ESTATUTO -> ASIGNACION .)
    LLVEDER         reduce using rule 24 (ESTATUTO -> ASIGNACION .)
    RETURN          reduce using rule 24 (ESTATUTO -> ASIGNACION .)


state 62

    (25) ESTATUTO -> CONDICION .

    ID              reduce using rule 25 (ESTATUTO -> CONDICION .)
    IF              reduce using rule 25 (ESTATUTO -> CONDICION .)
    FOR             reduce using rule 25 (ESTATUTO -> CONDICION .)
    PRINT           reduce using rule 25 (ESTATUTO -> CONDICION .)
    LLVEDER         reduce using rule 25 (ESTATUTO -> CONDICION .)
    RETURN          reduce using rule 25 (ESTATUTO -> CONDICION .)


state 63

    (26) ESTATUTO -> LOOP_FOR .

    ID              reduce using rule 26 (ESTATUTO -> LOOP_FOR .)
    IF              reduce using rule 26 (ESTATUTO -> LOOP_FOR .)
    FOR             reduce using rule 26 (ESTATUTO -> LOOP_FOR .)
    PRINT           reduce using rule 26 (ESTATUTO -> LOOP_FOR .)
    LLVEDER         reduce using rule 26 (ESTATUTO -> LOOP_FOR .)
    RETURN          reduce using rule 26 (ESTATUTO -> LOOP_FOR .)


state 64

    (27) ESTATUTO -> ESCRITURA .

    ID              reduce using rule 27 (ESTATUTO -> ESCRITURA .)
    IF              reduce using rule 27 (ESTATUTO -> ESCRITURA .)
    FOR             reduce using rule 27 (ESTATUTO -> ESCRITURA .)
    PRINT           reduce using rule 27 (ESTATUTO -> ESCRITURA .)
    LLVEDER         reduce using rule 27 (ESTATUTO -> ESCRITURA .)
    RETURN          reduce using rule 27 (ESTATUTO -> ESCRITURA .)


state 65

    (28) ESTATUTO -> FUNC_CALL .

    ID              reduce using rule 28 (ESTATUTO -> FUNC_CALL .)
    IF              reduce using rule 28 (ESTATUTO -> FUNC_CALL .)
    FOR             reduce using rule 28 (ESTATUTO -> FUNC_CALL .)
    PRINT           reduce using rule 28 (ESTATUTO -> FUNC_CALL .)
    LLVEDER         reduce using rule 28 (ESTATUTO -> FUNC_CALL .)
    RETURN          reduce using rule 28 (ESTATUTO -> FUNC_CALL .)


state 66

    (31) ASIGNACION -> ID . pila_operando_id ASIGN pila_operadores_add EXPRESION cuad_asign PTOCOMA
    (41) FUNC_CALL -> ID . PARIZQ PARM PARDER
    (80) pila_operando_id -> .

    PARIZQ          shift and go to state 78
    ASIGN           reduce using rule 80 (pila_operando_id -> .)

    pila_operando_id               shift and go to state 77

state 67

    (32) CONDICION -> IF . PARIZQ EXPRESION PARDER LLVEIZQ ESTATUTO_P LLVEDER CONDICION_P

    PARIZQ          shift and go to state 79


state 68

    (35) LOOP_FOR -> FOR . PARIZQ CTE_INT COMMA CTE_INT COMMA CTE_INT PARDER LLVEIZQ ESTATUTO_P LLVEDER

    PARIZQ          shift and go to state 80


state 69

    (36) ESCRITURA -> PRINT . PARIZQ PRINTABLE PRINTABLE_P PARDER

    PARIZQ          shift and go to state 81


state 70

    (10) FUNCS -> FUNC TYPE_P ID ADD_FUNC PARIZQ PARAMS PARDER . LLVEIZQ ESTATUTO_P RETURN EXPRESION cuad_return PTOCOMA LLVEDER

    LLVEIZQ         shift and go to state 82


state 71

    (19) PARAMS -> TYPE ID . ADD_VAR PARAMS_P
    (78) ADD_VAR -> .

    COMMA           reduce using rule 78 (ADD_VAR -> .)
    PARDER          reduce using rule 78 (ADD_VAR -> .)

    ADD_VAR                        shift and go to state 83

state 72

    (6) VARS_PP -> COMMA ID ADD_VAR VARS_PP .

    PTOCOMA         reduce using rule 6 (VARS_PP -> COMMA ID ADD_VAR VARS_PP .)


state 73

    (8) VARS_PPP -> CORIZQ CTE_INT . CORDER

    CORDER          shift and go to state 84


state 74

    (3) VARS -> MAT TYPE ID CORIZQ CTE_INT CORDER VARS_PPP PTOCOMA .

    VAR             reduce using rule 3 (VARS -> MAT TYPE ID CORIZQ CTE_INT CORDER VARS_PPP PTOCOMA .)
    MAT             reduce using rule 3 (VARS -> MAT TYPE ID CORIZQ CTE_INT CORDER VARS_PPP PTOCOMA .)
    FUNC            reduce using rule 3 (VARS -> MAT TYPE ID CORIZQ CTE_INT CORDER VARS_PPP PTOCOMA .)
    VOID            reduce using rule 3 (VARS -> MAT TYPE ID CORIZQ CTE_INT CORDER VARS_PPP PTOCOMA .)


state 75

    (23) MAIN_G -> VOID MAIN PARIZQ PARDER LLVEIZQ ESTATUTO_P LLVEDER .

    $end            reduce using rule 23 (MAIN_G -> VOID MAIN PARIZQ PARDER LLVEIZQ ESTATUTO_P LLVEDER .)


state 76

    (29) ESTATUTO_P -> ESTATUTO ESTATUTO_P .

    LLVEDER         reduce using rule 29 (ESTATUTO_P -> ESTATUTO ESTATUTO_P .)
    RETURN          reduce using rule 29 (ESTATUTO_P -> ESTATUTO ESTATUTO_P .)


state 77

    (31) ASIGNACION -> ID pila_operando_id . ASIGN pila_operadores_add EXPRESION cuad_asign PTOCOMA

    ASIGN           shift and go to state 85


state 78

    (41) FUNC_CALL -> ID PARIZQ . PARM PARDER
    (42) PARM -> . PARM_P
    (43) PARM -> . empty
    (44) PARM_P -> . CTE_INT PARM_PP
    (45) PARM_P -> . CTE_FLT PARM_PP
    (46) PARM_P -> . ID PARM_PP
    (75) empty -> .

    CTE_INT         shift and go to state 90
    CTE_FLT         shift and go to state 91
    ID              shift and go to state 86
    PARDER          reduce using rule 75 (empty -> .)

    PARM                           shift and go to state 87
    PARM_P                         shift and go to state 88
    empty                          shift and go to state 89

state 79

    (32) CONDICION -> IF PARIZQ . EXPRESION PARDER LLVEIZQ ESTATUTO_P LLVEDER CONDICION_P
    (49) EXPRESION -> . EXPRE cuad_or OR pila_operadores_add EXPRESION
    (50) EXPRESION -> . EXPRE cuad_or
    (51) EXPRE -> . EXPR cuad_and AND pila_operadores_add EXPRE
    (52) EXPRE -> . EXPR cuad_and
    (53) EXPR -> . EXP cuad_comp EXPR_P
    (61) EXP -> . TERM cuad_sumres EXP_P
    (65) TERM -> . FACTOR cuad_muldiv TERM_P
    (69) FACTOR -> . PARIZQ fondo_falso_add EXPRESION PARDER fondo_falso_pop
    (70) FACTOR -> . VAR_CTE
    (71) VAR_CTE -> . ID pila_operando_id
    (72) VAR_CTE -> . CTE_INT pila_operando_int
    (73) VAR_CTE -> . CTE_FLT pila_operando_float
    (74) VAR_CTE -> . CTE_CHAR pila_operando_char

    PARIZQ          shift and go to state 92
    ID              shift and go to state 100
    CTE_INT         shift and go to state 101
    CTE_FLT         shift and go to state 102
    CTE_CHAR        shift and go to state 103

    EXPRESION                      shift and go to state 93
    EXPRE                          shift and go to state 94
    EXPR                           shift and go to state 95
    EXP                            shift and go to state 96
    TERM                           shift and go to state 97
    FACTOR                         shift and go to state 98
    VAR_CTE                        shift and go to state 99

state 80

    (35) LOOP_FOR -> FOR PARIZQ . CTE_INT COMMA CTE_INT COMMA CTE_INT PARDER LLVEIZQ ESTATUTO_P LLVEDER

    CTE_INT         shift and go to state 104


state 81

    (36) ESCRITURA -> PRINT PARIZQ . PRINTABLE PRINTABLE_P PARDER
    (37) PRINTABLE -> . EXPRESION
    (38) PRINTABLE -> . CTE_STR
    (49) EXPRESION -> . EXPRE cuad_or OR pila_operadores_add EXPRESION
    (50) EXPRESION -> . EXPRE cuad_or
    (51) EXPRE -> . EXPR cuad_and AND pila_operadores_add EXPRE
    (52) EXPRE -> . EXPR cuad_and
    (53) EXPR -> . EXP cuad_comp EXPR_P
    (61) EXP -> . TERM cuad_sumres EXP_P
    (65) TERM -> . FACTOR cuad_muldiv TERM_P
    (69) FACTOR -> . PARIZQ fondo_falso_add EXPRESION PARDER fondo_falso_pop
    (70) FACTOR -> . VAR_CTE
    (71) VAR_CTE -> . ID pila_operando_id
    (72) VAR_CTE -> . CTE_INT pila_operando_int
    (73) VAR_CTE -> . CTE_FLT pila_operando_float
    (74) VAR_CTE -> . CTE_CHAR pila_operando_char

    CTE_STR         shift and go to state 107
    PARIZQ          shift and go to state 92
    ID              shift and go to state 100
    CTE_INT         shift and go to state 101
    CTE_FLT         shift and go to state 102
    CTE_CHAR        shift and go to state 103

    PRINTABLE                      shift and go to state 105
    EXPRESION                      shift and go to state 106
    EXPRE                          shift and go to state 94
    EXPR                           shift and go to state 95
    EXP                            shift and go to state 96
    TERM                           shift and go to state 97
    FACTOR                         shift and go to state 98
    VAR_CTE                        shift and go to state 99

state 82

    (10) FUNCS -> FUNC TYPE_P ID ADD_FUNC PARIZQ PARAMS PARDER LLVEIZQ . ESTATUTO_P RETURN EXPRESION cuad_return PTOCOMA LLVEDER
    (29) ESTATUTO_P -> . ESTATUTO ESTATUTO_P
    (30) ESTATUTO_P -> . empty
    (24) ESTATUTO -> . ASIGNACION
    (25) ESTATUTO -> . CONDICION
    (26) ESTATUTO -> . LOOP_FOR
    (27) ESTATUTO -> . ESCRITURA
    (28) ESTATUTO -> . FUNC_CALL
    (75) empty -> .
    (31) ASIGNACION -> . ID pila_operando_id ASIGN pila_operadores_add EXPRESION cuad_asign PTOCOMA
    (32) CONDICION -> . IF PARIZQ EXPRESION PARDER LLVEIZQ ESTATUTO_P LLVEDER CONDICION_P
    (35) LOOP_FOR -> . FOR PARIZQ CTE_INT COMMA CTE_INT COMMA CTE_INT PARDER LLVEIZQ ESTATUTO_P LLVEDER
    (36) ESCRITURA -> . PRINT PARIZQ PRINTABLE PRINTABLE_P PARDER
    (41) FUNC_CALL -> . ID PARIZQ PARM PARDER

    RETURN          reduce using rule 75 (empty -> .)
    ID              shift and go to state 66
    IF              shift and go to state 67
    FOR             shift and go to state 68
    PRINT           shift and go to state 69

    ESTATUTO_P                     shift and go to state 108
    ESTATUTO                       shift and go to state 59
    empty                          shift and go to state 60
    ASIGNACION                     shift and go to state 61
    CONDICION                      shift and go to state 62
    LOOP_FOR                       shift and go to state 63
    ESCRITURA                      shift and go to state 64
    FUNC_CALL                      shift and go to state 65

state 83

    (19) PARAMS -> TYPE ID ADD_VAR . PARAMS_P
    (21) PARAMS_P -> . COMMA TYPE ID ADD_VAR PARAMS_P
    (22) PARAMS_P -> . empty
    (75) empty -> .

    COMMA           shift and go to state 110
    PARDER          reduce using rule 75 (empty -> .)

    PARAMS_P                       shift and go to state 109
    empty                          shift and go to state 111

state 84

    (8) VARS_PPP -> CORIZQ CTE_INT CORDER .

    PTOCOMA         reduce using rule 8 (VARS_PPP -> CORIZQ CTE_INT CORDER .)


state 85

    (31) ASIGNACION -> ID pila_operando_id ASIGN . pila_operadores_add EXPRESION cuad_asign PTOCOMA
    (84) pila_operadores_add -> .

    PARIZQ          reduce using rule 84 (pila_operadores_add -> .)
    ID              reduce using rule 84 (pila_operadores_add -> .)
    CTE_INT         reduce using rule 84 (pila_operadores_add -> .)
    CTE_FLT         reduce using rule 84 (pila_operadores_add -> .)
    CTE_CHAR        reduce using rule 84 (pila_operadores_add -> .)

    pila_operadores_add            shift and go to state 112

state 86

    (46) PARM_P -> ID . PARM_PP
    (47) PARM_PP -> . COMMA PARM_P
    (48) PARM_PP -> . empty
    (75) empty -> .

    COMMA           shift and go to state 114
    PARDER          reduce using rule 75 (empty -> .)

    PARM_PP                        shift and go to state 113
    empty                          shift and go to state 115

state 87

    (41) FUNC_CALL -> ID PARIZQ PARM . PARDER

    PARDER          shift and go to state 116


state 88

    (42) PARM -> PARM_P .

    PARDER          reduce using rule 42 (PARM -> PARM_P .)


state 89

    (43) PARM -> empty .

    PARDER          reduce using rule 43 (PARM -> empty .)


state 90

    (44) PARM_P -> CTE_INT . PARM_PP
    (47) PARM_PP -> . COMMA PARM_P
    (48) PARM_PP -> . empty
    (75) empty -> .

    COMMA           shift and go to state 114
    PARDER          reduce using rule 75 (empty -> .)

    PARM_PP                        shift and go to state 117
    empty                          shift and go to state 115

state 91

    (45) PARM_P -> CTE_FLT . PARM_PP
    (47) PARM_PP -> . COMMA PARM_P
    (48) PARM_PP -> . empty
    (75) empty -> .

    COMMA           shift and go to state 114
    PARDER          reduce using rule 75 (empty -> .)

    PARM_PP                        shift and go to state 118
    empty                          shift and go to state 115

state 92

    (69) FACTOR -> PARIZQ . fondo_falso_add EXPRESION PARDER fondo_falso_pop
    (85) fondo_falso_add -> .

    PARIZQ          reduce using rule 85 (fondo_falso_add -> .)
    ID              reduce using rule 85 (fondo_falso_add -> .)
    CTE_INT         reduce using rule 85 (fondo_falso_add -> .)
    CTE_FLT         reduce using rule 85 (fondo_falso_add -> .)
    CTE_CHAR        reduce using rule 85 (fondo_falso_add -> .)

    fondo_falso_add                shift and go to state 119

state 93

    (32) CONDICION -> IF PARIZQ EXPRESION . PARDER LLVEIZQ ESTATUTO_P LLVEDER CONDICION_P

    PARDER          shift and go to state 120


state 94

    (49) EXPRESION -> EXPRE . cuad_or OR pila_operadores_add EXPRESION
    (50) EXPRESION -> EXPRE . cuad_or
    (88) cuad_or -> .

    OR              reduce using rule 88 (cuad_or -> .)
    PARDER          reduce using rule 88 (cuad_or -> .)
    COMMA           reduce using rule 88 (cuad_or -> .)
    PTOCOMA         reduce using rule 88 (cuad_or -> .)

    cuad_or                        shift and go to state 121

state 95

    (51) EXPRE -> EXPR . cuad_and AND pila_operadores_add EXPRE
    (52) EXPRE -> EXPR . cuad_and
    (87) cuad_and -> .

    AND             reduce using rule 87 (cuad_and -> .)
    OR              reduce using rule 87 (cuad_and -> .)
    PARDER          reduce using rule 87 (cuad_and -> .)
    COMMA           reduce using rule 87 (cuad_and -> .)
    PTOCOMA         reduce using rule 87 (cuad_and -> .)

    cuad_and                       shift and go to state 122

state 96

    (53) EXPR -> EXP . cuad_comp EXPR_P
    (89) cuad_comp -> .

    LT              reduce using rule 89 (cuad_comp -> .)
    GT              reduce using rule 89 (cuad_comp -> .)
    DIFF            reduce using rule 89 (cuad_comp -> .)
    LTE             reduce using rule 89 (cuad_comp -> .)
    GTE             reduce using rule 89 (cuad_comp -> .)
    EQUAL           reduce using rule 89 (cuad_comp -> .)
    AND             reduce using rule 89 (cuad_comp -> .)
    OR              reduce using rule 89 (cuad_comp -> .)
    PARDER          reduce using rule 89 (cuad_comp -> .)
    COMMA           reduce using rule 89 (cuad_comp -> .)
    PTOCOMA         reduce using rule 89 (cuad_comp -> .)

    cuad_comp                      shift and go to state 123

state 97

    (61) EXP -> TERM . cuad_sumres EXP_P
    (90) cuad_sumres -> .

    MAS             reduce using rule 90 (cuad_sumres -> .)
    MENOS           reduce using rule 90 (cuad_sumres -> .)
    LT              reduce using rule 90 (cuad_sumres -> .)
    GT              reduce using rule 90 (cuad_sumres -> .)
    DIFF            reduce using rule 90 (cuad_sumres -> .)
    LTE             reduce using rule 90 (cuad_sumres -> .)
    GTE             reduce using rule 90 (cuad_sumres -> .)
    EQUAL           reduce using rule 90 (cuad_sumres -> .)
    AND             reduce using rule 90 (cuad_sumres -> .)
    OR              reduce using rule 90 (cuad_sumres -> .)
    PARDER          reduce using rule 90 (cuad_sumres -> .)
    COMMA           reduce using rule 90 (cuad_sumres -> .)
    PTOCOMA         reduce using rule 90 (cuad_sumres -> .)

    cuad_sumres                    shift and go to state 124

state 98

    (65) TERM -> FACTOR . cuad_muldiv TERM_P
    (91) cuad_muldiv -> .

    MULT            reduce using rule 91 (cuad_muldiv -> .)
    DIV             reduce using rule 91 (cuad_muldiv -> .)
    MAS             reduce using rule 91 (cuad_muldiv -> .)
    MENOS           reduce using rule 91 (cuad_muldiv -> .)
    LT              reduce using rule 91 (cuad_muldiv -> .)
    GT              reduce using rule 91 (cuad_muldiv -> .)
    DIFF            reduce using rule 91 (cuad_muldiv -> .)
    LTE             reduce using rule 91 (cuad_muldiv -> .)
    GTE             reduce using rule 91 (cuad_muldiv -> .)
    EQUAL           reduce using rule 91 (cuad_muldiv -> .)
    AND             reduce using rule 91 (cuad_muldiv -> .)
    OR              reduce using rule 91 (cuad_muldiv -> .)
    PARDER          reduce using rule 91 (cuad_muldiv -> .)
    COMMA           reduce using rule 91 (cuad_muldiv -> .)
    PTOCOMA         reduce using rule 91 (cuad_muldiv -> .)

    cuad_muldiv                    shift and go to state 125

state 99

    (70) FACTOR -> VAR_CTE .

    MULT            reduce using rule 70 (FACTOR -> VAR_CTE .)
    DIV             reduce using rule 70 (FACTOR -> VAR_CTE .)
    MAS             reduce using rule 70 (FACTOR -> VAR_CTE .)
    MENOS           reduce using rule 70 (FACTOR -> VAR_CTE .)
    LT              reduce using rule 70 (FACTOR -> VAR_CTE .)
    GT              reduce using rule 70 (FACTOR -> VAR_CTE .)
    DIFF            reduce using rule 70 (FACTOR -> VAR_CTE .)
    LTE             reduce using rule 70 (FACTOR -> VAR_CTE .)
    GTE             reduce using rule 70 (FACTOR -> VAR_CTE .)
    EQUAL           reduce using rule 70 (FACTOR -> VAR_CTE .)
    AND             reduce using rule 70 (FACTOR -> VAR_CTE .)
    OR              reduce using rule 70 (FACTOR -> VAR_CTE .)
    PARDER          reduce using rule 70 (FACTOR -> VAR_CTE .)
    COMMA           reduce using rule 70 (FACTOR -> VAR_CTE .)
    PTOCOMA         reduce using rule 70 (FACTOR -> VAR_CTE .)


state 100

    (71) VAR_CTE -> ID . pila_operando_id
    (80) pila_operando_id -> .

    MULT            reduce using rule 80 (pila_operando_id -> .)
    DIV             reduce using rule 80 (pila_operando_id -> .)
    MAS             reduce using rule 80 (pila_operando_id -> .)
    MENOS           reduce using rule 80 (pila_operando_id -> .)
    LT              reduce using rule 80 (pila_operando_id -> .)
    GT              reduce using rule 80 (pila_operando_id -> .)
    DIFF            reduce using rule 80 (pila_operando_id -> .)
    LTE             reduce using rule 80 (pila_operando_id -> .)
    GTE             reduce using rule 80 (pila_operando_id -> .)
    EQUAL           reduce using rule 80 (pila_operando_id -> .)
    AND             reduce using rule 80 (pila_operando_id -> .)
    OR              reduce using rule 80 (pila_operando_id -> .)
    PARDER          reduce using rule 80 (pila_operando_id -> .)
    COMMA           reduce using rule 80 (pila_operando_id -> .)
    PTOCOMA         reduce using rule 80 (pila_operando_id -> .)

    pila_operando_id               shift and go to state 126

state 101

    (72) VAR_CTE -> CTE_INT . pila_operando_int
    (81) pila_operando_int -> .

    MULT            reduce using rule 81 (pila_operando_int -> .)
    DIV             reduce using rule 81 (pila_operando_int -> .)
    MAS             reduce using rule 81 (pila_operando_int -> .)
    MENOS           reduce using rule 81 (pila_operando_int -> .)
    LT              reduce using rule 81 (pila_operando_int -> .)
    GT              reduce using rule 81 (pila_operando_int -> .)
    DIFF            reduce using rule 81 (pila_operando_int -> .)
    LTE             reduce using rule 81 (pila_operando_int -> .)
    GTE             reduce using rule 81 (pila_operando_int -> .)
    EQUAL           reduce using rule 81 (pila_operando_int -> .)
    AND             reduce using rule 81 (pila_operando_int -> .)
    OR              reduce using rule 81 (pila_operando_int -> .)
    PARDER          reduce using rule 81 (pila_operando_int -> .)
    COMMA           reduce using rule 81 (pila_operando_int -> .)
    PTOCOMA         reduce using rule 81 (pila_operando_int -> .)

    pila_operando_int              shift and go to state 127

state 102

    (73) VAR_CTE -> CTE_FLT . pila_operando_float
    (82) pila_operando_float -> .

    MULT            reduce using rule 82 (pila_operando_float -> .)
    DIV             reduce using rule 82 (pila_operando_float -> .)
    MAS             reduce using rule 82 (pila_operando_float -> .)
    MENOS           reduce using rule 82 (pila_operando_float -> .)
    LT              reduce using rule 82 (pila_operando_float -> .)
    GT              reduce using rule 82 (pila_operando_float -> .)
    DIFF            reduce using rule 82 (pila_operando_float -> .)
    LTE             reduce using rule 82 (pila_operando_float -> .)
    GTE             reduce using rule 82 (pila_operando_float -> .)
    EQUAL           reduce using rule 82 (pila_operando_float -> .)
    AND             reduce using rule 82 (pila_operando_float -> .)
    OR              reduce using rule 82 (pila_operando_float -> .)
    PARDER          reduce using rule 82 (pila_operando_float -> .)
    COMMA           reduce using rule 82 (pila_operando_float -> .)
    PTOCOMA         reduce using rule 82 (pila_operando_float -> .)

    pila_operando_float            shift and go to state 128

state 103

    (74) VAR_CTE -> CTE_CHAR . pila_operando_char
    (83) pila_operando_char -> .

    MULT            reduce using rule 83 (pila_operando_char -> .)
    DIV             reduce using rule 83 (pila_operando_char -> .)
    MAS             reduce using rule 83 (pila_operando_char -> .)
    MENOS           reduce using rule 83 (pila_operando_char -> .)
    LT              reduce using rule 83 (pila_operando_char -> .)
    GT              reduce using rule 83 (pila_operando_char -> .)
    DIFF            reduce using rule 83 (pila_operando_char -> .)
    LTE             reduce using rule 83 (pila_operando_char -> .)
    GTE             reduce using rule 83 (pila_operando_char -> .)
    EQUAL           reduce using rule 83 (pila_operando_char -> .)
    AND             reduce using rule 83 (pila_operando_char -> .)
    OR              reduce using rule 83 (pila_operando_char -> .)
    PARDER          reduce using rule 83 (pila_operando_char -> .)
    COMMA           reduce using rule 83 (pila_operando_char -> .)
    PTOCOMA         reduce using rule 83 (pila_operando_char -> .)

    pila_operando_char             shift and go to state 129

state 104

    (35) LOOP_FOR -> FOR PARIZQ CTE_INT . COMMA CTE_INT COMMA CTE_INT PARDER LLVEIZQ ESTATUTO_P LLVEDER

    COMMA           shift and go to state 130


state 105

    (36) ESCRITURA -> PRINT PARIZQ PRINTABLE . PRINTABLE_P PARDER
    (39) PRINTABLE_P -> . COMMA PRINTABLE PRINTABLE_P
    (40) PRINTABLE_P -> . empty
    (75) empty -> .

    COMMA           shift and go to state 132
    PARDER          reduce using rule 75 (empty -> .)

    PRINTABLE_P                    shift and go to state 131
    empty                          shift and go to state 133

state 106

    (37) PRINTABLE -> EXPRESION .

    COMMA           reduce using rule 37 (PRINTABLE -> EXPRESION .)
    PARDER          reduce using rule 37 (PRINTABLE -> EXPRESION .)


state 107

    (38) PRINTABLE -> CTE_STR .

    COMMA           reduce using rule 38 (PRINTABLE -> CTE_STR .)
    PARDER          reduce using rule 38 (PRINTABLE -> CTE_STR .)


state 108

    (10) FUNCS -> FUNC TYPE_P ID ADD_FUNC PARIZQ PARAMS PARDER LLVEIZQ ESTATUTO_P . RETURN EXPRESION cuad_return PTOCOMA LLVEDER

    RETURN          shift and go to state 134


state 109

    (19) PARAMS -> TYPE ID ADD_VAR PARAMS_P .

    PARDER          reduce using rule 19 (PARAMS -> TYPE ID ADD_VAR PARAMS_P .)


state 110

    (21) PARAMS_P -> COMMA . TYPE ID ADD_VAR PARAMS_P
    (13) TYPE -> . INT CURR_TYPE
    (14) TYPE -> . FLOAT CURR_TYPE
    (15) TYPE -> . BOOL CURR_TYPE
    (16) TYPE -> . CHAR CURR_TYPE

    INT             shift and go to state 17
    FLOAT           shift and go to state 18
    BOOL            shift and go to state 19
    CHAR            shift and go to state 20

    TYPE                           shift and go to state 135

state 111

    (22) PARAMS_P -> empty .

    PARDER          reduce using rule 22 (PARAMS_P -> empty .)


state 112

    (31) ASIGNACION -> ID pila_operando_id ASIGN pila_operadores_add . EXPRESION cuad_asign PTOCOMA
    (49) EXPRESION -> . EXPRE cuad_or OR pila_operadores_add EXPRESION
    (50) EXPRESION -> . EXPRE cuad_or
    (51) EXPRE -> . EXPR cuad_and AND pila_operadores_add EXPRE
    (52) EXPRE -> . EXPR cuad_and
    (53) EXPR -> . EXP cuad_comp EXPR_P
    (61) EXP -> . TERM cuad_sumres EXP_P
    (65) TERM -> . FACTOR cuad_muldiv TERM_P
    (69) FACTOR -> . PARIZQ fondo_falso_add EXPRESION PARDER fondo_falso_pop
    (70) FACTOR -> . VAR_CTE
    (71) VAR_CTE -> . ID pila_operando_id
    (72) VAR_CTE -> . CTE_INT pila_operando_int
    (73) VAR_CTE -> . CTE_FLT pila_operando_float
    (74) VAR_CTE -> . CTE_CHAR pila_operando_char

    PARIZQ          shift and go to state 92
    ID              shift and go to state 100
    CTE_INT         shift and go to state 101
    CTE_FLT         shift and go to state 102
    CTE_CHAR        shift and go to state 103

    EXPRESION                      shift and go to state 136
    EXPRE                          shift and go to state 94
    EXPR                           shift and go to state 95
    EXP                            shift and go to state 96
    TERM                           shift and go to state 97
    FACTOR                         shift and go to state 98
    VAR_CTE                        shift and go to state 99

state 113

    (46) PARM_P -> ID PARM_PP .

    PARDER          reduce using rule 46 (PARM_P -> ID PARM_PP .)


state 114

    (47) PARM_PP -> COMMA . PARM_P
    (44) PARM_P -> . CTE_INT PARM_PP
    (45) PARM_P -> . CTE_FLT PARM_PP
    (46) PARM_P -> . ID PARM_PP

    CTE_INT         shift and go to state 90
    CTE_FLT         shift and go to state 91
    ID              shift and go to state 86

    PARM_P                         shift and go to state 137

state 115

    (48) PARM_PP -> empty .

    PARDER          reduce using rule 48 (PARM_PP -> empty .)


state 116

    (41) FUNC_CALL -> ID PARIZQ PARM PARDER .

    ID              reduce using rule 41 (FUNC_CALL -> ID PARIZQ PARM PARDER .)
    IF              reduce using rule 41 (FUNC_CALL -> ID PARIZQ PARM PARDER .)
    FOR             reduce using rule 41 (FUNC_CALL -> ID PARIZQ PARM PARDER .)
    PRINT           reduce using rule 41 (FUNC_CALL -> ID PARIZQ PARM PARDER .)
    LLVEDER         reduce using rule 41 (FUNC_CALL -> ID PARIZQ PARM PARDER .)
    RETURN          reduce using rule 41 (FUNC_CALL -> ID PARIZQ PARM PARDER .)


state 117

    (44) PARM_P -> CTE_INT PARM_PP .

    PARDER          reduce using rule 44 (PARM_P -> CTE_INT PARM_PP .)


state 118

    (45) PARM_P -> CTE_FLT PARM_PP .

    PARDER          reduce using rule 45 (PARM_P -> CTE_FLT PARM_PP .)


state 119

    (69) FACTOR -> PARIZQ fondo_falso_add . EXPRESION PARDER fondo_falso_pop
    (49) EXPRESION -> . EXPRE cuad_or OR pila_operadores_add EXPRESION
    (50) EXPRESION -> . EXPRE cuad_or
    (51) EXPRE -> . EXPR cuad_and AND pila_operadores_add EXPRE
    (52) EXPRE -> . EXPR cuad_and
    (53) EXPR -> . EXP cuad_comp EXPR_P
    (61) EXP -> . TERM cuad_sumres EXP_P
    (65) TERM -> . FACTOR cuad_muldiv TERM_P
    (69) FACTOR -> . PARIZQ fondo_falso_add EXPRESION PARDER fondo_falso_pop
    (70) FACTOR -> . VAR_CTE
    (71) VAR_CTE -> . ID pila_operando_id
    (72) VAR_CTE -> . CTE_INT pila_operando_int
    (73) VAR_CTE -> . CTE_FLT pila_operando_float
    (74) VAR_CTE -> . CTE_CHAR pila_operando_char

    PARIZQ          shift and go to state 92
    ID              shift and go to state 100
    CTE_INT         shift and go to state 101
    CTE_FLT         shift and go to state 102
    CTE_CHAR        shift and go to state 103

    EXPRESION                      shift and go to state 138
    EXPRE                          shift and go to state 94
    EXPR                           shift and go to state 95
    EXP                            shift and go to state 96
    TERM                           shift and go to state 97
    FACTOR                         shift and go to state 98
    VAR_CTE                        shift and go to state 99

state 120

    (32) CONDICION -> IF PARIZQ EXPRESION PARDER . LLVEIZQ ESTATUTO_P LLVEDER CONDICION_P

    LLVEIZQ         shift and go to state 139


state 121

    (49) EXPRESION -> EXPRE cuad_or . OR pila_operadores_add EXPRESION
    (50) EXPRESION -> EXPRE cuad_or .

    OR              shift and go to state 140
    PARDER          reduce using rule 50 (EXPRESION -> EXPRE cuad_or .)
    COMMA           reduce using rule 50 (EXPRESION -> EXPRE cuad_or .)
    PTOCOMA         reduce using rule 50 (EXPRESION -> EXPRE cuad_or .)


state 122

    (51) EXPRE -> EXPR cuad_and . AND pila_operadores_add EXPRE
    (52) EXPRE -> EXPR cuad_and .

    AND             shift and go to state 141
    OR              reduce using rule 52 (EXPRE -> EXPR cuad_and .)
    PARDER          reduce using rule 52 (EXPRE -> EXPR cuad_and .)
    COMMA           reduce using rule 52 (EXPRE -> EXPR cuad_and .)
    PTOCOMA         reduce using rule 52 (EXPRE -> EXPR cuad_and .)


state 123

    (53) EXPR -> EXP cuad_comp . EXPR_P
    (54) EXPR_P -> . LT pila_operadores_add EXPR
    (55) EXPR_P -> . GT pila_operadores_add EXPR
    (56) EXPR_P -> . DIFF pila_operadores_add EXPR
    (57) EXPR_P -> . LTE pila_operadores_add EXPR
    (58) EXPR_P -> . GTE pila_operadores_add EXPR
    (59) EXPR_P -> . EQUAL pila_operadores_add EXPR
    (60) EXPR_P -> . empty
    (75) empty -> .

    LT              shift and go to state 143
    GT              shift and go to state 144
    DIFF            shift and go to state 145
    LTE             shift and go to state 146
    GTE             shift and go to state 147
    EQUAL           shift and go to state 148
    AND             reduce using rule 75 (empty -> .)
    OR              reduce using rule 75 (empty -> .)
    PARDER          reduce using rule 75 (empty -> .)
    COMMA           reduce using rule 75 (empty -> .)
    PTOCOMA         reduce using rule 75 (empty -> .)

    EXPR_P                         shift and go to state 142
    empty                          shift and go to state 149

state 124

    (61) EXP -> TERM cuad_sumres . EXP_P
    (62) EXP_P -> . MAS pila_operadores_add EXP
    (63) EXP_P -> . MENOS pila_operadores_add EXP
    (64) EXP_P -> . empty
    (75) empty -> .

    MAS             shift and go to state 151
    MENOS           shift and go to state 152
    LT              reduce using rule 75 (empty -> .)
    GT              reduce using rule 75 (empty -> .)
    DIFF            reduce using rule 75 (empty -> .)
    LTE             reduce using rule 75 (empty -> .)
    GTE             reduce using rule 75 (empty -> .)
    EQUAL           reduce using rule 75 (empty -> .)
    AND             reduce using rule 75 (empty -> .)
    OR              reduce using rule 75 (empty -> .)
    PARDER          reduce using rule 75 (empty -> .)
    COMMA           reduce using rule 75 (empty -> .)
    PTOCOMA         reduce using rule 75 (empty -> .)

    EXP_P                          shift and go to state 150
    empty                          shift and go to state 153

state 125

    (65) TERM -> FACTOR cuad_muldiv . TERM_P
    (66) TERM_P -> . MULT pila_operadores_add TERM
    (67) TERM_P -> . DIV pila_operadores_add TERM
    (68) TERM_P -> . empty
    (75) empty -> .

    MULT            shift and go to state 155
    DIV             shift and go to state 156
    MAS             reduce using rule 75 (empty -> .)
    MENOS           reduce using rule 75 (empty -> .)
    LT              reduce using rule 75 (empty -> .)
    GT              reduce using rule 75 (empty -> .)
    DIFF            reduce using rule 75 (empty -> .)
    LTE             reduce using rule 75 (empty -> .)
    GTE             reduce using rule 75 (empty -> .)
    EQUAL           reduce using rule 75 (empty -> .)
    AND             reduce using rule 75 (empty -> .)
    OR              reduce using rule 75 (empty -> .)
    PARDER          reduce using rule 75 (empty -> .)
    COMMA           reduce using rule 75 (empty -> .)
    PTOCOMA         reduce using rule 75 (empty -> .)

    TERM_P                         shift and go to state 154
    empty                          shift and go to state 157

state 126

    (71) VAR_CTE -> ID pila_operando_id .

    MULT            reduce using rule 71 (VAR_CTE -> ID pila_operando_id .)
    DIV             reduce using rule 71 (VAR_CTE -> ID pila_operando_id .)
    MAS             reduce using rule 71 (VAR_CTE -> ID pila_operando_id .)
    MENOS           reduce using rule 71 (VAR_CTE -> ID pila_operando_id .)
    LT              reduce using rule 71 (VAR_CTE -> ID pila_operando_id .)
    GT              reduce using rule 71 (VAR_CTE -> ID pila_operando_id .)
    DIFF            reduce using rule 71 (VAR_CTE -> ID pila_operando_id .)
    LTE             reduce using rule 71 (VAR_CTE -> ID pila_operando_id .)
    GTE             reduce using rule 71 (VAR_CTE -> ID pila_operando_id .)
    EQUAL           reduce using rule 71 (VAR_CTE -> ID pila_operando_id .)
    AND             reduce using rule 71 (VAR_CTE -> ID pila_operando_id .)
    OR              reduce using rule 71 (VAR_CTE -> ID pila_operando_id .)
    PARDER          reduce using rule 71 (VAR_CTE -> ID pila_operando_id .)
    COMMA           reduce using rule 71 (VAR_CTE -> ID pila_operando_id .)
    PTOCOMA         reduce using rule 71 (VAR_CTE -> ID pila_operando_id .)


state 127

    (72) VAR_CTE -> CTE_INT pila_operando_int .

    MULT            reduce using rule 72 (VAR_CTE -> CTE_INT pila_operando_int .)
    DIV             reduce using rule 72 (VAR_CTE -> CTE_INT pila_operando_int .)
    MAS             reduce using rule 72 (VAR_CTE -> CTE_INT pila_operando_int .)
    MENOS           reduce using rule 72 (VAR_CTE -> CTE_INT pila_operando_int .)
    LT              reduce using rule 72 (VAR_CTE -> CTE_INT pila_operando_int .)
    GT              reduce using rule 72 (VAR_CTE -> CTE_INT pila_operando_int .)
    DIFF            reduce using rule 72 (VAR_CTE -> CTE_INT pila_operando_int .)
    LTE             reduce using rule 72 (VAR_CTE -> CTE_INT pila_operando_int .)
    GTE             reduce using rule 72 (VAR_CTE -> CTE_INT pila_operando_int .)
    EQUAL           reduce using rule 72 (VAR_CTE -> CTE_INT pila_operando_int .)
    AND             reduce using rule 72 (VAR_CTE -> CTE_INT pila_operando_int .)
    OR              reduce using rule 72 (VAR_CTE -> CTE_INT pila_operando_int .)
    PARDER          reduce using rule 72 (VAR_CTE -> CTE_INT pila_operando_int .)
    COMMA           reduce using rule 72 (VAR_CTE -> CTE_INT pila_operando_int .)
    PTOCOMA         reduce using rule 72 (VAR_CTE -> CTE_INT pila_operando_int .)


state 128

    (73) VAR_CTE -> CTE_FLT pila_operando_float .

    MULT            reduce using rule 73 (VAR_CTE -> CTE_FLT pila_operando_float .)
    DIV             reduce using rule 73 (VAR_CTE -> CTE_FLT pila_operando_float .)
    MAS             reduce using rule 73 (VAR_CTE -> CTE_FLT pila_operando_float .)
    MENOS           reduce using rule 73 (VAR_CTE -> CTE_FLT pila_operando_float .)
    LT              reduce using rule 73 (VAR_CTE -> CTE_FLT pila_operando_float .)
    GT              reduce using rule 73 (VAR_CTE -> CTE_FLT pila_operando_float .)
    DIFF            reduce using rule 73 (VAR_CTE -> CTE_FLT pila_operando_float .)
    LTE             reduce using rule 73 (VAR_CTE -> CTE_FLT pila_operando_float .)
    GTE             reduce using rule 73 (VAR_CTE -> CTE_FLT pila_operando_float .)
    EQUAL           reduce using rule 73 (VAR_CTE -> CTE_FLT pila_operando_float .)
    AND             reduce using rule 73 (VAR_CTE -> CTE_FLT pila_operando_float .)
    OR              reduce using rule 73 (VAR_CTE -> CTE_FLT pila_operando_float .)
    PARDER          reduce using rule 73 (VAR_CTE -> CTE_FLT pila_operando_float .)
    COMMA           reduce using rule 73 (VAR_CTE -> CTE_FLT pila_operando_float .)
    PTOCOMA         reduce using rule 73 (VAR_CTE -> CTE_FLT pila_operando_float .)


state 129

    (74) VAR_CTE -> CTE_CHAR pila_operando_char .

    MULT            reduce using rule 74 (VAR_CTE -> CTE_CHAR pila_operando_char .)
    DIV             reduce using rule 74 (VAR_CTE -> CTE_CHAR pila_operando_char .)
    MAS             reduce using rule 74 (VAR_CTE -> CTE_CHAR pila_operando_char .)
    MENOS           reduce using rule 74 (VAR_CTE -> CTE_CHAR pila_operando_char .)
    LT              reduce using rule 74 (VAR_CTE -> CTE_CHAR pila_operando_char .)
    GT              reduce using rule 74 (VAR_CTE -> CTE_CHAR pila_operando_char .)
    DIFF            reduce using rule 74 (VAR_CTE -> CTE_CHAR pila_operando_char .)
    LTE             reduce using rule 74 (VAR_CTE -> CTE_CHAR pila_operando_char .)
    GTE             reduce using rule 74 (VAR_CTE -> CTE_CHAR pila_operando_char .)
    EQUAL           reduce using rule 74 (VAR_CTE -> CTE_CHAR pila_operando_char .)
    AND             reduce using rule 74 (VAR_CTE -> CTE_CHAR pila_operando_char .)
    OR              reduce using rule 74 (VAR_CTE -> CTE_CHAR pila_operando_char .)
    PARDER          reduce using rule 74 (VAR_CTE -> CTE_CHAR pila_operando_char .)
    COMMA           reduce using rule 74 (VAR_CTE -> CTE_CHAR pila_operando_char .)
    PTOCOMA         reduce using rule 74 (VAR_CTE -> CTE_CHAR pila_operando_char .)


state 130

    (35) LOOP_FOR -> FOR PARIZQ CTE_INT COMMA . CTE_INT COMMA CTE_INT PARDER LLVEIZQ ESTATUTO_P LLVEDER

    CTE_INT         shift and go to state 158


state 131

    (36) ESCRITURA -> PRINT PARIZQ PRINTABLE PRINTABLE_P . PARDER

    PARDER          shift and go to state 159


state 132

    (39) PRINTABLE_P -> COMMA . PRINTABLE PRINTABLE_P
    (37) PRINTABLE -> . EXPRESION
    (38) PRINTABLE -> . CTE_STR
    (49) EXPRESION -> . EXPRE cuad_or OR pila_operadores_add EXPRESION
    (50) EXPRESION -> . EXPRE cuad_or
    (51) EXPRE -> . EXPR cuad_and AND pila_operadores_add EXPRE
    (52) EXPRE -> . EXPR cuad_and
    (53) EXPR -> . EXP cuad_comp EXPR_P
    (61) EXP -> . TERM cuad_sumres EXP_P
    (65) TERM -> . FACTOR cuad_muldiv TERM_P
    (69) FACTOR -> . PARIZQ fondo_falso_add EXPRESION PARDER fondo_falso_pop
    (70) FACTOR -> . VAR_CTE
    (71) VAR_CTE -> . ID pila_operando_id
    (72) VAR_CTE -> . CTE_INT pila_operando_int
    (73) VAR_CTE -> . CTE_FLT pila_operando_float
    (74) VAR_CTE -> . CTE_CHAR pila_operando_char

    CTE_STR         shift and go to state 107
    PARIZQ          shift and go to state 92
    ID              shift and go to state 100
    CTE_INT         shift and go to state 101
    CTE_FLT         shift and go to state 102
    CTE_CHAR        shift and go to state 103

    PRINTABLE                      shift and go to state 160
    EXPRESION                      shift and go to state 106
    EXPRE                          shift and go to state 94
    EXPR                           shift and go to state 95
    EXP                            shift and go to state 96
    TERM                           shift and go to state 97
    FACTOR                         shift and go to state 98
    VAR_CTE                        shift and go to state 99

state 133

    (40) PRINTABLE_P -> empty .

    PARDER          reduce using rule 40 (PRINTABLE_P -> empty .)


state 134

    (10) FUNCS -> FUNC TYPE_P ID ADD_FUNC PARIZQ PARAMS PARDER LLVEIZQ ESTATUTO_P RETURN . EXPRESION cuad_return PTOCOMA LLVEDER
    (49) EXPRESION -> . EXPRE cuad_or OR pila_operadores_add EXPRESION
    (50) EXPRESION -> . EXPRE cuad_or
    (51) EXPRE -> . EXPR cuad_and AND pila_operadores_add EXPRE
    (52) EXPRE -> . EXPR cuad_and
    (53) EXPR -> . EXP cuad_comp EXPR_P
    (61) EXP -> . TERM cuad_sumres EXP_P
    (65) TERM -> . FACTOR cuad_muldiv TERM_P
    (69) FACTOR -> . PARIZQ fondo_falso_add EXPRESION PARDER fondo_falso_pop
    (70) FACTOR -> . VAR_CTE
    (71) VAR_CTE -> . ID pila_operando_id
    (72) VAR_CTE -> . CTE_INT pila_operando_int
    (73) VAR_CTE -> . CTE_FLT pila_operando_float
    (74) VAR_CTE -> . CTE_CHAR pila_operando_char

    PARIZQ          shift and go to state 92
    ID              shift and go to state 100
    CTE_INT         shift and go to state 101
    CTE_FLT         shift and go to state 102
    CTE_CHAR        shift and go to state 103

    EXPRESION                      shift and go to state 161
    EXPRE                          shift and go to state 94
    EXPR                           shift and go to state 95
    EXP                            shift and go to state 96
    TERM                           shift and go to state 97
    FACTOR                         shift and go to state 98
    VAR_CTE                        shift and go to state 99

state 135

    (21) PARAMS_P -> COMMA TYPE . ID ADD_VAR PARAMS_P

    ID              shift and go to state 162


state 136

    (31) ASIGNACION -> ID pila_operando_id ASIGN pila_operadores_add EXPRESION . cuad_asign PTOCOMA
    (92) cuad_asign -> .

    PTOCOMA         reduce using rule 92 (cuad_asign -> .)

    cuad_asign                     shift and go to state 163

state 137

    (47) PARM_PP -> COMMA PARM_P .

    PARDER          reduce using rule 47 (PARM_PP -> COMMA PARM_P .)


state 138

    (69) FACTOR -> PARIZQ fondo_falso_add EXPRESION . PARDER fondo_falso_pop

    PARDER          shift and go to state 164


state 139

    (32) CONDICION -> IF PARIZQ EXPRESION PARDER LLVEIZQ . ESTATUTO_P LLVEDER CONDICION_P
    (29) ESTATUTO_P -> . ESTATUTO ESTATUTO_P
    (30) ESTATUTO_P -> . empty
    (24) ESTATUTO -> . ASIGNACION
    (25) ESTATUTO -> . CONDICION
    (26) ESTATUTO -> . LOOP_FOR
    (27) ESTATUTO -> . ESCRITURA
    (28) ESTATUTO -> . FUNC_CALL
    (75) empty -> .
    (31) ASIGNACION -> . ID pila_operando_id ASIGN pila_operadores_add EXPRESION cuad_asign PTOCOMA
    (32) CONDICION -> . IF PARIZQ EXPRESION PARDER LLVEIZQ ESTATUTO_P LLVEDER CONDICION_P
    (35) LOOP_FOR -> . FOR PARIZQ CTE_INT COMMA CTE_INT COMMA CTE_INT PARDER LLVEIZQ ESTATUTO_P LLVEDER
    (36) ESCRITURA -> . PRINT PARIZQ PRINTABLE PRINTABLE_P PARDER
    (41) FUNC_CALL -> . ID PARIZQ PARM PARDER

    LLVEDER         reduce using rule 75 (empty -> .)
    ID              shift and go to state 66
    IF              shift and go to state 67
    FOR             shift and go to state 68
    PRINT           shift and go to state 69

    ESTATUTO_P                     shift and go to state 165
    ESTATUTO                       shift and go to state 59
    empty                          shift and go to state 60
    ASIGNACION                     shift and go to state 61
    CONDICION                      shift and go to state 62
    LOOP_FOR                       shift and go to state 63
    ESCRITURA                      shift and go to state 64
    FUNC_CALL                      shift and go to state 65

state 140

    (49) EXPRESION -> EXPRE cuad_or OR . pila_operadores_add EXPRESION
    (84) pila_operadores_add -> .

    PARIZQ          reduce using rule 84 (pila_operadores_add -> .)
    ID              reduce using rule 84 (pila_operadores_add -> .)
    CTE_INT         reduce using rule 84 (pila_operadores_add -> .)
    CTE_FLT         reduce using rule 84 (pila_operadores_add -> .)
    CTE_CHAR        reduce using rule 84 (pila_operadores_add -> .)

    pila_operadores_add            shift and go to state 166

state 141

    (51) EXPRE -> EXPR cuad_and AND . pila_operadores_add EXPRE
    (84) pila_operadores_add -> .

    PARIZQ          reduce using rule 84 (pila_operadores_add -> .)
    ID              reduce using rule 84 (pila_operadores_add -> .)
    CTE_INT         reduce using rule 84 (pila_operadores_add -> .)
    CTE_FLT         reduce using rule 84 (pila_operadores_add -> .)
    CTE_CHAR        reduce using rule 84 (pila_operadores_add -> .)

    pila_operadores_add            shift and go to state 167

state 142

    (53) EXPR -> EXP cuad_comp EXPR_P .

    AND             reduce using rule 53 (EXPR -> EXP cuad_comp EXPR_P .)
    OR              reduce using rule 53 (EXPR -> EXP cuad_comp EXPR_P .)
    PARDER          reduce using rule 53 (EXPR -> EXP cuad_comp EXPR_P .)
    COMMA           reduce using rule 53 (EXPR -> EXP cuad_comp EXPR_P .)
    PTOCOMA         reduce using rule 53 (EXPR -> EXP cuad_comp EXPR_P .)


state 143

    (54) EXPR_P -> LT . pila_operadores_add EXPR
    (84) pila_operadores_add -> .

    PARIZQ          reduce using rule 84 (pila_operadores_add -> .)
    ID              reduce using rule 84 (pila_operadores_add -> .)
    CTE_INT         reduce using rule 84 (pila_operadores_add -> .)
    CTE_FLT         reduce using rule 84 (pila_operadores_add -> .)
    CTE_CHAR        reduce using rule 84 (pila_operadores_add -> .)

    pila_operadores_add            shift and go to state 168

state 144

    (55) EXPR_P -> GT . pila_operadores_add EXPR
    (84) pila_operadores_add -> .

    PARIZQ          reduce using rule 84 (pila_operadores_add -> .)
    ID              reduce using rule 84 (pila_operadores_add -> .)
    CTE_INT         reduce using rule 84 (pila_operadores_add -> .)
    CTE_FLT         reduce using rule 84 (pila_operadores_add -> .)
    CTE_CHAR        reduce using rule 84 (pila_operadores_add -> .)

    pila_operadores_add            shift and go to state 169

state 145

    (56) EXPR_P -> DIFF . pila_operadores_add EXPR
    (84) pila_operadores_add -> .

    PARIZQ          reduce using rule 84 (pila_operadores_add -> .)
    ID              reduce using rule 84 (pila_operadores_add -> .)
    CTE_INT         reduce using rule 84 (pila_operadores_add -> .)
    CTE_FLT         reduce using rule 84 (pila_operadores_add -> .)
    CTE_CHAR        reduce using rule 84 (pila_operadores_add -> .)

    pila_operadores_add            shift and go to state 170

state 146

    (57) EXPR_P -> LTE . pila_operadores_add EXPR
    (84) pila_operadores_add -> .

    PARIZQ          reduce using rule 84 (pila_operadores_add -> .)
    ID              reduce using rule 84 (pila_operadores_add -> .)
    CTE_INT         reduce using rule 84 (pila_operadores_add -> .)
    CTE_FLT         reduce using rule 84 (pila_operadores_add -> .)
    CTE_CHAR        reduce using rule 84 (pila_operadores_add -> .)

    pila_operadores_add            shift and go to state 171

state 147

    (58) EXPR_P -> GTE . pila_operadores_add EXPR
    (84) pila_operadores_add -> .

    PARIZQ          reduce using rule 84 (pila_operadores_add -> .)
    ID              reduce using rule 84 (pila_operadores_add -> .)
    CTE_INT         reduce using rule 84 (pila_operadores_add -> .)
    CTE_FLT         reduce using rule 84 (pila_operadores_add -> .)
    CTE_CHAR        reduce using rule 84 (pila_operadores_add -> .)

    pila_operadores_add            shift and go to state 172

state 148

    (59) EXPR_P -> EQUAL . pila_operadores_add EXPR
    (84) pila_operadores_add -> .

    PARIZQ          reduce using rule 84 (pila_operadores_add -> .)
    ID              reduce using rule 84 (pila_operadores_add -> .)
    CTE_INT         reduce using rule 84 (pila_operadores_add -> .)
    CTE_FLT         reduce using rule 84 (pila_operadores_add -> .)
    CTE_CHAR        reduce using rule 84 (pila_operadores_add -> .)

    pila_operadores_add            shift and go to state 173

state 149

    (60) EXPR_P -> empty .

    AND             reduce using rule 60 (EXPR_P -> empty .)
    OR              reduce using rule 60 (EXPR_P -> empty .)
    PARDER          reduce using rule 60 (EXPR_P -> empty .)
    COMMA           reduce using rule 60 (EXPR_P -> empty .)
    PTOCOMA         reduce using rule 60 (EXPR_P -> empty .)


state 150

    (61) EXP -> TERM cuad_sumres EXP_P .

    LT              reduce using rule 61 (EXP -> TERM cuad_sumres EXP_P .)
    GT              reduce using rule 61 (EXP -> TERM cuad_sumres EXP_P .)
    DIFF            reduce using rule 61 (EXP -> TERM cuad_sumres EXP_P .)
    LTE             reduce using rule 61 (EXP -> TERM cuad_sumres EXP_P .)
    GTE             reduce using rule 61 (EXP -> TERM cuad_sumres EXP_P .)
    EQUAL           reduce using rule 61 (EXP -> TERM cuad_sumres EXP_P .)
    AND             reduce using rule 61 (EXP -> TERM cuad_sumres EXP_P .)
    OR              reduce using rule 61 (EXP -> TERM cuad_sumres EXP_P .)
    PARDER          reduce using rule 61 (EXP -> TERM cuad_sumres EXP_P .)
    COMMA           reduce using rule 61 (EXP -> TERM cuad_sumres EXP_P .)
    PTOCOMA         reduce using rule 61 (EXP -> TERM cuad_sumres EXP_P .)


state 151

    (62) EXP_P -> MAS . pila_operadores_add EXP
    (84) pila_operadores_add -> .

    PARIZQ          reduce using rule 84 (pila_operadores_add -> .)
    ID              reduce using rule 84 (pila_operadores_add -> .)
    CTE_INT         reduce using rule 84 (pila_operadores_add -> .)
    CTE_FLT         reduce using rule 84 (pila_operadores_add -> .)
    CTE_CHAR        reduce using rule 84 (pila_operadores_add -> .)

    pila_operadores_add            shift and go to state 174

state 152

    (63) EXP_P -> MENOS . pila_operadores_add EXP
    (84) pila_operadores_add -> .

    PARIZQ          reduce using rule 84 (pila_operadores_add -> .)
    ID              reduce using rule 84 (pila_operadores_add -> .)
    CTE_INT         reduce using rule 84 (pila_operadores_add -> .)
    CTE_FLT         reduce using rule 84 (pila_operadores_add -> .)
    CTE_CHAR        reduce using rule 84 (pila_operadores_add -> .)

    pila_operadores_add            shift and go to state 175

state 153

    (64) EXP_P -> empty .

    LT              reduce using rule 64 (EXP_P -> empty .)
    GT              reduce using rule 64 (EXP_P -> empty .)
    DIFF            reduce using rule 64 (EXP_P -> empty .)
    LTE             reduce using rule 64 (EXP_P -> empty .)
    GTE             reduce using rule 64 (EXP_P -> empty .)
    EQUAL           reduce using rule 64 (EXP_P -> empty .)
    AND             reduce using rule 64 (EXP_P -> empty .)
    OR              reduce using rule 64 (EXP_P -> empty .)
    PARDER          reduce using rule 64 (EXP_P -> empty .)
    COMMA           reduce using rule 64 (EXP_P -> empty .)
    PTOCOMA         reduce using rule 64 (EXP_P -> empty .)


state 154

    (65) TERM -> FACTOR cuad_muldiv TERM_P .

    MAS             reduce using rule 65 (TERM -> FACTOR cuad_muldiv TERM_P .)
    MENOS           reduce using rule 65 (TERM -> FACTOR cuad_muldiv TERM_P .)
    LT              reduce using rule 65 (TERM -> FACTOR cuad_muldiv TERM_P .)
    GT              reduce using rule 65 (TERM -> FACTOR cuad_muldiv TERM_P .)
    DIFF            reduce using rule 65 (TERM -> FACTOR cuad_muldiv TERM_P .)
    LTE             reduce using rule 65 (TERM -> FACTOR cuad_muldiv TERM_P .)
    GTE             reduce using rule 65 (TERM -> FACTOR cuad_muldiv TERM_P .)
    EQUAL           reduce using rule 65 (TERM -> FACTOR cuad_muldiv TERM_P .)
    AND             reduce using rule 65 (TERM -> FACTOR cuad_muldiv TERM_P .)
    OR              reduce using rule 65 (TERM -> FACTOR cuad_muldiv TERM_P .)
    PARDER          reduce using rule 65 (TERM -> FACTOR cuad_muldiv TERM_P .)
    COMMA           reduce using rule 65 (TERM -> FACTOR cuad_muldiv TERM_P .)
    PTOCOMA         reduce using rule 65 (TERM -> FACTOR cuad_muldiv TERM_P .)


state 155

    (66) TERM_P -> MULT . pila_operadores_add TERM
    (84) pila_operadores_add -> .

    PARIZQ          reduce using rule 84 (pila_operadores_add -> .)
    ID              reduce using rule 84 (pila_operadores_add -> .)
    CTE_INT         reduce using rule 84 (pila_operadores_add -> .)
    CTE_FLT         reduce using rule 84 (pila_operadores_add -> .)
    CTE_CHAR        reduce using rule 84 (pila_operadores_add -> .)

    pila_operadores_add            shift and go to state 176

state 156

    (67) TERM_P -> DIV . pila_operadores_add TERM
    (84) pila_operadores_add -> .

    PARIZQ          reduce using rule 84 (pila_operadores_add -> .)
    ID              reduce using rule 84 (pila_operadores_add -> .)
    CTE_INT         reduce using rule 84 (pila_operadores_add -> .)
    CTE_FLT         reduce using rule 84 (pila_operadores_add -> .)
    CTE_CHAR        reduce using rule 84 (pila_operadores_add -> .)

    pila_operadores_add            shift and go to state 177

state 157

    (68) TERM_P -> empty .

    MAS             reduce using rule 68 (TERM_P -> empty .)
    MENOS           reduce using rule 68 (TERM_P -> empty .)
    LT              reduce using rule 68 (TERM_P -> empty .)
    GT              reduce using rule 68 (TERM_P -> empty .)
    DIFF            reduce using rule 68 (TERM_P -> empty .)
    LTE             reduce using rule 68 (TERM_P -> empty .)
    GTE             reduce using rule 68 (TERM_P -> empty .)
    EQUAL           reduce using rule 68 (TERM_P -> empty .)
    AND             reduce using rule 68 (TERM_P -> empty .)
    OR              reduce using rule 68 (TERM_P -> empty .)
    PARDER          reduce using rule 68 (TERM_P -> empty .)
    COMMA           reduce using rule 68 (TERM_P -> empty .)
    PTOCOMA         reduce using rule 68 (TERM_P -> empty .)


state 158

    (35) LOOP_FOR -> FOR PARIZQ CTE_INT COMMA CTE_INT . COMMA CTE_INT PARDER LLVEIZQ ESTATUTO_P LLVEDER

    COMMA           shift and go to state 178


state 159

    (36) ESCRITURA -> PRINT PARIZQ PRINTABLE PRINTABLE_P PARDER .

    ID              reduce using rule 36 (ESCRITURA -> PRINT PARIZQ PRINTABLE PRINTABLE_P PARDER .)
    IF              reduce using rule 36 (ESCRITURA -> PRINT PARIZQ PRINTABLE PRINTABLE_P PARDER .)
    FOR             reduce using rule 36 (ESCRITURA -> PRINT PARIZQ PRINTABLE PRINTABLE_P PARDER .)
    PRINT           reduce using rule 36 (ESCRITURA -> PRINT PARIZQ PRINTABLE PRINTABLE_P PARDER .)
    LLVEDER         reduce using rule 36 (ESCRITURA -> PRINT PARIZQ PRINTABLE PRINTABLE_P PARDER .)
    RETURN          reduce using rule 36 (ESCRITURA -> PRINT PARIZQ PRINTABLE PRINTABLE_P PARDER .)


state 160

    (39) PRINTABLE_P -> COMMA PRINTABLE . PRINTABLE_P
    (39) PRINTABLE_P -> . COMMA PRINTABLE PRINTABLE_P
    (40) PRINTABLE_P -> . empty
    (75) empty -> .

    COMMA           shift and go to state 132
    PARDER          reduce using rule 75 (empty -> .)

    PRINTABLE_P                    shift and go to state 179
    empty                          shift and go to state 133

state 161

    (10) FUNCS -> FUNC TYPE_P ID ADD_FUNC PARIZQ PARAMS PARDER LLVEIZQ ESTATUTO_P RETURN EXPRESION . cuad_return PTOCOMA LLVEDER
    (93) cuad_return -> .

    PTOCOMA         reduce using rule 93 (cuad_return -> .)

    cuad_return                    shift and go to state 180

state 162

    (21) PARAMS_P -> COMMA TYPE ID . ADD_VAR PARAMS_P
    (78) ADD_VAR -> .

    COMMA           reduce using rule 78 (ADD_VAR -> .)
    PARDER          reduce using rule 78 (ADD_VAR -> .)

    ADD_VAR                        shift and go to state 181

state 163

    (31) ASIGNACION -> ID pila_operando_id ASIGN pila_operadores_add EXPRESION cuad_asign . PTOCOMA

    PTOCOMA         shift and go to state 182


state 164

    (69) FACTOR -> PARIZQ fondo_falso_add EXPRESION PARDER . fondo_falso_pop
    (86) fondo_falso_pop -> .

    MULT            reduce using rule 86 (fondo_falso_pop -> .)
    DIV             reduce using rule 86 (fondo_falso_pop -> .)
    MAS             reduce using rule 86 (fondo_falso_pop -> .)
    MENOS           reduce using rule 86 (fondo_falso_pop -> .)
    LT              reduce using rule 86 (fondo_falso_pop -> .)
    GT              reduce using rule 86 (fondo_falso_pop -> .)
    DIFF            reduce using rule 86 (fondo_falso_pop -> .)
    LTE             reduce using rule 86 (fondo_falso_pop -> .)
    GTE             reduce using rule 86 (fondo_falso_pop -> .)
    EQUAL           reduce using rule 86 (fondo_falso_pop -> .)
    AND             reduce using rule 86 (fondo_falso_pop -> .)
    OR              reduce using rule 86 (fondo_falso_pop -> .)
    PARDER          reduce using rule 86 (fondo_falso_pop -> .)
    COMMA           reduce using rule 86 (fondo_falso_pop -> .)
    PTOCOMA         reduce using rule 86 (fondo_falso_pop -> .)

    fondo_falso_pop                shift and go to state 183

state 165

    (32) CONDICION -> IF PARIZQ EXPRESION PARDER LLVEIZQ ESTATUTO_P . LLVEDER CONDICION_P

    LLVEDER         shift and go to state 184


state 166

    (49) EXPRESION -> EXPRE cuad_or OR pila_operadores_add . EXPRESION
    (49) EXPRESION -> . EXPRE cuad_or OR pila_operadores_add EXPRESION
    (50) EXPRESION -> . EXPRE cuad_or
    (51) EXPRE -> . EXPR cuad_and AND pila_operadores_add EXPRE
    (52) EXPRE -> . EXPR cuad_and
    (53) EXPR -> . EXP cuad_comp EXPR_P
    (61) EXP -> . TERM cuad_sumres EXP_P
    (65) TERM -> . FACTOR cuad_muldiv TERM_P
    (69) FACTOR -> . PARIZQ fondo_falso_add EXPRESION PARDER fondo_falso_pop
    (70) FACTOR -> . VAR_CTE
    (71) VAR_CTE -> . ID pila_operando_id
    (72) VAR_CTE -> . CTE_INT pila_operando_int
    (73) VAR_CTE -> . CTE_FLT pila_operando_float
    (74) VAR_CTE -> . CTE_CHAR pila_operando_char

    PARIZQ          shift and go to state 92
    ID              shift and go to state 100
    CTE_INT         shift and go to state 101
    CTE_FLT         shift and go to state 102
    CTE_CHAR        shift and go to state 103

    EXPRE                          shift and go to state 94
    EXPRESION                      shift and go to state 185
    EXPR                           shift and go to state 95
    EXP                            shift and go to state 96
    TERM                           shift and go to state 97
    FACTOR                         shift and go to state 98
    VAR_CTE                        shift and go to state 99

state 167

    (51) EXPRE -> EXPR cuad_and AND pila_operadores_add . EXPRE
    (51) EXPRE -> . EXPR cuad_and AND pila_operadores_add EXPRE
    (52) EXPRE -> . EXPR cuad_and
    (53) EXPR -> . EXP cuad_comp EXPR_P
    (61) EXP -> . TERM cuad_sumres EXP_P
    (65) TERM -> . FACTOR cuad_muldiv TERM_P
    (69) FACTOR -> . PARIZQ fondo_falso_add EXPRESION PARDER fondo_falso_pop
    (70) FACTOR -> . VAR_CTE
    (71) VAR_CTE -> . ID pila_operando_id
    (72) VAR_CTE -> . CTE_INT pila_operando_int
    (73) VAR_CTE -> . CTE_FLT pila_operando_float
    (74) VAR_CTE -> . CTE_CHAR pila_operando_char

    PARIZQ          shift and go to state 92
    ID              shift and go to state 100
    CTE_INT         shift and go to state 101
    CTE_FLT         shift and go to state 102
    CTE_CHAR        shift and go to state 103

    EXPR                           shift and go to state 95
    EXPRE                          shift and go to state 186
    EXP                            shift and go to state 96
    TERM                           shift and go to state 97
    FACTOR                         shift and go to state 98
    VAR_CTE                        shift and go to state 99

state 168

    (54) EXPR_P -> LT pila_operadores_add . EXPR
    (53) EXPR -> . EXP cuad_comp EXPR_P
    (61) EXP -> . TERM cuad_sumres EXP_P
    (65) TERM -> . FACTOR cuad_muldiv TERM_P
    (69) FACTOR -> . PARIZQ fondo_falso_add EXPRESION PARDER fondo_falso_pop
    (70) FACTOR -> . VAR_CTE
    (71) VAR_CTE -> . ID pila_operando_id
    (72) VAR_CTE -> . CTE_INT pila_operando_int
    (73) VAR_CTE -> . CTE_FLT pila_operando_float
    (74) VAR_CTE -> . CTE_CHAR pila_operando_char

    PARIZQ          shift and go to state 92
    ID              shift and go to state 100
    CTE_INT         shift and go to state 101
    CTE_FLT         shift and go to state 102
    CTE_CHAR        shift and go to state 103

    EXPR                           shift and go to state 187
    EXP                            shift and go to state 96
    TERM                           shift and go to state 97
    FACTOR                         shift and go to state 98
    VAR_CTE                        shift and go to state 99

state 169

    (55) EXPR_P -> GT pila_operadores_add . EXPR
    (53) EXPR -> . EXP cuad_comp EXPR_P
    (61) EXP -> . TERM cuad_sumres EXP_P
    (65) TERM -> . FACTOR cuad_muldiv TERM_P
    (69) FACTOR -> . PARIZQ fondo_falso_add EXPRESION PARDER fondo_falso_pop
    (70) FACTOR -> . VAR_CTE
    (71) VAR_CTE -> . ID pila_operando_id
    (72) VAR_CTE -> . CTE_INT pila_operando_int
    (73) VAR_CTE -> . CTE_FLT pila_operando_float
    (74) VAR_CTE -> . CTE_CHAR pila_operando_char

    PARIZQ          shift and go to state 92
    ID              shift and go to state 100
    CTE_INT         shift and go to state 101
    CTE_FLT         shift and go to state 102
    CTE_CHAR        shift and go to state 103

    EXPR                           shift and go to state 188
    EXP                            shift and go to state 96
    TERM                           shift and go to state 97
    FACTOR                         shift and go to state 98
    VAR_CTE                        shift and go to state 99

state 170

    (56) EXPR_P -> DIFF pila_operadores_add . EXPR
    (53) EXPR -> . EXP cuad_comp EXPR_P
    (61) EXP -> . TERM cuad_sumres EXP_P
    (65) TERM -> . FACTOR cuad_muldiv TERM_P
    (69) FACTOR -> . PARIZQ fondo_falso_add EXPRESION PARDER fondo_falso_pop
    (70) FACTOR -> . VAR_CTE
    (71) VAR_CTE -> . ID pila_operando_id
    (72) VAR_CTE -> . CTE_INT pila_operando_int
    (73) VAR_CTE -> . CTE_FLT pila_operando_float
    (74) VAR_CTE -> . CTE_CHAR pila_operando_char

    PARIZQ          shift and go to state 92
    ID              shift and go to state 100
    CTE_INT         shift and go to state 101
    CTE_FLT         shift and go to state 102
    CTE_CHAR        shift and go to state 103

    EXPR                           shift and go to state 189
    EXP                            shift and go to state 96
    TERM                           shift and go to state 97
    FACTOR                         shift and go to state 98
    VAR_CTE                        shift and go to state 99

state 171

    (57) EXPR_P -> LTE pila_operadores_add . EXPR
    (53) EXPR -> . EXP cuad_comp EXPR_P
    (61) EXP -> . TERM cuad_sumres EXP_P
    (65) TERM -> . FACTOR cuad_muldiv TERM_P
    (69) FACTOR -> . PARIZQ fondo_falso_add EXPRESION PARDER fondo_falso_pop
    (70) FACTOR -> . VAR_CTE
    (71) VAR_CTE -> . ID pila_operando_id
    (72) VAR_CTE -> . CTE_INT pila_operando_int
    (73) VAR_CTE -> . CTE_FLT pila_operando_float
    (74) VAR_CTE -> . CTE_CHAR pila_operando_char

    PARIZQ          shift and go to state 92
    ID              shift and go to state 100
    CTE_INT         shift and go to state 101
    CTE_FLT         shift and go to state 102
    CTE_CHAR        shift and go to state 103

    EXPR                           shift and go to state 190
    EXP                            shift and go to state 96
    TERM                           shift and go to state 97
    FACTOR                         shift and go to state 98
    VAR_CTE                        shift and go to state 99

state 172

    (58) EXPR_P -> GTE pila_operadores_add . EXPR
    (53) EXPR -> . EXP cuad_comp EXPR_P
    (61) EXP -> . TERM cuad_sumres EXP_P
    (65) TERM -> . FACTOR cuad_muldiv TERM_P
    (69) FACTOR -> . PARIZQ fondo_falso_add EXPRESION PARDER fondo_falso_pop
    (70) FACTOR -> . VAR_CTE
    (71) VAR_CTE -> . ID pila_operando_id
    (72) VAR_CTE -> . CTE_INT pila_operando_int
    (73) VAR_CTE -> . CTE_FLT pila_operando_float
    (74) VAR_CTE -> . CTE_CHAR pila_operando_char

    PARIZQ          shift and go to state 92
    ID              shift and go to state 100
    CTE_INT         shift and go to state 101
    CTE_FLT         shift and go to state 102
    CTE_CHAR        shift and go to state 103

    EXPR                           shift and go to state 191
    EXP                            shift and go to state 96
    TERM                           shift and go to state 97
    FACTOR                         shift and go to state 98
    VAR_CTE                        shift and go to state 99

state 173

    (59) EXPR_P -> EQUAL pila_operadores_add . EXPR
    (53) EXPR -> . EXP cuad_comp EXPR_P
    (61) EXP -> . TERM cuad_sumres EXP_P
    (65) TERM -> . FACTOR cuad_muldiv TERM_P
    (69) FACTOR -> . PARIZQ fondo_falso_add EXPRESION PARDER fondo_falso_pop
    (70) FACTOR -> . VAR_CTE
    (71) VAR_CTE -> . ID pila_operando_id
    (72) VAR_CTE -> . CTE_INT pila_operando_int
    (73) VAR_CTE -> . CTE_FLT pila_operando_float
    (74) VAR_CTE -> . CTE_CHAR pila_operando_char

    PARIZQ          shift and go to state 92
    ID              shift and go to state 100
    CTE_INT         shift and go to state 101
    CTE_FLT         shift and go to state 102
    CTE_CHAR        shift and go to state 103

    EXPR                           shift and go to state 192
    EXP                            shift and go to state 96
    TERM                           shift and go to state 97
    FACTOR                         shift and go to state 98
    VAR_CTE                        shift and go to state 99

state 174

    (62) EXP_P -> MAS pila_operadores_add . EXP
    (61) EXP -> . TERM cuad_sumres EXP_P
    (65) TERM -> . FACTOR cuad_muldiv TERM_P
    (69) FACTOR -> . PARIZQ fondo_falso_add EXPRESION PARDER fondo_falso_pop
    (70) FACTOR -> . VAR_CTE
    (71) VAR_CTE -> . ID pila_operando_id
    (72) VAR_CTE -> . CTE_INT pila_operando_int
    (73) VAR_CTE -> . CTE_FLT pila_operando_float
    (74) VAR_CTE -> . CTE_CHAR pila_operando_char

    PARIZQ          shift and go to state 92
    ID              shift and go to state 100
    CTE_INT         shift and go to state 101
    CTE_FLT         shift and go to state 102
    CTE_CHAR        shift and go to state 103

    EXP                            shift and go to state 193
    TERM                           shift and go to state 97
    FACTOR                         shift and go to state 98
    VAR_CTE                        shift and go to state 99

state 175

    (63) EXP_P -> MENOS pila_operadores_add . EXP
    (61) EXP -> . TERM cuad_sumres EXP_P
    (65) TERM -> . FACTOR cuad_muldiv TERM_P
    (69) FACTOR -> . PARIZQ fondo_falso_add EXPRESION PARDER fondo_falso_pop
    (70) FACTOR -> . VAR_CTE
    (71) VAR_CTE -> . ID pila_operando_id
    (72) VAR_CTE -> . CTE_INT pila_operando_int
    (73) VAR_CTE -> . CTE_FLT pila_operando_float
    (74) VAR_CTE -> . CTE_CHAR pila_operando_char

    PARIZQ          shift and go to state 92
    ID              shift and go to state 100
    CTE_INT         shift and go to state 101
    CTE_FLT         shift and go to state 102
    CTE_CHAR        shift and go to state 103

    EXP                            shift and go to state 194
    TERM                           shift and go to state 97
    FACTOR                         shift and go to state 98
    VAR_CTE                        shift and go to state 99

state 176

    (66) TERM_P -> MULT pila_operadores_add . TERM
    (65) TERM -> . FACTOR cuad_muldiv TERM_P
    (69) FACTOR -> . PARIZQ fondo_falso_add EXPRESION PARDER fondo_falso_pop
    (70) FACTOR -> . VAR_CTE
    (71) VAR_CTE -> . ID pila_operando_id
    (72) VAR_CTE -> . CTE_INT pila_operando_int
    (73) VAR_CTE -> . CTE_FLT pila_operando_float
    (74) VAR_CTE -> . CTE_CHAR pila_operando_char

    PARIZQ          shift and go to state 92
    ID              shift and go to state 100
    CTE_INT         shift and go to state 101
    CTE_FLT         shift and go to state 102
    CTE_CHAR        shift and go to state 103

    TERM                           shift and go to state 195
    FACTOR                         shift and go to state 98
    VAR_CTE                        shift and go to state 99

state 177

    (67) TERM_P -> DIV pila_operadores_add . TERM
    (65) TERM -> . FACTOR cuad_muldiv TERM_P
    (69) FACTOR -> . PARIZQ fondo_falso_add EXPRESION PARDER fondo_falso_pop
    (70) FACTOR -> . VAR_CTE
    (71) VAR_CTE -> . ID pila_operando_id
    (72) VAR_CTE -> . CTE_INT pila_operando_int
    (73) VAR_CTE -> . CTE_FLT pila_operando_float
    (74) VAR_CTE -> . CTE_CHAR pila_operando_char

    PARIZQ          shift and go to state 92
    ID              shift and go to state 100
    CTE_INT         shift and go to state 101
    CTE_FLT         shift and go to state 102
    CTE_CHAR        shift and go to state 103

    TERM                           shift and go to state 196
    FACTOR                         shift and go to state 98
    VAR_CTE                        shift and go to state 99

state 178

    (35) LOOP_FOR -> FOR PARIZQ CTE_INT COMMA CTE_INT COMMA . CTE_INT PARDER LLVEIZQ ESTATUTO_P LLVEDER

    CTE_INT         shift and go to state 197


state 179

    (39) PRINTABLE_P -> COMMA PRINTABLE PRINTABLE_P .

    PARDER          reduce using rule 39 (PRINTABLE_P -> COMMA PRINTABLE PRINTABLE_P .)


state 180

    (10) FUNCS -> FUNC TYPE_P ID ADD_FUNC PARIZQ PARAMS PARDER LLVEIZQ ESTATUTO_P RETURN EXPRESION cuad_return . PTOCOMA LLVEDER

    PTOCOMA         shift and go to state 198


state 181

    (21) PARAMS_P -> COMMA TYPE ID ADD_VAR . PARAMS_P
    (21) PARAMS_P -> . COMMA TYPE ID ADD_VAR PARAMS_P
    (22) PARAMS_P -> . empty
    (75) empty -> .

    COMMA           shift and go to state 110
    PARDER          reduce using rule 75 (empty -> .)

    PARAMS_P                       shift and go to state 199
    empty                          shift and go to state 111

state 182

    (31) ASIGNACION -> ID pila_operando_id ASIGN pila_operadores_add EXPRESION cuad_asign PTOCOMA .

    ID              reduce using rule 31 (ASIGNACION -> ID pila_operando_id ASIGN pila_operadores_add EXPRESION cuad_asign PTOCOMA .)
    IF              reduce using rule 31 (ASIGNACION -> ID pila_operando_id ASIGN pila_operadores_add EXPRESION cuad_asign PTOCOMA .)
    FOR             reduce using rule 31 (ASIGNACION -> ID pila_operando_id ASIGN pila_operadores_add EXPRESION cuad_asign PTOCOMA .)
    PRINT           reduce using rule 31 (ASIGNACION -> ID pila_operando_id ASIGN pila_operadores_add EXPRESION cuad_asign PTOCOMA .)
    LLVEDER         reduce using rule 31 (ASIGNACION -> ID pila_operando_id ASIGN pila_operadores_add EXPRESION cuad_asign PTOCOMA .)
    RETURN          reduce using rule 31 (ASIGNACION -> ID pila_operando_id ASIGN pila_operadores_add EXPRESION cuad_asign PTOCOMA .)


state 183

    (69) FACTOR -> PARIZQ fondo_falso_add EXPRESION PARDER fondo_falso_pop .

    MULT            reduce using rule 69 (FACTOR -> PARIZQ fondo_falso_add EXPRESION PARDER fondo_falso_pop .)
    DIV             reduce using rule 69 (FACTOR -> PARIZQ fondo_falso_add EXPRESION PARDER fondo_falso_pop .)
    MAS             reduce using rule 69 (FACTOR -> PARIZQ fondo_falso_add EXPRESION PARDER fondo_falso_pop .)
    MENOS           reduce using rule 69 (FACTOR -> PARIZQ fondo_falso_add EXPRESION PARDER fondo_falso_pop .)
    LT              reduce using rule 69 (FACTOR -> PARIZQ fondo_falso_add EXPRESION PARDER fondo_falso_pop .)
    GT              reduce using rule 69 (FACTOR -> PARIZQ fondo_falso_add EXPRESION PARDER fondo_falso_pop .)
    DIFF            reduce using rule 69 (FACTOR -> PARIZQ fondo_falso_add EXPRESION PARDER fondo_falso_pop .)
    LTE             reduce using rule 69 (FACTOR -> PARIZQ fondo_falso_add EXPRESION PARDER fondo_falso_pop .)
    GTE             reduce using rule 69 (FACTOR -> PARIZQ fondo_falso_add EXPRESION PARDER fondo_falso_pop .)
    EQUAL           reduce using rule 69 (FACTOR -> PARIZQ fondo_falso_add EXPRESION PARDER fondo_falso_pop .)
    AND             reduce using rule 69 (FACTOR -> PARIZQ fondo_falso_add EXPRESION PARDER fondo_falso_pop .)
    OR              reduce using rule 69 (FACTOR -> PARIZQ fondo_falso_add EXPRESION PARDER fondo_falso_pop .)
    PARDER          reduce using rule 69 (FACTOR -> PARIZQ fondo_falso_add EXPRESION PARDER fondo_falso_pop .)
    COMMA           reduce using rule 69 (FACTOR -> PARIZQ fondo_falso_add EXPRESION PARDER fondo_falso_pop .)
    PTOCOMA         reduce using rule 69 (FACTOR -> PARIZQ fondo_falso_add EXPRESION PARDER fondo_falso_pop .)


state 184

    (32) CONDICION -> IF PARIZQ EXPRESION PARDER LLVEIZQ ESTATUTO_P LLVEDER . CONDICION_P
    (33) CONDICION_P -> . ELSE LLVEIZQ ESTATUTO_P LLVEDER
    (34) CONDICION_P -> . empty
    (75) empty -> .

    ELSE            shift and go to state 201
    ID              reduce using rule 75 (empty -> .)
    IF              reduce using rule 75 (empty -> .)
    FOR             reduce using rule 75 (empty -> .)
    PRINT           reduce using rule 75 (empty -> .)
    LLVEDER         reduce using rule 75 (empty -> .)
    RETURN          reduce using rule 75 (empty -> .)

    CONDICION_P                    shift and go to state 200
    empty                          shift and go to state 202

state 185

    (49) EXPRESION -> EXPRE cuad_or OR pila_operadores_add EXPRESION .

    PARDER          reduce using rule 49 (EXPRESION -> EXPRE cuad_or OR pila_operadores_add EXPRESION .)
    COMMA           reduce using rule 49 (EXPRESION -> EXPRE cuad_or OR pila_operadores_add EXPRESION .)
    PTOCOMA         reduce using rule 49 (EXPRESION -> EXPRE cuad_or OR pila_operadores_add EXPRESION .)


state 186

    (51) EXPRE -> EXPR cuad_and AND pila_operadores_add EXPRE .

    OR              reduce using rule 51 (EXPRE -> EXPR cuad_and AND pila_operadores_add EXPRE .)
    PARDER          reduce using rule 51 (EXPRE -> EXPR cuad_and AND pila_operadores_add EXPRE .)
    COMMA           reduce using rule 51 (EXPRE -> EXPR cuad_and AND pila_operadores_add EXPRE .)
    PTOCOMA         reduce using rule 51 (EXPRE -> EXPR cuad_and AND pila_operadores_add EXPRE .)


state 187

    (54) EXPR_P -> LT pila_operadores_add EXPR .

    AND             reduce using rule 54 (EXPR_P -> LT pila_operadores_add EXPR .)
    OR              reduce using rule 54 (EXPR_P -> LT pila_operadores_add EXPR .)
    PARDER          reduce using rule 54 (EXPR_P -> LT pila_operadores_add EXPR .)
    COMMA           reduce using rule 54 (EXPR_P -> LT pila_operadores_add EXPR .)
    PTOCOMA         reduce using rule 54 (EXPR_P -> LT pila_operadores_add EXPR .)


state 188

    (55) EXPR_P -> GT pila_operadores_add EXPR .

    AND             reduce using rule 55 (EXPR_P -> GT pila_operadores_add EXPR .)
    OR              reduce using rule 55 (EXPR_P -> GT pila_operadores_add EXPR .)
    PARDER          reduce using rule 55 (EXPR_P -> GT pila_operadores_add EXPR .)
    COMMA           reduce using rule 55 (EXPR_P -> GT pila_operadores_add EXPR .)
    PTOCOMA         reduce using rule 55 (EXPR_P -> GT pila_operadores_add EXPR .)


state 189

    (56) EXPR_P -> DIFF pila_operadores_add EXPR .

    AND             reduce using rule 56 (EXPR_P -> DIFF pila_operadores_add EXPR .)
    OR              reduce using rule 56 (EXPR_P -> DIFF pila_operadores_add EXPR .)
    PARDER          reduce using rule 56 (EXPR_P -> DIFF pila_operadores_add EXPR .)
    COMMA           reduce using rule 56 (EXPR_P -> DIFF pila_operadores_add EXPR .)
    PTOCOMA         reduce using rule 56 (EXPR_P -> DIFF pila_operadores_add EXPR .)


state 190

    (57) EXPR_P -> LTE pila_operadores_add EXPR .

    AND             reduce using rule 57 (EXPR_P -> LTE pila_operadores_add EXPR .)
    OR              reduce using rule 57 (EXPR_P -> LTE pila_operadores_add EXPR .)
    PARDER          reduce using rule 57 (EXPR_P -> LTE pila_operadores_add EXPR .)
    COMMA           reduce using rule 57 (EXPR_P -> LTE pila_operadores_add EXPR .)
    PTOCOMA         reduce using rule 57 (EXPR_P -> LTE pila_operadores_add EXPR .)


state 191

    (58) EXPR_P -> GTE pila_operadores_add EXPR .

    AND             reduce using rule 58 (EXPR_P -> GTE pila_operadores_add EXPR .)
    OR              reduce using rule 58 (EXPR_P -> GTE pila_operadores_add EXPR .)
    PARDER          reduce using rule 58 (EXPR_P -> GTE pila_operadores_add EXPR .)
    COMMA           reduce using rule 58 (EXPR_P -> GTE pila_operadores_add EXPR .)
    PTOCOMA         reduce using rule 58 (EXPR_P -> GTE pila_operadores_add EXPR .)


state 192

    (59) EXPR_P -> EQUAL pila_operadores_add EXPR .

    AND             reduce using rule 59 (EXPR_P -> EQUAL pila_operadores_add EXPR .)
    OR              reduce using rule 59 (EXPR_P -> EQUAL pila_operadores_add EXPR .)
    PARDER          reduce using rule 59 (EXPR_P -> EQUAL pila_operadores_add EXPR .)
    COMMA           reduce using rule 59 (EXPR_P -> EQUAL pila_operadores_add EXPR .)
    PTOCOMA         reduce using rule 59 (EXPR_P -> EQUAL pila_operadores_add EXPR .)


state 193

    (62) EXP_P -> MAS pila_operadores_add EXP .

    LT              reduce using rule 62 (EXP_P -> MAS pila_operadores_add EXP .)
    GT              reduce using rule 62 (EXP_P -> MAS pila_operadores_add EXP .)
    DIFF            reduce using rule 62 (EXP_P -> MAS pila_operadores_add EXP .)
    LTE             reduce using rule 62 (EXP_P -> MAS pila_operadores_add EXP .)
    GTE             reduce using rule 62 (EXP_P -> MAS pila_operadores_add EXP .)
    EQUAL           reduce using rule 62 (EXP_P -> MAS pila_operadores_add EXP .)
    AND             reduce using rule 62 (EXP_P -> MAS pila_operadores_add EXP .)
    OR              reduce using rule 62 (EXP_P -> MAS pila_operadores_add EXP .)
    PARDER          reduce using rule 62 (EXP_P -> MAS pila_operadores_add EXP .)
    COMMA           reduce using rule 62 (EXP_P -> MAS pila_operadores_add EXP .)
    PTOCOMA         reduce using rule 62 (EXP_P -> MAS pila_operadores_add EXP .)


state 194

    (63) EXP_P -> MENOS pila_operadores_add EXP .

    LT              reduce using rule 63 (EXP_P -> MENOS pila_operadores_add EXP .)
    GT              reduce using rule 63 (EXP_P -> MENOS pila_operadores_add EXP .)
    DIFF            reduce using rule 63 (EXP_P -> MENOS pila_operadores_add EXP .)
    LTE             reduce using rule 63 (EXP_P -> MENOS pila_operadores_add EXP .)
    GTE             reduce using rule 63 (EXP_P -> MENOS pila_operadores_add EXP .)
    EQUAL           reduce using rule 63 (EXP_P -> MENOS pila_operadores_add EXP .)
    AND             reduce using rule 63 (EXP_P -> MENOS pila_operadores_add EXP .)
    OR              reduce using rule 63 (EXP_P -> MENOS pila_operadores_add EXP .)
    PARDER          reduce using rule 63 (EXP_P -> MENOS pila_operadores_add EXP .)
    COMMA           reduce using rule 63 (EXP_P -> MENOS pila_operadores_add EXP .)
    PTOCOMA         reduce using rule 63 (EXP_P -> MENOS pila_operadores_add EXP .)


state 195

    (66) TERM_P -> MULT pila_operadores_add TERM .

    MAS             reduce using rule 66 (TERM_P -> MULT pila_operadores_add TERM .)
    MENOS           reduce using rule 66 (TERM_P -> MULT pila_operadores_add TERM .)
    LT              reduce using rule 66 (TERM_P -> MULT pila_operadores_add TERM .)
    GT              reduce using rule 66 (TERM_P -> MULT pila_operadores_add TERM .)
    DIFF            reduce using rule 66 (TERM_P -> MULT pila_operadores_add TERM .)
    LTE             reduce using rule 66 (TERM_P -> MULT pila_operadores_add TERM .)
    GTE             reduce using rule 66 (TERM_P -> MULT pila_operadores_add TERM .)
    EQUAL           reduce using rule 66 (TERM_P -> MULT pila_operadores_add TERM .)
    AND             reduce using rule 66 (TERM_P -> MULT pila_operadores_add TERM .)
    OR              reduce using rule 66 (TERM_P -> MULT pila_operadores_add TERM .)
    PARDER          reduce using rule 66 (TERM_P -> MULT pila_operadores_add TERM .)
    COMMA           reduce using rule 66 (TERM_P -> MULT pila_operadores_add TERM .)
    PTOCOMA         reduce using rule 66 (TERM_P -> MULT pila_operadores_add TERM .)


state 196

    (67) TERM_P -> DIV pila_operadores_add TERM .

    MAS             reduce using rule 67 (TERM_P -> DIV pila_operadores_add TERM .)
    MENOS           reduce using rule 67 (TERM_P -> DIV pila_operadores_add TERM .)
    LT              reduce using rule 67 (TERM_P -> DIV pila_operadores_add TERM .)
    GT              reduce using rule 67 (TERM_P -> DIV pila_operadores_add TERM .)
    DIFF            reduce using rule 67 (TERM_P -> DIV pila_operadores_add TERM .)
    LTE             reduce using rule 67 (TERM_P -> DIV pila_operadores_add TERM .)
    GTE             reduce using rule 67 (TERM_P -> DIV pila_operadores_add TERM .)
    EQUAL           reduce using rule 67 (TERM_P -> DIV pila_operadores_add TERM .)
    AND             reduce using rule 67 (TERM_P -> DIV pila_operadores_add TERM .)
    OR              reduce using rule 67 (TERM_P -> DIV pila_operadores_add TERM .)
    PARDER          reduce using rule 67 (TERM_P -> DIV pila_operadores_add TERM .)
    COMMA           reduce using rule 67 (TERM_P -> DIV pila_operadores_add TERM .)
    PTOCOMA         reduce using rule 67 (TERM_P -> DIV pila_operadores_add TERM .)


state 197

    (35) LOOP_FOR -> FOR PARIZQ CTE_INT COMMA CTE_INT COMMA CTE_INT . PARDER LLVEIZQ ESTATUTO_P LLVEDER

    PARDER          shift and go to state 203


state 198

    (10) FUNCS -> FUNC TYPE_P ID ADD_FUNC PARIZQ PARAMS PARDER LLVEIZQ ESTATUTO_P RETURN EXPRESION cuad_return PTOCOMA . LLVEDER

    LLVEDER         shift and go to state 204


state 199

    (21) PARAMS_P -> COMMA TYPE ID ADD_VAR PARAMS_P .

    PARDER          reduce using rule 21 (PARAMS_P -> COMMA TYPE ID ADD_VAR PARAMS_P .)


state 200

    (32) CONDICION -> IF PARIZQ EXPRESION PARDER LLVEIZQ ESTATUTO_P LLVEDER CONDICION_P .

    ID              reduce using rule 32 (CONDICION -> IF PARIZQ EXPRESION PARDER LLVEIZQ ESTATUTO_P LLVEDER CONDICION_P .)
    IF              reduce using rule 32 (CONDICION -> IF PARIZQ EXPRESION PARDER LLVEIZQ ESTATUTO_P LLVEDER CONDICION_P .)
    FOR             reduce using rule 32 (CONDICION -> IF PARIZQ EXPRESION PARDER LLVEIZQ ESTATUTO_P LLVEDER CONDICION_P .)
    PRINT           reduce using rule 32 (CONDICION -> IF PARIZQ EXPRESION PARDER LLVEIZQ ESTATUTO_P LLVEDER CONDICION_P .)
    LLVEDER         reduce using rule 32 (CONDICION -> IF PARIZQ EXPRESION PARDER LLVEIZQ ESTATUTO_P LLVEDER CONDICION_P .)
    RETURN          reduce using rule 32 (CONDICION -> IF PARIZQ EXPRESION PARDER LLVEIZQ ESTATUTO_P LLVEDER CONDICION_P .)


state 201

    (33) CONDICION_P -> ELSE . LLVEIZQ ESTATUTO_P LLVEDER

    LLVEIZQ         shift and go to state 205


state 202

    (34) CONDICION_P -> empty .

    ID              reduce using rule 34 (CONDICION_P -> empty .)
    IF              reduce using rule 34 (CONDICION_P -> empty .)
    FOR             reduce using rule 34 (CONDICION_P -> empty .)
    PRINT           reduce using rule 34 (CONDICION_P -> empty .)
    LLVEDER         reduce using rule 34 (CONDICION_P -> empty .)
    RETURN          reduce using rule 34 (CONDICION_P -> empty .)


state 203

    (35) LOOP_FOR -> FOR PARIZQ CTE_INT COMMA CTE_INT COMMA CTE_INT PARDER . LLVEIZQ ESTATUTO_P LLVEDER

    LLVEIZQ         shift and go to state 206


state 204

    (10) FUNCS -> FUNC TYPE_P ID ADD_FUNC PARIZQ PARAMS PARDER LLVEIZQ ESTATUTO_P RETURN EXPRESION cuad_return PTOCOMA LLVEDER .

    FUNC            reduce using rule 10 (FUNCS -> FUNC TYPE_P ID ADD_FUNC PARIZQ PARAMS PARDER LLVEIZQ ESTATUTO_P RETURN EXPRESION cuad_return PTOCOMA LLVEDER .)
    VOID            reduce using rule 10 (FUNCS -> FUNC TYPE_P ID ADD_FUNC PARIZQ PARAMS PARDER LLVEIZQ ESTATUTO_P RETURN EXPRESION cuad_return PTOCOMA LLVEDER .)


state 205

    (33) CONDICION_P -> ELSE LLVEIZQ . ESTATUTO_P LLVEDER
    (29) ESTATUTO_P -> . ESTATUTO ESTATUTO_P
    (30) ESTATUTO_P -> . empty
    (24) ESTATUTO -> . ASIGNACION
    (25) ESTATUTO -> . CONDICION
    (26) ESTATUTO -> . LOOP_FOR
    (27) ESTATUTO -> . ESCRITURA
    (28) ESTATUTO -> . FUNC_CALL
    (75) empty -> .
    (31) ASIGNACION -> . ID pila_operando_id ASIGN pila_operadores_add EXPRESION cuad_asign PTOCOMA
    (32) CONDICION -> . IF PARIZQ EXPRESION PARDER LLVEIZQ ESTATUTO_P LLVEDER CONDICION_P
    (35) LOOP_FOR -> . FOR PARIZQ CTE_INT COMMA CTE_INT COMMA CTE_INT PARDER LLVEIZQ ESTATUTO_P LLVEDER
    (36) ESCRITURA -> . PRINT PARIZQ PRINTABLE PRINTABLE_P PARDER
    (41) FUNC_CALL -> . ID PARIZQ PARM PARDER

    LLVEDER         reduce using rule 75 (empty -> .)
    ID              shift and go to state 66
    IF              shift and go to state 67
    FOR             shift and go to state 68
    PRINT           shift and go to state 69

    ESTATUTO_P                     shift and go to state 207
    ESTATUTO                       shift and go to state 59
    empty                          shift and go to state 60
    ASIGNACION                     shift and go to state 61
    CONDICION                      shift and go to state 62
    LOOP_FOR                       shift and go to state 63
    ESCRITURA                      shift and go to state 64
    FUNC_CALL                      shift and go to state 65

state 206

    (35) LOOP_FOR -> FOR PARIZQ CTE_INT COMMA CTE_INT COMMA CTE_INT PARDER LLVEIZQ . ESTATUTO_P LLVEDER
    (29) ESTATUTO_P -> . ESTATUTO ESTATUTO_P
    (30) ESTATUTO_P -> . empty
    (24) ESTATUTO -> . ASIGNACION
    (25) ESTATUTO -> . CONDICION
    (26) ESTATUTO -> . LOOP_FOR
    (27) ESTATUTO -> . ESCRITURA
    (28) ESTATUTO -> . FUNC_CALL
    (75) empty -> .
    (31) ASIGNACION -> . ID pila_operando_id ASIGN pila_operadores_add EXPRESION cuad_asign PTOCOMA
    (32) CONDICION -> . IF PARIZQ EXPRESION PARDER LLVEIZQ ESTATUTO_P LLVEDER CONDICION_P
    (35) LOOP_FOR -> . FOR PARIZQ CTE_INT COMMA CTE_INT COMMA CTE_INT PARDER LLVEIZQ ESTATUTO_P LLVEDER
    (36) ESCRITURA -> . PRINT PARIZQ PRINTABLE PRINTABLE_P PARDER
    (41) FUNC_CALL -> . ID PARIZQ PARM PARDER

    LLVEDER         reduce using rule 75 (empty -> .)
    ID              shift and go to state 66
    IF              shift and go to state 67
    FOR             shift and go to state 68
    PRINT           shift and go to state 69

    ESTATUTO_P                     shift and go to state 208
    ESTATUTO                       shift and go to state 59
    empty                          shift and go to state 60
    ASIGNACION                     shift and go to state 61
    CONDICION                      shift and go to state 62
    LOOP_FOR                       shift and go to state 63
    ESCRITURA                      shift and go to state 64
    FUNC_CALL                      shift and go to state 65

state 207

    (33) CONDICION_P -> ELSE LLVEIZQ ESTATUTO_P . LLVEDER

    LLVEDER         shift and go to state 209


state 208

    (35) LOOP_FOR -> FOR PARIZQ CTE_INT COMMA CTE_INT COMMA CTE_INT PARDER LLVEIZQ ESTATUTO_P . LLVEDER

    LLVEDER         shift and go to state 210


state 209

    (33) CONDICION_P -> ELSE LLVEIZQ ESTATUTO_P LLVEDER .

    ID              reduce using rule 33 (CONDICION_P -> ELSE LLVEIZQ ESTATUTO_P LLVEDER .)
    IF              reduce using rule 33 (CONDICION_P -> ELSE LLVEIZQ ESTATUTO_P LLVEDER .)
    FOR             reduce using rule 33 (CONDICION_P -> ELSE LLVEIZQ ESTATUTO_P LLVEDER .)
    PRINT           reduce using rule 33 (CONDICION_P -> ELSE LLVEIZQ ESTATUTO_P LLVEDER .)
    LLVEDER         reduce using rule 33 (CONDICION_P -> ELSE LLVEIZQ ESTATUTO_P LLVEDER .)
    RETURN          reduce using rule 33 (CONDICION_P -> ELSE LLVEIZQ ESTATUTO_P LLVEDER .)


state 210

    (35) LOOP_FOR -> FOR PARIZQ CTE_INT COMMA CTE_INT COMMA CTE_INT PARDER LLVEIZQ ESTATUTO_P LLVEDER .

    ID              reduce using rule 35 (LOOP_FOR -> FOR PARIZQ CTE_INT COMMA CTE_INT COMMA CTE_INT PARDER LLVEIZQ ESTATUTO_P LLVEDER .)
    IF              reduce using rule 35 (LOOP_FOR -> FOR PARIZQ CTE_INT COMMA CTE_INT COMMA CTE_INT PARDER LLVEIZQ ESTATUTO_P LLVEDER .)
    FOR             reduce using rule 35 (LOOP_FOR -> FOR PARIZQ CTE_INT COMMA CTE_INT COMMA CTE_INT PARDER LLVEIZQ ESTATUTO_P LLVEDER .)
    PRINT           reduce using rule 35 (LOOP_FOR -> FOR PARIZQ CTE_INT COMMA CTE_INT COMMA CTE_INT PARDER LLVEIZQ ESTATUTO_P LLVEDER .)
    LLVEDER         reduce using rule 35 (LOOP_FOR -> FOR PARIZQ CTE_INT COMMA CTE_INT COMMA CTE_INT PARDER LLVEIZQ ESTATUTO_P LLVEDER .)
    RETURN          reduce using rule 35 (LOOP_FOR -> FOR PARIZQ CTE_INT COMMA CTE_INT COMMA CTE_INT PARDER LLVEIZQ ESTATUTO_P LLVEDER .)

