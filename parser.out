Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    COMMENT
    DOSPTOS
    PUNTO

Grammar

Rule 0     S' -> PROGRAMA
Rule 1     PROGRAMA -> PROGRAM CREATE_DIRFUNC ID PTOCOMA VARS_P FUNCS_P MAIN_G
Rule 2     VARS -> VAR TYPE ID ADD_VAR VARS_PP PTOCOMA
Rule 3     VARS -> MAT TYPE ID CORIZQ CTE_INT CORDER VARS_PPP PTOCOMA
Rule 4     VARS_P -> VARS VARS_P
Rule 5     VARS_P -> empty
Rule 6     VARS_PP -> COMMA ID ADD_VAR VARS_PP
Rule 7     VARS_PP -> empty
Rule 8     VARS_PPP -> CORIZQ CTE_INT CORDER
Rule 9     VARS_PPP -> empty
Rule 10    FUNCS -> FUNC TYPE ID ADD_FUNC PARIZQ PARAMS PARDER LLVEIZQ func_jump ESTATUTO_P RETURN EXPRESION cuad_return PTOCOMA LLVEDER endFunc
Rule 11    FUNCS -> FUNC VOID CURR_TYPE ID ADD_FUNC PARIZQ PARAMS PARDER LLVEIZQ func_jump ESTATUTO_P LLVEDER endFunc
Rule 12    FUNCS_P -> FUNCS FUNCS_P
Rule 13    FUNCS_P -> empty
Rule 14    TYPE -> INT CURR_TYPE
Rule 15    TYPE -> FLOAT CURR_TYPE
Rule 16    TYPE -> BOOL CURR_TYPE
Rule 17    TYPE -> CHAR CURR_TYPE
Rule 18    PARAMS -> TYPE ID ADD_VAR update_param_table PARAMS_P
Rule 19    PARAMS -> empty
Rule 20    PARAMS_P -> COMMA TYPE ID ADD_VAR update_param_table PARAMS_P
Rule 21    PARAMS_P -> empty
Rule 22    MAIN_G -> VOID MAIN change_func PARIZQ PARDER LLVEIZQ ESTATUTO_P LLVEDER endProg
Rule 23    ESTATUTO -> ASIGNACION
Rule 24    ESTATUTO -> CONDICION
Rule 25    ESTATUTO -> LOOP_WHILE
Rule 26    ESTATUTO -> ESCRITURA
Rule 27    ESTATUTO -> FUNC_CALL
Rule 28    ESTATUTO_P -> ESTATUTO ESTATUTO_P
Rule 29    ESTATUTO_P -> empty
Rule 30    ASIGNACION -> ID pila_operando_id ASIGN pila_operadores_add EXPRESION cuad_asign PTOCOMA
Rule 31    CONDICION -> IF PARIZQ EXPRESION PARDER ver_if LLVEIZQ ESTATUTO_P LLVEDER CONDICION_P
Rule 32    CONDICION_P -> ELSE else_jump LLVEIZQ ESTATUTO_P LLVEDER if_end
Rule 33    CONDICION_P -> if_end
Rule 34    LOOP_WHILE -> WHILE add_jump PARIZQ EXPRESION PARDER ver_while LLVEIZQ ESTATUTO_P LLVEDER while_end
Rule 35    ESCRITURA -> PRINT PARIZQ PRINTABLE PARDER
Rule 36    PRINTABLE -> EXPRESION cuad_print PRINTABLE_P
Rule 37    PRINTABLE -> CTE_STR cuad_print_str PRINTABLE_P
Rule 38    PRINTABLE_P -> COMMA PRINTABLE
Rule 39    PRINTABLE_P -> empty
Rule 40    FUNC_CALL -> ID ver_func_id_era PARIZQ PARM ver_param_num PARDER cuad_gosub
Rule 41    PARM -> EXPRESION ver_param PARM_P
Rule 42    PARM -> empty
Rule 43    PARM_P -> COMMA EXPRESION ver_param PARM_P
Rule 44    PARM_P -> empty
Rule 45    EXPRESION -> EXPRE cuad_or OR pila_operadores_add EXPRESION
Rule 46    EXPRESION -> EXPRE cuad_or
Rule 47    EXPRE -> EXPR cuad_and AND pila_operadores_add EXPRE
Rule 48    EXPRE -> EXPR cuad_and
Rule 49    EXPR -> EXP cuad_comp EXPR_P
Rule 50    EXPR_P -> LT pila_operadores_add EXPR
Rule 51    EXPR_P -> GT pila_operadores_add EXPR
Rule 52    EXPR_P -> DIFF pila_operadores_add EXPR
Rule 53    EXPR_P -> LTE pila_operadores_add EXPR
Rule 54    EXPR_P -> GTE pila_operadores_add EXPR
Rule 55    EXPR_P -> EQUAL pila_operadores_add EXPR
Rule 56    EXPR_P -> empty
Rule 57    EXP -> TERM cuad_sumres EXP_P
Rule 58    EXP_P -> MAS pila_operadores_add EXP
Rule 59    EXP_P -> MENOS pila_operadores_add EXP
Rule 60    EXP_P -> empty
Rule 61    TERM -> FACTOR cuad_muldiv TERM_P
Rule 62    TERM_P -> MULT pila_operadores_add TERM
Rule 63    TERM_P -> DIV pila_operadores_add TERM
Rule 64    TERM_P -> empty
Rule 65    FACTOR -> PARIZQ fondo_falso_add EXPRESION PARDER fondo_falso_pop
Rule 66    FACTOR -> VAR_CTE
Rule 67    VAR_CTE -> ID pila_operando_id
Rule 68    VAR_CTE -> CTE_INT pila_operando_int
Rule 69    VAR_CTE -> CTE_FLT pila_operando_float
Rule 70    VAR_CTE -> CTE_CHAR pila_operando_char
Rule 71    empty -> <empty>
Rule 72    CREATE_DIRFUNC -> <empty>
Rule 73    CURR_TYPE -> <empty>
Rule 74    ADD_VAR -> <empty>
Rule 75    ADD_FUNC -> <empty>
Rule 76    pila_operando_id -> <empty>
Rule 77    pila_operando_int -> <empty>
Rule 78    pila_operando_float -> <empty>
Rule 79    pila_operando_char -> <empty>
Rule 80    pila_operadores_add -> <empty>
Rule 81    fondo_falso_add -> <empty>
Rule 82    fondo_falso_pop -> <empty>
Rule 83    cuad_and -> <empty>
Rule 84    cuad_or -> <empty>
Rule 85    cuad_comp -> <empty>
Rule 86    cuad_sumres -> <empty>
Rule 87    cuad_muldiv -> <empty>
Rule 88    cuad_asign -> <empty>
Rule 89    cuad_return -> <empty>
Rule 90    ver_if -> <empty>
Rule 91    if_end -> <empty>
Rule 92    else_jump -> <empty>
Rule 93    add_jump -> <empty>
Rule 94    ver_while -> <empty>
Rule 95    while_end -> <empty>
Rule 96    cuad_print -> <empty>
Rule 97    cuad_print_str -> <empty>
Rule 98    change_func -> <empty>
Rule 99    update_param_table -> <empty>
Rule 100   func_jump -> <empty>
Rule 101   endFunc -> <empty>
Rule 102   ver_func_id_era -> <empty>
Rule 103   ver_param -> <empty>
Rule 104   ver_param_num -> <empty>
Rule 105   cuad_gosub -> <empty>
Rule 106   endProg -> <empty>

Terminals, with rules where they appear

AND                  : 47
ASIGN                : 30
BOOL                 : 16
CHAR                 : 17
COMMA                : 6 20 38 43
COMMENT              : 
CORDER               : 3 8
CORIZQ               : 3 8
CTE_CHAR             : 70
CTE_FLT              : 69
CTE_INT              : 3 8 68
CTE_STR              : 37
DIFF                 : 52
DIV                  : 63
DOSPTOS              : 
ELSE                 : 32
EQUAL                : 55
FLOAT                : 15
FUNC                 : 10 11
GT                   : 51
GTE                  : 54
ID                   : 1 2 3 6 10 11 18 20 30 40 67
IF                   : 31
INT                  : 14
LLVEDER              : 10 11 22 31 32 34
LLVEIZQ              : 10 11 22 31 32 34
LT                   : 50
LTE                  : 53
MAIN                 : 22
MAS                  : 58
MAT                  : 3
MENOS                : 59
MULT                 : 62
OR                   : 45
PARDER               : 10 11 22 31 34 35 40 65
PARIZQ               : 10 11 22 31 34 35 40 65
PRINT                : 35
PROGRAM              : 1
PTOCOMA              : 1 2 3 10 30
PUNTO                : 
RETURN               : 10
VAR                  : 2
VOID                 : 11 22
WHILE                : 34
error                : 

Nonterminals, with rules where they appear

ADD_FUNC             : 10 11
ADD_VAR              : 2 6 18 20
ASIGNACION           : 23
CONDICION            : 24
CONDICION_P          : 31
CREATE_DIRFUNC       : 1
CURR_TYPE            : 11 14 15 16 17
ESCRITURA            : 26
ESTATUTO             : 28
ESTATUTO_P           : 10 11 22 28 31 32 34
EXP                  : 49 58 59
EXPR                 : 47 48 50 51 52 53 54 55
EXPRE                : 45 46 47
EXPRESION            : 10 30 31 34 36 41 43 45 65
EXPR_P               : 49
EXP_P                : 57
FACTOR               : 61
FUNCS                : 12
FUNCS_P              : 1 12
FUNC_CALL            : 27
LOOP_WHILE           : 25
MAIN_G               : 1
PARAMS               : 10 11
PARAMS_P             : 18 20
PARM                 : 40
PARM_P               : 41 43
PRINTABLE            : 35 38
PRINTABLE_P          : 36 37
PROGRAMA             : 0
TERM                 : 57 62 63
TERM_P               : 61
TYPE                 : 2 3 10 18 20
VARS                 : 4
VARS_P               : 1 4
VARS_PP              : 2 6
VARS_PPP             : 3
VAR_CTE              : 66
add_jump             : 34
change_func          : 22
cuad_and             : 47 48
cuad_asign           : 30
cuad_comp            : 49
cuad_gosub           : 40
cuad_muldiv          : 61
cuad_or              : 45 46
cuad_print           : 36
cuad_print_str       : 37
cuad_return          : 10
cuad_sumres          : 57
else_jump            : 32
empty                : 5 7 9 13 19 21 29 39 42 44 56 60 64
endFunc              : 10 11
endProg              : 22
fondo_falso_add      : 65
fondo_falso_pop      : 65
func_jump            : 10 11
if_end               : 32 33
pila_operadores_add  : 30 45 47 50 51 52 53 54 55 58 59 62 63
pila_operando_char   : 70
pila_operando_float  : 69
pila_operando_id     : 30 67
pila_operando_int    : 68
update_param_table   : 18 20
ver_func_id_era      : 40
ver_if               : 31
ver_param            : 41 43
ver_param_num        : 40
ver_while            : 34
while_end            : 34

Parsing method: LALR

state 0

    (0) S' -> . PROGRAMA
    (1) PROGRAMA -> . PROGRAM CREATE_DIRFUNC ID PTOCOMA VARS_P FUNCS_P MAIN_G

    PROGRAM         shift and go to state 2

    PROGRAMA                       shift and go to state 1

state 1

    (0) S' -> PROGRAMA .



state 2

    (1) PROGRAMA -> PROGRAM . CREATE_DIRFUNC ID PTOCOMA VARS_P FUNCS_P MAIN_G
    (72) CREATE_DIRFUNC -> .

    ID              reduce using rule 72 (CREATE_DIRFUNC -> .)

    CREATE_DIRFUNC                 shift and go to state 3

state 3

    (1) PROGRAMA -> PROGRAM CREATE_DIRFUNC . ID PTOCOMA VARS_P FUNCS_P MAIN_G

    ID              shift and go to state 4


state 4

    (1) PROGRAMA -> PROGRAM CREATE_DIRFUNC ID . PTOCOMA VARS_P FUNCS_P MAIN_G

    PTOCOMA         shift and go to state 5


state 5

    (1) PROGRAMA -> PROGRAM CREATE_DIRFUNC ID PTOCOMA . VARS_P FUNCS_P MAIN_G
    (4) VARS_P -> . VARS VARS_P
    (5) VARS_P -> . empty
    (2) VARS -> . VAR TYPE ID ADD_VAR VARS_PP PTOCOMA
    (3) VARS -> . MAT TYPE ID CORIZQ CTE_INT CORDER VARS_PPP PTOCOMA
    (71) empty -> .

    VAR             shift and go to state 9
    MAT             shift and go to state 10
    FUNC            reduce using rule 71 (empty -> .)
    VOID            reduce using rule 71 (empty -> .)

    VARS_P                         shift and go to state 6
    VARS                           shift and go to state 7
    empty                          shift and go to state 8

state 6

    (1) PROGRAMA -> PROGRAM CREATE_DIRFUNC ID PTOCOMA VARS_P . FUNCS_P MAIN_G
    (12) FUNCS_P -> . FUNCS FUNCS_P
    (13) FUNCS_P -> . empty
    (10) FUNCS -> . FUNC TYPE ID ADD_FUNC PARIZQ PARAMS PARDER LLVEIZQ func_jump ESTATUTO_P RETURN EXPRESION cuad_return PTOCOMA LLVEDER endFunc
    (11) FUNCS -> . FUNC VOID CURR_TYPE ID ADD_FUNC PARIZQ PARAMS PARDER LLVEIZQ func_jump ESTATUTO_P LLVEDER endFunc
    (71) empty -> .

    FUNC            shift and go to state 14
    VOID            reduce using rule 71 (empty -> .)

    FUNCS_P                        shift and go to state 11
    FUNCS                          shift and go to state 12
    empty                          shift and go to state 13

state 7

    (4) VARS_P -> VARS . VARS_P
    (4) VARS_P -> . VARS VARS_P
    (5) VARS_P -> . empty
    (2) VARS -> . VAR TYPE ID ADD_VAR VARS_PP PTOCOMA
    (3) VARS -> . MAT TYPE ID CORIZQ CTE_INT CORDER VARS_PPP PTOCOMA
    (71) empty -> .

    VAR             shift and go to state 9
    MAT             shift and go to state 10
    FUNC            reduce using rule 71 (empty -> .)
    VOID            reduce using rule 71 (empty -> .)

    VARS                           shift and go to state 7
    VARS_P                         shift and go to state 15
    empty                          shift and go to state 8

state 8

    (5) VARS_P -> empty .

    FUNC            reduce using rule 5 (VARS_P -> empty .)
    VOID            reduce using rule 5 (VARS_P -> empty .)


state 9

    (2) VARS -> VAR . TYPE ID ADD_VAR VARS_PP PTOCOMA
    (14) TYPE -> . INT CURR_TYPE
    (15) TYPE -> . FLOAT CURR_TYPE
    (16) TYPE -> . BOOL CURR_TYPE
    (17) TYPE -> . CHAR CURR_TYPE

    INT             shift and go to state 17
    FLOAT           shift and go to state 18
    BOOL            shift and go to state 19
    CHAR            shift and go to state 20

    TYPE                           shift and go to state 16

state 10

    (3) VARS -> MAT . TYPE ID CORIZQ CTE_INT CORDER VARS_PPP PTOCOMA
    (14) TYPE -> . INT CURR_TYPE
    (15) TYPE -> . FLOAT CURR_TYPE
    (16) TYPE -> . BOOL CURR_TYPE
    (17) TYPE -> . CHAR CURR_TYPE

    INT             shift and go to state 17
    FLOAT           shift and go to state 18
    BOOL            shift and go to state 19
    CHAR            shift and go to state 20

    TYPE                           shift and go to state 21

state 11

    (1) PROGRAMA -> PROGRAM CREATE_DIRFUNC ID PTOCOMA VARS_P FUNCS_P . MAIN_G
    (22) MAIN_G -> . VOID MAIN change_func PARIZQ PARDER LLVEIZQ ESTATUTO_P LLVEDER endProg

    VOID            shift and go to state 23

    MAIN_G                         shift and go to state 22

state 12

    (12) FUNCS_P -> FUNCS . FUNCS_P
    (12) FUNCS_P -> . FUNCS FUNCS_P
    (13) FUNCS_P -> . empty
    (10) FUNCS -> . FUNC TYPE ID ADD_FUNC PARIZQ PARAMS PARDER LLVEIZQ func_jump ESTATUTO_P RETURN EXPRESION cuad_return PTOCOMA LLVEDER endFunc
    (11) FUNCS -> . FUNC VOID CURR_TYPE ID ADD_FUNC PARIZQ PARAMS PARDER LLVEIZQ func_jump ESTATUTO_P LLVEDER endFunc
    (71) empty -> .

    FUNC            shift and go to state 14
    VOID            reduce using rule 71 (empty -> .)

    FUNCS                          shift and go to state 12
    FUNCS_P                        shift and go to state 24
    empty                          shift and go to state 13

state 13

    (13) FUNCS_P -> empty .

    VOID            reduce using rule 13 (FUNCS_P -> empty .)


state 14

    (10) FUNCS -> FUNC . TYPE ID ADD_FUNC PARIZQ PARAMS PARDER LLVEIZQ func_jump ESTATUTO_P RETURN EXPRESION cuad_return PTOCOMA LLVEDER endFunc
    (11) FUNCS -> FUNC . VOID CURR_TYPE ID ADD_FUNC PARIZQ PARAMS PARDER LLVEIZQ func_jump ESTATUTO_P LLVEDER endFunc
    (14) TYPE -> . INT CURR_TYPE
    (15) TYPE -> . FLOAT CURR_TYPE
    (16) TYPE -> . BOOL CURR_TYPE
    (17) TYPE -> . CHAR CURR_TYPE

    VOID            shift and go to state 26
    INT             shift and go to state 17
    FLOAT           shift and go to state 18
    BOOL            shift and go to state 19
    CHAR            shift and go to state 20

    TYPE                           shift and go to state 25

state 15

    (4) VARS_P -> VARS VARS_P .

    FUNC            reduce using rule 4 (VARS_P -> VARS VARS_P .)
    VOID            reduce using rule 4 (VARS_P -> VARS VARS_P .)


state 16

    (2) VARS -> VAR TYPE . ID ADD_VAR VARS_PP PTOCOMA

    ID              shift and go to state 27


state 17

    (14) TYPE -> INT . CURR_TYPE
    (73) CURR_TYPE -> .

    ID              reduce using rule 73 (CURR_TYPE -> .)

    CURR_TYPE                      shift and go to state 28

state 18

    (15) TYPE -> FLOAT . CURR_TYPE
    (73) CURR_TYPE -> .

    ID              reduce using rule 73 (CURR_TYPE -> .)

    CURR_TYPE                      shift and go to state 29

state 19

    (16) TYPE -> BOOL . CURR_TYPE
    (73) CURR_TYPE -> .

    ID              reduce using rule 73 (CURR_TYPE -> .)

    CURR_TYPE                      shift and go to state 30

state 20

    (17) TYPE -> CHAR . CURR_TYPE
    (73) CURR_TYPE -> .

    ID              reduce using rule 73 (CURR_TYPE -> .)

    CURR_TYPE                      shift and go to state 31

state 21

    (3) VARS -> MAT TYPE . ID CORIZQ CTE_INT CORDER VARS_PPP PTOCOMA

    ID              shift and go to state 32


state 22

    (1) PROGRAMA -> PROGRAM CREATE_DIRFUNC ID PTOCOMA VARS_P FUNCS_P MAIN_G .

    $end            reduce using rule 1 (PROGRAMA -> PROGRAM CREATE_DIRFUNC ID PTOCOMA VARS_P FUNCS_P MAIN_G .)


state 23

    (22) MAIN_G -> VOID . MAIN change_func PARIZQ PARDER LLVEIZQ ESTATUTO_P LLVEDER endProg

    MAIN            shift and go to state 33


state 24

    (12) FUNCS_P -> FUNCS FUNCS_P .

    VOID            reduce using rule 12 (FUNCS_P -> FUNCS FUNCS_P .)


state 25

    (10) FUNCS -> FUNC TYPE . ID ADD_FUNC PARIZQ PARAMS PARDER LLVEIZQ func_jump ESTATUTO_P RETURN EXPRESION cuad_return PTOCOMA LLVEDER endFunc

    ID              shift and go to state 34


state 26

    (11) FUNCS -> FUNC VOID . CURR_TYPE ID ADD_FUNC PARIZQ PARAMS PARDER LLVEIZQ func_jump ESTATUTO_P LLVEDER endFunc
    (73) CURR_TYPE -> .

    ID              reduce using rule 73 (CURR_TYPE -> .)

    CURR_TYPE                      shift and go to state 35

state 27

    (2) VARS -> VAR TYPE ID . ADD_VAR VARS_PP PTOCOMA
    (74) ADD_VAR -> .

    COMMA           reduce using rule 74 (ADD_VAR -> .)
    PTOCOMA         reduce using rule 74 (ADD_VAR -> .)

    ADD_VAR                        shift and go to state 36

state 28

    (14) TYPE -> INT CURR_TYPE .

    ID              reduce using rule 14 (TYPE -> INT CURR_TYPE .)


state 29

    (15) TYPE -> FLOAT CURR_TYPE .

    ID              reduce using rule 15 (TYPE -> FLOAT CURR_TYPE .)


state 30

    (16) TYPE -> BOOL CURR_TYPE .

    ID              reduce using rule 16 (TYPE -> BOOL CURR_TYPE .)


state 31

    (17) TYPE -> CHAR CURR_TYPE .

    ID              reduce using rule 17 (TYPE -> CHAR CURR_TYPE .)


state 32

    (3) VARS -> MAT TYPE ID . CORIZQ CTE_INT CORDER VARS_PPP PTOCOMA

    CORIZQ          shift and go to state 37


state 33

    (22) MAIN_G -> VOID MAIN . change_func PARIZQ PARDER LLVEIZQ ESTATUTO_P LLVEDER endProg
    (98) change_func -> .

    PARIZQ          reduce using rule 98 (change_func -> .)

    change_func                    shift and go to state 38

state 34

    (10) FUNCS -> FUNC TYPE ID . ADD_FUNC PARIZQ PARAMS PARDER LLVEIZQ func_jump ESTATUTO_P RETURN EXPRESION cuad_return PTOCOMA LLVEDER endFunc
    (75) ADD_FUNC -> .

    PARIZQ          reduce using rule 75 (ADD_FUNC -> .)

    ADD_FUNC                       shift and go to state 39

state 35

    (11) FUNCS -> FUNC VOID CURR_TYPE . ID ADD_FUNC PARIZQ PARAMS PARDER LLVEIZQ func_jump ESTATUTO_P LLVEDER endFunc

    ID              shift and go to state 40


state 36

    (2) VARS -> VAR TYPE ID ADD_VAR . VARS_PP PTOCOMA
    (6) VARS_PP -> . COMMA ID ADD_VAR VARS_PP
    (7) VARS_PP -> . empty
    (71) empty -> .

    COMMA           shift and go to state 42
    PTOCOMA         reduce using rule 71 (empty -> .)

    VARS_PP                        shift and go to state 41
    empty                          shift and go to state 43

state 37

    (3) VARS -> MAT TYPE ID CORIZQ . CTE_INT CORDER VARS_PPP PTOCOMA

    CTE_INT         shift and go to state 44


state 38

    (22) MAIN_G -> VOID MAIN change_func . PARIZQ PARDER LLVEIZQ ESTATUTO_P LLVEDER endProg

    PARIZQ          shift and go to state 45


state 39

    (10) FUNCS -> FUNC TYPE ID ADD_FUNC . PARIZQ PARAMS PARDER LLVEIZQ func_jump ESTATUTO_P RETURN EXPRESION cuad_return PTOCOMA LLVEDER endFunc

    PARIZQ          shift and go to state 46


state 40

    (11) FUNCS -> FUNC VOID CURR_TYPE ID . ADD_FUNC PARIZQ PARAMS PARDER LLVEIZQ func_jump ESTATUTO_P LLVEDER endFunc
    (75) ADD_FUNC -> .

    PARIZQ          reduce using rule 75 (ADD_FUNC -> .)

    ADD_FUNC                       shift and go to state 47

state 41

    (2) VARS -> VAR TYPE ID ADD_VAR VARS_PP . PTOCOMA

    PTOCOMA         shift and go to state 48


state 42

    (6) VARS_PP -> COMMA . ID ADD_VAR VARS_PP

    ID              shift and go to state 49


state 43

    (7) VARS_PP -> empty .

    PTOCOMA         reduce using rule 7 (VARS_PP -> empty .)


state 44

    (3) VARS -> MAT TYPE ID CORIZQ CTE_INT . CORDER VARS_PPP PTOCOMA

    CORDER          shift and go to state 50


state 45

    (22) MAIN_G -> VOID MAIN change_func PARIZQ . PARDER LLVEIZQ ESTATUTO_P LLVEDER endProg

    PARDER          shift and go to state 51


state 46

    (10) FUNCS -> FUNC TYPE ID ADD_FUNC PARIZQ . PARAMS PARDER LLVEIZQ func_jump ESTATUTO_P RETURN EXPRESION cuad_return PTOCOMA LLVEDER endFunc
    (18) PARAMS -> . TYPE ID ADD_VAR update_param_table PARAMS_P
    (19) PARAMS -> . empty
    (14) TYPE -> . INT CURR_TYPE
    (15) TYPE -> . FLOAT CURR_TYPE
    (16) TYPE -> . BOOL CURR_TYPE
    (17) TYPE -> . CHAR CURR_TYPE
    (71) empty -> .

    INT             shift and go to state 17
    FLOAT           shift and go to state 18
    BOOL            shift and go to state 19
    CHAR            shift and go to state 20
    PARDER          reduce using rule 71 (empty -> .)

    TYPE                           shift and go to state 52
    PARAMS                         shift and go to state 53
    empty                          shift and go to state 54

state 47

    (11) FUNCS -> FUNC VOID CURR_TYPE ID ADD_FUNC . PARIZQ PARAMS PARDER LLVEIZQ func_jump ESTATUTO_P LLVEDER endFunc

    PARIZQ          shift and go to state 55


state 48

    (2) VARS -> VAR TYPE ID ADD_VAR VARS_PP PTOCOMA .

    VAR             reduce using rule 2 (VARS -> VAR TYPE ID ADD_VAR VARS_PP PTOCOMA .)
    MAT             reduce using rule 2 (VARS -> VAR TYPE ID ADD_VAR VARS_PP PTOCOMA .)
    FUNC            reduce using rule 2 (VARS -> VAR TYPE ID ADD_VAR VARS_PP PTOCOMA .)
    VOID            reduce using rule 2 (VARS -> VAR TYPE ID ADD_VAR VARS_PP PTOCOMA .)


state 49

    (6) VARS_PP -> COMMA ID . ADD_VAR VARS_PP
    (74) ADD_VAR -> .

    COMMA           reduce using rule 74 (ADD_VAR -> .)
    PTOCOMA         reduce using rule 74 (ADD_VAR -> .)

    ADD_VAR                        shift and go to state 56

state 50

    (3) VARS -> MAT TYPE ID CORIZQ CTE_INT CORDER . VARS_PPP PTOCOMA
    (8) VARS_PPP -> . CORIZQ CTE_INT CORDER
    (9) VARS_PPP -> . empty
    (71) empty -> .

    CORIZQ          shift and go to state 57
    PTOCOMA         reduce using rule 71 (empty -> .)

    VARS_PPP                       shift and go to state 58
    empty                          shift and go to state 59

state 51

    (22) MAIN_G -> VOID MAIN change_func PARIZQ PARDER . LLVEIZQ ESTATUTO_P LLVEDER endProg

    LLVEIZQ         shift and go to state 60


state 52

    (18) PARAMS -> TYPE . ID ADD_VAR update_param_table PARAMS_P

    ID              shift and go to state 61


state 53

    (10) FUNCS -> FUNC TYPE ID ADD_FUNC PARIZQ PARAMS . PARDER LLVEIZQ func_jump ESTATUTO_P RETURN EXPRESION cuad_return PTOCOMA LLVEDER endFunc

    PARDER          shift and go to state 62


state 54

    (19) PARAMS -> empty .

    PARDER          reduce using rule 19 (PARAMS -> empty .)


state 55

    (11) FUNCS -> FUNC VOID CURR_TYPE ID ADD_FUNC PARIZQ . PARAMS PARDER LLVEIZQ func_jump ESTATUTO_P LLVEDER endFunc
    (18) PARAMS -> . TYPE ID ADD_VAR update_param_table PARAMS_P
    (19) PARAMS -> . empty
    (14) TYPE -> . INT CURR_TYPE
    (15) TYPE -> . FLOAT CURR_TYPE
    (16) TYPE -> . BOOL CURR_TYPE
    (17) TYPE -> . CHAR CURR_TYPE
    (71) empty -> .

    INT             shift and go to state 17
    FLOAT           shift and go to state 18
    BOOL            shift and go to state 19
    CHAR            shift and go to state 20
    PARDER          reduce using rule 71 (empty -> .)

    PARAMS                         shift and go to state 63
    TYPE                           shift and go to state 52
    empty                          shift and go to state 54

state 56

    (6) VARS_PP -> COMMA ID ADD_VAR . VARS_PP
    (6) VARS_PP -> . COMMA ID ADD_VAR VARS_PP
    (7) VARS_PP -> . empty
    (71) empty -> .

    COMMA           shift and go to state 42
    PTOCOMA         reduce using rule 71 (empty -> .)

    VARS_PP                        shift and go to state 64
    empty                          shift and go to state 43

state 57

    (8) VARS_PPP -> CORIZQ . CTE_INT CORDER

    CTE_INT         shift and go to state 65


state 58

    (3) VARS -> MAT TYPE ID CORIZQ CTE_INT CORDER VARS_PPP . PTOCOMA

    PTOCOMA         shift and go to state 66


state 59

    (9) VARS_PPP -> empty .

    PTOCOMA         reduce using rule 9 (VARS_PPP -> empty .)


state 60

    (22) MAIN_G -> VOID MAIN change_func PARIZQ PARDER LLVEIZQ . ESTATUTO_P LLVEDER endProg
    (28) ESTATUTO_P -> . ESTATUTO ESTATUTO_P
    (29) ESTATUTO_P -> . empty
    (23) ESTATUTO -> . ASIGNACION
    (24) ESTATUTO -> . CONDICION
    (25) ESTATUTO -> . LOOP_WHILE
    (26) ESTATUTO -> . ESCRITURA
    (27) ESTATUTO -> . FUNC_CALL
    (71) empty -> .
    (30) ASIGNACION -> . ID pila_operando_id ASIGN pila_operadores_add EXPRESION cuad_asign PTOCOMA
    (31) CONDICION -> . IF PARIZQ EXPRESION PARDER ver_if LLVEIZQ ESTATUTO_P LLVEDER CONDICION_P
    (34) LOOP_WHILE -> . WHILE add_jump PARIZQ EXPRESION PARDER ver_while LLVEIZQ ESTATUTO_P LLVEDER while_end
    (35) ESCRITURA -> . PRINT PARIZQ PRINTABLE PARDER
    (40) FUNC_CALL -> . ID ver_func_id_era PARIZQ PARM ver_param_num PARDER cuad_gosub

    LLVEDER         reduce using rule 71 (empty -> .)
    ID              shift and go to state 75
    IF              shift and go to state 76
    WHILE           shift and go to state 77
    PRINT           shift and go to state 78

    ESTATUTO_P                     shift and go to state 67
    ESTATUTO                       shift and go to state 68
    empty                          shift and go to state 69
    ASIGNACION                     shift and go to state 70
    CONDICION                      shift and go to state 71
    LOOP_WHILE                     shift and go to state 72
    ESCRITURA                      shift and go to state 73
    FUNC_CALL                      shift and go to state 74

state 61

    (18) PARAMS -> TYPE ID . ADD_VAR update_param_table PARAMS_P
    (74) ADD_VAR -> .

    COMMA           reduce using rule 74 (ADD_VAR -> .)
    PARDER          reduce using rule 74 (ADD_VAR -> .)

    ADD_VAR                        shift and go to state 79

state 62

    (10) FUNCS -> FUNC TYPE ID ADD_FUNC PARIZQ PARAMS PARDER . LLVEIZQ func_jump ESTATUTO_P RETURN EXPRESION cuad_return PTOCOMA LLVEDER endFunc

    LLVEIZQ         shift and go to state 80


state 63

    (11) FUNCS -> FUNC VOID CURR_TYPE ID ADD_FUNC PARIZQ PARAMS . PARDER LLVEIZQ func_jump ESTATUTO_P LLVEDER endFunc

    PARDER          shift and go to state 81


state 64

    (6) VARS_PP -> COMMA ID ADD_VAR VARS_PP .

    PTOCOMA         reduce using rule 6 (VARS_PP -> COMMA ID ADD_VAR VARS_PP .)


state 65

    (8) VARS_PPP -> CORIZQ CTE_INT . CORDER

    CORDER          shift and go to state 82


state 66

    (3) VARS -> MAT TYPE ID CORIZQ CTE_INT CORDER VARS_PPP PTOCOMA .

    VAR             reduce using rule 3 (VARS -> MAT TYPE ID CORIZQ CTE_INT CORDER VARS_PPP PTOCOMA .)
    MAT             reduce using rule 3 (VARS -> MAT TYPE ID CORIZQ CTE_INT CORDER VARS_PPP PTOCOMA .)
    FUNC            reduce using rule 3 (VARS -> MAT TYPE ID CORIZQ CTE_INT CORDER VARS_PPP PTOCOMA .)
    VOID            reduce using rule 3 (VARS -> MAT TYPE ID CORIZQ CTE_INT CORDER VARS_PPP PTOCOMA .)


state 67

    (22) MAIN_G -> VOID MAIN change_func PARIZQ PARDER LLVEIZQ ESTATUTO_P . LLVEDER endProg

    LLVEDER         shift and go to state 83


state 68

    (28) ESTATUTO_P -> ESTATUTO . ESTATUTO_P
    (28) ESTATUTO_P -> . ESTATUTO ESTATUTO_P
    (29) ESTATUTO_P -> . empty
    (23) ESTATUTO -> . ASIGNACION
    (24) ESTATUTO -> . CONDICION
    (25) ESTATUTO -> . LOOP_WHILE
    (26) ESTATUTO -> . ESCRITURA
    (27) ESTATUTO -> . FUNC_CALL
    (71) empty -> .
    (30) ASIGNACION -> . ID pila_operando_id ASIGN pila_operadores_add EXPRESION cuad_asign PTOCOMA
    (31) CONDICION -> . IF PARIZQ EXPRESION PARDER ver_if LLVEIZQ ESTATUTO_P LLVEDER CONDICION_P
    (34) LOOP_WHILE -> . WHILE add_jump PARIZQ EXPRESION PARDER ver_while LLVEIZQ ESTATUTO_P LLVEDER while_end
    (35) ESCRITURA -> . PRINT PARIZQ PRINTABLE PARDER
    (40) FUNC_CALL -> . ID ver_func_id_era PARIZQ PARM ver_param_num PARDER cuad_gosub

    LLVEDER         reduce using rule 71 (empty -> .)
    RETURN          reduce using rule 71 (empty -> .)
    ID              shift and go to state 75
    IF              shift and go to state 76
    WHILE           shift and go to state 77
    PRINT           shift and go to state 78

    ESTATUTO                       shift and go to state 68
    ESTATUTO_P                     shift and go to state 84
    empty                          shift and go to state 69
    ASIGNACION                     shift and go to state 70
    CONDICION                      shift and go to state 71
    LOOP_WHILE                     shift and go to state 72
    ESCRITURA                      shift and go to state 73
    FUNC_CALL                      shift and go to state 74

state 69

    (29) ESTATUTO_P -> empty .

    LLVEDER         reduce using rule 29 (ESTATUTO_P -> empty .)
    RETURN          reduce using rule 29 (ESTATUTO_P -> empty .)


state 70

    (23) ESTATUTO -> ASIGNACION .

    ID              reduce using rule 23 (ESTATUTO -> ASIGNACION .)
    IF              reduce using rule 23 (ESTATUTO -> ASIGNACION .)
    WHILE           reduce using rule 23 (ESTATUTO -> ASIGNACION .)
    PRINT           reduce using rule 23 (ESTATUTO -> ASIGNACION .)
    LLVEDER         reduce using rule 23 (ESTATUTO -> ASIGNACION .)
    RETURN          reduce using rule 23 (ESTATUTO -> ASIGNACION .)


state 71

    (24) ESTATUTO -> CONDICION .

    ID              reduce using rule 24 (ESTATUTO -> CONDICION .)
    IF              reduce using rule 24 (ESTATUTO -> CONDICION .)
    WHILE           reduce using rule 24 (ESTATUTO -> CONDICION .)
    PRINT           reduce using rule 24 (ESTATUTO -> CONDICION .)
    LLVEDER         reduce using rule 24 (ESTATUTO -> CONDICION .)
    RETURN          reduce using rule 24 (ESTATUTO -> CONDICION .)


state 72

    (25) ESTATUTO -> LOOP_WHILE .

    ID              reduce using rule 25 (ESTATUTO -> LOOP_WHILE .)
    IF              reduce using rule 25 (ESTATUTO -> LOOP_WHILE .)
    WHILE           reduce using rule 25 (ESTATUTO -> LOOP_WHILE .)
    PRINT           reduce using rule 25 (ESTATUTO -> LOOP_WHILE .)
    LLVEDER         reduce using rule 25 (ESTATUTO -> LOOP_WHILE .)
    RETURN          reduce using rule 25 (ESTATUTO -> LOOP_WHILE .)


state 73

    (26) ESTATUTO -> ESCRITURA .

    ID              reduce using rule 26 (ESTATUTO -> ESCRITURA .)
    IF              reduce using rule 26 (ESTATUTO -> ESCRITURA .)
    WHILE           reduce using rule 26 (ESTATUTO -> ESCRITURA .)
    PRINT           reduce using rule 26 (ESTATUTO -> ESCRITURA .)
    LLVEDER         reduce using rule 26 (ESTATUTO -> ESCRITURA .)
    RETURN          reduce using rule 26 (ESTATUTO -> ESCRITURA .)


state 74

    (27) ESTATUTO -> FUNC_CALL .

    ID              reduce using rule 27 (ESTATUTO -> FUNC_CALL .)
    IF              reduce using rule 27 (ESTATUTO -> FUNC_CALL .)
    WHILE           reduce using rule 27 (ESTATUTO -> FUNC_CALL .)
    PRINT           reduce using rule 27 (ESTATUTO -> FUNC_CALL .)
    LLVEDER         reduce using rule 27 (ESTATUTO -> FUNC_CALL .)
    RETURN          reduce using rule 27 (ESTATUTO -> FUNC_CALL .)


state 75

    (30) ASIGNACION -> ID . pila_operando_id ASIGN pila_operadores_add EXPRESION cuad_asign PTOCOMA
    (40) FUNC_CALL -> ID . ver_func_id_era PARIZQ PARM ver_param_num PARDER cuad_gosub
    (76) pila_operando_id -> .
    (102) ver_func_id_era -> .

    ASIGN           reduce using rule 76 (pila_operando_id -> .)
    PARIZQ          reduce using rule 102 (ver_func_id_era -> .)

    pila_operando_id               shift and go to state 85
    ver_func_id_era                shift and go to state 86

state 76

    (31) CONDICION -> IF . PARIZQ EXPRESION PARDER ver_if LLVEIZQ ESTATUTO_P LLVEDER CONDICION_P

    PARIZQ          shift and go to state 87


state 77

    (34) LOOP_WHILE -> WHILE . add_jump PARIZQ EXPRESION PARDER ver_while LLVEIZQ ESTATUTO_P LLVEDER while_end
    (93) add_jump -> .

    PARIZQ          reduce using rule 93 (add_jump -> .)

    add_jump                       shift and go to state 88

state 78

    (35) ESCRITURA -> PRINT . PARIZQ PRINTABLE PARDER

    PARIZQ          shift and go to state 89


state 79

    (18) PARAMS -> TYPE ID ADD_VAR . update_param_table PARAMS_P
    (99) update_param_table -> .

    COMMA           reduce using rule 99 (update_param_table -> .)
    PARDER          reduce using rule 99 (update_param_table -> .)

    update_param_table             shift and go to state 90

state 80

    (10) FUNCS -> FUNC TYPE ID ADD_FUNC PARIZQ PARAMS PARDER LLVEIZQ . func_jump ESTATUTO_P RETURN EXPRESION cuad_return PTOCOMA LLVEDER endFunc
    (100) func_jump -> .

    ID              reduce using rule 100 (func_jump -> .)
    IF              reduce using rule 100 (func_jump -> .)
    WHILE           reduce using rule 100 (func_jump -> .)
    PRINT           reduce using rule 100 (func_jump -> .)
    RETURN          reduce using rule 100 (func_jump -> .)

    func_jump                      shift and go to state 91

state 81

    (11) FUNCS -> FUNC VOID CURR_TYPE ID ADD_FUNC PARIZQ PARAMS PARDER . LLVEIZQ func_jump ESTATUTO_P LLVEDER endFunc

    LLVEIZQ         shift and go to state 92


state 82

    (8) VARS_PPP -> CORIZQ CTE_INT CORDER .

    PTOCOMA         reduce using rule 8 (VARS_PPP -> CORIZQ CTE_INT CORDER .)


state 83

    (22) MAIN_G -> VOID MAIN change_func PARIZQ PARDER LLVEIZQ ESTATUTO_P LLVEDER . endProg
    (106) endProg -> .

    $end            reduce using rule 106 (endProg -> .)

    endProg                        shift and go to state 93

state 84

    (28) ESTATUTO_P -> ESTATUTO ESTATUTO_P .

    LLVEDER         reduce using rule 28 (ESTATUTO_P -> ESTATUTO ESTATUTO_P .)
    RETURN          reduce using rule 28 (ESTATUTO_P -> ESTATUTO ESTATUTO_P .)


state 85

    (30) ASIGNACION -> ID pila_operando_id . ASIGN pila_operadores_add EXPRESION cuad_asign PTOCOMA

    ASIGN           shift and go to state 94


state 86

    (40) FUNC_CALL -> ID ver_func_id_era . PARIZQ PARM ver_param_num PARDER cuad_gosub

    PARIZQ          shift and go to state 95


state 87

    (31) CONDICION -> IF PARIZQ . EXPRESION PARDER ver_if LLVEIZQ ESTATUTO_P LLVEDER CONDICION_P
    (45) EXPRESION -> . EXPRE cuad_or OR pila_operadores_add EXPRESION
    (46) EXPRESION -> . EXPRE cuad_or
    (47) EXPRE -> . EXPR cuad_and AND pila_operadores_add EXPRE
    (48) EXPRE -> . EXPR cuad_and
    (49) EXPR -> . EXP cuad_comp EXPR_P
    (57) EXP -> . TERM cuad_sumres EXP_P
    (61) TERM -> . FACTOR cuad_muldiv TERM_P
    (65) FACTOR -> . PARIZQ fondo_falso_add EXPRESION PARDER fondo_falso_pop
    (66) FACTOR -> . VAR_CTE
    (67) VAR_CTE -> . ID pila_operando_id
    (68) VAR_CTE -> . CTE_INT pila_operando_int
    (69) VAR_CTE -> . CTE_FLT pila_operando_float
    (70) VAR_CTE -> . CTE_CHAR pila_operando_char

    PARIZQ          shift and go to state 96
    ID              shift and go to state 104
    CTE_INT         shift and go to state 105
    CTE_FLT         shift and go to state 106
    CTE_CHAR        shift and go to state 107

    EXPRESION                      shift and go to state 97
    EXPRE                          shift and go to state 98
    EXPR                           shift and go to state 99
    EXP                            shift and go to state 100
    TERM                           shift and go to state 101
    FACTOR                         shift and go to state 102
    VAR_CTE                        shift and go to state 103

state 88

    (34) LOOP_WHILE -> WHILE add_jump . PARIZQ EXPRESION PARDER ver_while LLVEIZQ ESTATUTO_P LLVEDER while_end

    PARIZQ          shift and go to state 108


state 89

    (35) ESCRITURA -> PRINT PARIZQ . PRINTABLE PARDER
    (36) PRINTABLE -> . EXPRESION cuad_print PRINTABLE_P
    (37) PRINTABLE -> . CTE_STR cuad_print_str PRINTABLE_P
    (45) EXPRESION -> . EXPRE cuad_or OR pila_operadores_add EXPRESION
    (46) EXPRESION -> . EXPRE cuad_or
    (47) EXPRE -> . EXPR cuad_and AND pila_operadores_add EXPRE
    (48) EXPRE -> . EXPR cuad_and
    (49) EXPR -> . EXP cuad_comp EXPR_P
    (57) EXP -> . TERM cuad_sumres EXP_P
    (61) TERM -> . FACTOR cuad_muldiv TERM_P
    (65) FACTOR -> . PARIZQ fondo_falso_add EXPRESION PARDER fondo_falso_pop
    (66) FACTOR -> . VAR_CTE
    (67) VAR_CTE -> . ID pila_operando_id
    (68) VAR_CTE -> . CTE_INT pila_operando_int
    (69) VAR_CTE -> . CTE_FLT pila_operando_float
    (70) VAR_CTE -> . CTE_CHAR pila_operando_char

    CTE_STR         shift and go to state 111
    PARIZQ          shift and go to state 96
    ID              shift and go to state 104
    CTE_INT         shift and go to state 105
    CTE_FLT         shift and go to state 106
    CTE_CHAR        shift and go to state 107

    PRINTABLE                      shift and go to state 109
    EXPRESION                      shift and go to state 110
    EXPRE                          shift and go to state 98
    EXPR                           shift and go to state 99
    EXP                            shift and go to state 100
    TERM                           shift and go to state 101
    FACTOR                         shift and go to state 102
    VAR_CTE                        shift and go to state 103

state 90

    (18) PARAMS -> TYPE ID ADD_VAR update_param_table . PARAMS_P
    (20) PARAMS_P -> . COMMA TYPE ID ADD_VAR update_param_table PARAMS_P
    (21) PARAMS_P -> . empty
    (71) empty -> .

    COMMA           shift and go to state 113
    PARDER          reduce using rule 71 (empty -> .)

    PARAMS_P                       shift and go to state 112
    empty                          shift and go to state 114

state 91

    (10) FUNCS -> FUNC TYPE ID ADD_FUNC PARIZQ PARAMS PARDER LLVEIZQ func_jump . ESTATUTO_P RETURN EXPRESION cuad_return PTOCOMA LLVEDER endFunc
    (28) ESTATUTO_P -> . ESTATUTO ESTATUTO_P
    (29) ESTATUTO_P -> . empty
    (23) ESTATUTO -> . ASIGNACION
    (24) ESTATUTO -> . CONDICION
    (25) ESTATUTO -> . LOOP_WHILE
    (26) ESTATUTO -> . ESCRITURA
    (27) ESTATUTO -> . FUNC_CALL
    (71) empty -> .
    (30) ASIGNACION -> . ID pila_operando_id ASIGN pila_operadores_add EXPRESION cuad_asign PTOCOMA
    (31) CONDICION -> . IF PARIZQ EXPRESION PARDER ver_if LLVEIZQ ESTATUTO_P LLVEDER CONDICION_P
    (34) LOOP_WHILE -> . WHILE add_jump PARIZQ EXPRESION PARDER ver_while LLVEIZQ ESTATUTO_P LLVEDER while_end
    (35) ESCRITURA -> . PRINT PARIZQ PRINTABLE PARDER
    (40) FUNC_CALL -> . ID ver_func_id_era PARIZQ PARM ver_param_num PARDER cuad_gosub

    RETURN          reduce using rule 71 (empty -> .)
    ID              shift and go to state 75
    IF              shift and go to state 76
    WHILE           shift and go to state 77
    PRINT           shift and go to state 78

    ESTATUTO_P                     shift and go to state 115
    ESTATUTO                       shift and go to state 68
    empty                          shift and go to state 69
    ASIGNACION                     shift and go to state 70
    CONDICION                      shift and go to state 71
    LOOP_WHILE                     shift and go to state 72
    ESCRITURA                      shift and go to state 73
    FUNC_CALL                      shift and go to state 74

state 92

    (11) FUNCS -> FUNC VOID CURR_TYPE ID ADD_FUNC PARIZQ PARAMS PARDER LLVEIZQ . func_jump ESTATUTO_P LLVEDER endFunc
    (100) func_jump -> .

    ID              reduce using rule 100 (func_jump -> .)
    IF              reduce using rule 100 (func_jump -> .)
    WHILE           reduce using rule 100 (func_jump -> .)
    PRINT           reduce using rule 100 (func_jump -> .)
    LLVEDER         reduce using rule 100 (func_jump -> .)

    func_jump                      shift and go to state 116

state 93

    (22) MAIN_G -> VOID MAIN change_func PARIZQ PARDER LLVEIZQ ESTATUTO_P LLVEDER endProg .

    $end            reduce using rule 22 (MAIN_G -> VOID MAIN change_func PARIZQ PARDER LLVEIZQ ESTATUTO_P LLVEDER endProg .)


state 94

    (30) ASIGNACION -> ID pila_operando_id ASIGN . pila_operadores_add EXPRESION cuad_asign PTOCOMA
    (80) pila_operadores_add -> .

    PARIZQ          reduce using rule 80 (pila_operadores_add -> .)
    ID              reduce using rule 80 (pila_operadores_add -> .)
    CTE_INT         reduce using rule 80 (pila_operadores_add -> .)
    CTE_FLT         reduce using rule 80 (pila_operadores_add -> .)
    CTE_CHAR        reduce using rule 80 (pila_operadores_add -> .)

    pila_operadores_add            shift and go to state 117

state 95

    (40) FUNC_CALL -> ID ver_func_id_era PARIZQ . PARM ver_param_num PARDER cuad_gosub
    (41) PARM -> . EXPRESION ver_param PARM_P
    (42) PARM -> . empty
    (45) EXPRESION -> . EXPRE cuad_or OR pila_operadores_add EXPRESION
    (46) EXPRESION -> . EXPRE cuad_or
    (71) empty -> .
    (47) EXPRE -> . EXPR cuad_and AND pila_operadores_add EXPRE
    (48) EXPRE -> . EXPR cuad_and
    (49) EXPR -> . EXP cuad_comp EXPR_P
    (57) EXP -> . TERM cuad_sumres EXP_P
    (61) TERM -> . FACTOR cuad_muldiv TERM_P
    (65) FACTOR -> . PARIZQ fondo_falso_add EXPRESION PARDER fondo_falso_pop
    (66) FACTOR -> . VAR_CTE
    (67) VAR_CTE -> . ID pila_operando_id
    (68) VAR_CTE -> . CTE_INT pila_operando_int
    (69) VAR_CTE -> . CTE_FLT pila_operando_float
    (70) VAR_CTE -> . CTE_CHAR pila_operando_char

    PARDER          reduce using rule 71 (empty -> .)
    PARIZQ          shift and go to state 96
    ID              shift and go to state 104
    CTE_INT         shift and go to state 105
    CTE_FLT         shift and go to state 106
    CTE_CHAR        shift and go to state 107

    PARM                           shift and go to state 118
    EXPRESION                      shift and go to state 119
    empty                          shift and go to state 120
    EXPRE                          shift and go to state 98
    EXPR                           shift and go to state 99
    EXP                            shift and go to state 100
    TERM                           shift and go to state 101
    FACTOR                         shift and go to state 102
    VAR_CTE                        shift and go to state 103

state 96

    (65) FACTOR -> PARIZQ . fondo_falso_add EXPRESION PARDER fondo_falso_pop
    (81) fondo_falso_add -> .

    PARIZQ          reduce using rule 81 (fondo_falso_add -> .)
    ID              reduce using rule 81 (fondo_falso_add -> .)
    CTE_INT         reduce using rule 81 (fondo_falso_add -> .)
    CTE_FLT         reduce using rule 81 (fondo_falso_add -> .)
    CTE_CHAR        reduce using rule 81 (fondo_falso_add -> .)

    fondo_falso_add                shift and go to state 121

state 97

    (31) CONDICION -> IF PARIZQ EXPRESION . PARDER ver_if LLVEIZQ ESTATUTO_P LLVEDER CONDICION_P

    PARDER          shift and go to state 122


state 98

    (45) EXPRESION -> EXPRE . cuad_or OR pila_operadores_add EXPRESION
    (46) EXPRESION -> EXPRE . cuad_or
    (84) cuad_or -> .

    OR              reduce using rule 84 (cuad_or -> .)
    PARDER          reduce using rule 84 (cuad_or -> .)
    COMMA           reduce using rule 84 (cuad_or -> .)
    PTOCOMA         reduce using rule 84 (cuad_or -> .)

    cuad_or                        shift and go to state 123

state 99

    (47) EXPRE -> EXPR . cuad_and AND pila_operadores_add EXPRE
    (48) EXPRE -> EXPR . cuad_and
    (83) cuad_and -> .

    AND             reduce using rule 83 (cuad_and -> .)
    OR              reduce using rule 83 (cuad_and -> .)
    PARDER          reduce using rule 83 (cuad_and -> .)
    COMMA           reduce using rule 83 (cuad_and -> .)
    PTOCOMA         reduce using rule 83 (cuad_and -> .)

    cuad_and                       shift and go to state 124

state 100

    (49) EXPR -> EXP . cuad_comp EXPR_P
    (85) cuad_comp -> .

    LT              reduce using rule 85 (cuad_comp -> .)
    GT              reduce using rule 85 (cuad_comp -> .)
    DIFF            reduce using rule 85 (cuad_comp -> .)
    LTE             reduce using rule 85 (cuad_comp -> .)
    GTE             reduce using rule 85 (cuad_comp -> .)
    EQUAL           reduce using rule 85 (cuad_comp -> .)
    AND             reduce using rule 85 (cuad_comp -> .)
    OR              reduce using rule 85 (cuad_comp -> .)
    PARDER          reduce using rule 85 (cuad_comp -> .)
    COMMA           reduce using rule 85 (cuad_comp -> .)
    PTOCOMA         reduce using rule 85 (cuad_comp -> .)

    cuad_comp                      shift and go to state 125

state 101

    (57) EXP -> TERM . cuad_sumres EXP_P
    (86) cuad_sumres -> .

    MAS             reduce using rule 86 (cuad_sumres -> .)
    MENOS           reduce using rule 86 (cuad_sumres -> .)
    LT              reduce using rule 86 (cuad_sumres -> .)
    GT              reduce using rule 86 (cuad_sumres -> .)
    DIFF            reduce using rule 86 (cuad_sumres -> .)
    LTE             reduce using rule 86 (cuad_sumres -> .)
    GTE             reduce using rule 86 (cuad_sumres -> .)
    EQUAL           reduce using rule 86 (cuad_sumres -> .)
    AND             reduce using rule 86 (cuad_sumres -> .)
    OR              reduce using rule 86 (cuad_sumres -> .)
    PARDER          reduce using rule 86 (cuad_sumres -> .)
    COMMA           reduce using rule 86 (cuad_sumres -> .)
    PTOCOMA         reduce using rule 86 (cuad_sumres -> .)

    cuad_sumres                    shift and go to state 126

state 102

    (61) TERM -> FACTOR . cuad_muldiv TERM_P
    (87) cuad_muldiv -> .

    MULT            reduce using rule 87 (cuad_muldiv -> .)
    DIV             reduce using rule 87 (cuad_muldiv -> .)
    MAS             reduce using rule 87 (cuad_muldiv -> .)
    MENOS           reduce using rule 87 (cuad_muldiv -> .)
    LT              reduce using rule 87 (cuad_muldiv -> .)
    GT              reduce using rule 87 (cuad_muldiv -> .)
    DIFF            reduce using rule 87 (cuad_muldiv -> .)
    LTE             reduce using rule 87 (cuad_muldiv -> .)
    GTE             reduce using rule 87 (cuad_muldiv -> .)
    EQUAL           reduce using rule 87 (cuad_muldiv -> .)
    AND             reduce using rule 87 (cuad_muldiv -> .)
    OR              reduce using rule 87 (cuad_muldiv -> .)
    PARDER          reduce using rule 87 (cuad_muldiv -> .)
    COMMA           reduce using rule 87 (cuad_muldiv -> .)
    PTOCOMA         reduce using rule 87 (cuad_muldiv -> .)

    cuad_muldiv                    shift and go to state 127

state 103

    (66) FACTOR -> VAR_CTE .

    MULT            reduce using rule 66 (FACTOR -> VAR_CTE .)
    DIV             reduce using rule 66 (FACTOR -> VAR_CTE .)
    MAS             reduce using rule 66 (FACTOR -> VAR_CTE .)
    MENOS           reduce using rule 66 (FACTOR -> VAR_CTE .)
    LT              reduce using rule 66 (FACTOR -> VAR_CTE .)
    GT              reduce using rule 66 (FACTOR -> VAR_CTE .)
    DIFF            reduce using rule 66 (FACTOR -> VAR_CTE .)
    LTE             reduce using rule 66 (FACTOR -> VAR_CTE .)
    GTE             reduce using rule 66 (FACTOR -> VAR_CTE .)
    EQUAL           reduce using rule 66 (FACTOR -> VAR_CTE .)
    AND             reduce using rule 66 (FACTOR -> VAR_CTE .)
    OR              reduce using rule 66 (FACTOR -> VAR_CTE .)
    PARDER          reduce using rule 66 (FACTOR -> VAR_CTE .)
    COMMA           reduce using rule 66 (FACTOR -> VAR_CTE .)
    PTOCOMA         reduce using rule 66 (FACTOR -> VAR_CTE .)


state 104

    (67) VAR_CTE -> ID . pila_operando_id
    (76) pila_operando_id -> .

    MULT            reduce using rule 76 (pila_operando_id -> .)
    DIV             reduce using rule 76 (pila_operando_id -> .)
    MAS             reduce using rule 76 (pila_operando_id -> .)
    MENOS           reduce using rule 76 (pila_operando_id -> .)
    LT              reduce using rule 76 (pila_operando_id -> .)
    GT              reduce using rule 76 (pila_operando_id -> .)
    DIFF            reduce using rule 76 (pila_operando_id -> .)
    LTE             reduce using rule 76 (pila_operando_id -> .)
    GTE             reduce using rule 76 (pila_operando_id -> .)
    EQUAL           reduce using rule 76 (pila_operando_id -> .)
    AND             reduce using rule 76 (pila_operando_id -> .)
    OR              reduce using rule 76 (pila_operando_id -> .)
    PARDER          reduce using rule 76 (pila_operando_id -> .)
    COMMA           reduce using rule 76 (pila_operando_id -> .)
    PTOCOMA         reduce using rule 76 (pila_operando_id -> .)

    pila_operando_id               shift and go to state 128

state 105

    (68) VAR_CTE -> CTE_INT . pila_operando_int
    (77) pila_operando_int -> .

    MULT            reduce using rule 77 (pila_operando_int -> .)
    DIV             reduce using rule 77 (pila_operando_int -> .)
    MAS             reduce using rule 77 (pila_operando_int -> .)
    MENOS           reduce using rule 77 (pila_operando_int -> .)
    LT              reduce using rule 77 (pila_operando_int -> .)
    GT              reduce using rule 77 (pila_operando_int -> .)
    DIFF            reduce using rule 77 (pila_operando_int -> .)
    LTE             reduce using rule 77 (pila_operando_int -> .)
    GTE             reduce using rule 77 (pila_operando_int -> .)
    EQUAL           reduce using rule 77 (pila_operando_int -> .)
    AND             reduce using rule 77 (pila_operando_int -> .)
    OR              reduce using rule 77 (pila_operando_int -> .)
    PARDER          reduce using rule 77 (pila_operando_int -> .)
    COMMA           reduce using rule 77 (pila_operando_int -> .)
    PTOCOMA         reduce using rule 77 (pila_operando_int -> .)

    pila_operando_int              shift and go to state 129

state 106

    (69) VAR_CTE -> CTE_FLT . pila_operando_float
    (78) pila_operando_float -> .

    MULT            reduce using rule 78 (pila_operando_float -> .)
    DIV             reduce using rule 78 (pila_operando_float -> .)
    MAS             reduce using rule 78 (pila_operando_float -> .)
    MENOS           reduce using rule 78 (pila_operando_float -> .)
    LT              reduce using rule 78 (pila_operando_float -> .)
    GT              reduce using rule 78 (pila_operando_float -> .)
    DIFF            reduce using rule 78 (pila_operando_float -> .)
    LTE             reduce using rule 78 (pila_operando_float -> .)
    GTE             reduce using rule 78 (pila_operando_float -> .)
    EQUAL           reduce using rule 78 (pila_operando_float -> .)
    AND             reduce using rule 78 (pila_operando_float -> .)
    OR              reduce using rule 78 (pila_operando_float -> .)
    PARDER          reduce using rule 78 (pila_operando_float -> .)
    COMMA           reduce using rule 78 (pila_operando_float -> .)
    PTOCOMA         reduce using rule 78 (pila_operando_float -> .)

    pila_operando_float            shift and go to state 130

state 107

    (70) VAR_CTE -> CTE_CHAR . pila_operando_char
    (79) pila_operando_char -> .

    MULT            reduce using rule 79 (pila_operando_char -> .)
    DIV             reduce using rule 79 (pila_operando_char -> .)
    MAS             reduce using rule 79 (pila_operando_char -> .)
    MENOS           reduce using rule 79 (pila_operando_char -> .)
    LT              reduce using rule 79 (pila_operando_char -> .)
    GT              reduce using rule 79 (pila_operando_char -> .)
    DIFF            reduce using rule 79 (pila_operando_char -> .)
    LTE             reduce using rule 79 (pila_operando_char -> .)
    GTE             reduce using rule 79 (pila_operando_char -> .)
    EQUAL           reduce using rule 79 (pila_operando_char -> .)
    AND             reduce using rule 79 (pila_operando_char -> .)
    OR              reduce using rule 79 (pila_operando_char -> .)
    PARDER          reduce using rule 79 (pila_operando_char -> .)
    COMMA           reduce using rule 79 (pila_operando_char -> .)
    PTOCOMA         reduce using rule 79 (pila_operando_char -> .)

    pila_operando_char             shift and go to state 131

state 108

    (34) LOOP_WHILE -> WHILE add_jump PARIZQ . EXPRESION PARDER ver_while LLVEIZQ ESTATUTO_P LLVEDER while_end
    (45) EXPRESION -> . EXPRE cuad_or OR pila_operadores_add EXPRESION
    (46) EXPRESION -> . EXPRE cuad_or
    (47) EXPRE -> . EXPR cuad_and AND pila_operadores_add EXPRE
    (48) EXPRE -> . EXPR cuad_and
    (49) EXPR -> . EXP cuad_comp EXPR_P
    (57) EXP -> . TERM cuad_sumres EXP_P
    (61) TERM -> . FACTOR cuad_muldiv TERM_P
    (65) FACTOR -> . PARIZQ fondo_falso_add EXPRESION PARDER fondo_falso_pop
    (66) FACTOR -> . VAR_CTE
    (67) VAR_CTE -> . ID pila_operando_id
    (68) VAR_CTE -> . CTE_INT pila_operando_int
    (69) VAR_CTE -> . CTE_FLT pila_operando_float
    (70) VAR_CTE -> . CTE_CHAR pila_operando_char

    PARIZQ          shift and go to state 96
    ID              shift and go to state 104
    CTE_INT         shift and go to state 105
    CTE_FLT         shift and go to state 106
    CTE_CHAR        shift and go to state 107

    EXPRESION                      shift and go to state 132
    EXPRE                          shift and go to state 98
    EXPR                           shift and go to state 99
    EXP                            shift and go to state 100
    TERM                           shift and go to state 101
    FACTOR                         shift and go to state 102
    VAR_CTE                        shift and go to state 103

state 109

    (35) ESCRITURA -> PRINT PARIZQ PRINTABLE . PARDER

    PARDER          shift and go to state 133


state 110

    (36) PRINTABLE -> EXPRESION . cuad_print PRINTABLE_P
    (96) cuad_print -> .

    COMMA           reduce using rule 96 (cuad_print -> .)
    PARDER          reduce using rule 96 (cuad_print -> .)

    cuad_print                     shift and go to state 134

state 111

    (37) PRINTABLE -> CTE_STR . cuad_print_str PRINTABLE_P
    (97) cuad_print_str -> .

    COMMA           reduce using rule 97 (cuad_print_str -> .)
    PARDER          reduce using rule 97 (cuad_print_str -> .)

    cuad_print_str                 shift and go to state 135

state 112

    (18) PARAMS -> TYPE ID ADD_VAR update_param_table PARAMS_P .

    PARDER          reduce using rule 18 (PARAMS -> TYPE ID ADD_VAR update_param_table PARAMS_P .)


state 113

    (20) PARAMS_P -> COMMA . TYPE ID ADD_VAR update_param_table PARAMS_P
    (14) TYPE -> . INT CURR_TYPE
    (15) TYPE -> . FLOAT CURR_TYPE
    (16) TYPE -> . BOOL CURR_TYPE
    (17) TYPE -> . CHAR CURR_TYPE

    INT             shift and go to state 17
    FLOAT           shift and go to state 18
    BOOL            shift and go to state 19
    CHAR            shift and go to state 20

    TYPE                           shift and go to state 136

state 114

    (21) PARAMS_P -> empty .

    PARDER          reduce using rule 21 (PARAMS_P -> empty .)


state 115

    (10) FUNCS -> FUNC TYPE ID ADD_FUNC PARIZQ PARAMS PARDER LLVEIZQ func_jump ESTATUTO_P . RETURN EXPRESION cuad_return PTOCOMA LLVEDER endFunc

    RETURN          shift and go to state 137


state 116

    (11) FUNCS -> FUNC VOID CURR_TYPE ID ADD_FUNC PARIZQ PARAMS PARDER LLVEIZQ func_jump . ESTATUTO_P LLVEDER endFunc
    (28) ESTATUTO_P -> . ESTATUTO ESTATUTO_P
    (29) ESTATUTO_P -> . empty
    (23) ESTATUTO -> . ASIGNACION
    (24) ESTATUTO -> . CONDICION
    (25) ESTATUTO -> . LOOP_WHILE
    (26) ESTATUTO -> . ESCRITURA
    (27) ESTATUTO -> . FUNC_CALL
    (71) empty -> .
    (30) ASIGNACION -> . ID pila_operando_id ASIGN pila_operadores_add EXPRESION cuad_asign PTOCOMA
    (31) CONDICION -> . IF PARIZQ EXPRESION PARDER ver_if LLVEIZQ ESTATUTO_P LLVEDER CONDICION_P
    (34) LOOP_WHILE -> . WHILE add_jump PARIZQ EXPRESION PARDER ver_while LLVEIZQ ESTATUTO_P LLVEDER while_end
    (35) ESCRITURA -> . PRINT PARIZQ PRINTABLE PARDER
    (40) FUNC_CALL -> . ID ver_func_id_era PARIZQ PARM ver_param_num PARDER cuad_gosub

    LLVEDER         reduce using rule 71 (empty -> .)
    ID              shift and go to state 75
    IF              shift and go to state 76
    WHILE           shift and go to state 77
    PRINT           shift and go to state 78

    ESTATUTO_P                     shift and go to state 138
    ESTATUTO                       shift and go to state 68
    empty                          shift and go to state 69
    ASIGNACION                     shift and go to state 70
    CONDICION                      shift and go to state 71
    LOOP_WHILE                     shift and go to state 72
    ESCRITURA                      shift and go to state 73
    FUNC_CALL                      shift and go to state 74

state 117

    (30) ASIGNACION -> ID pila_operando_id ASIGN pila_operadores_add . EXPRESION cuad_asign PTOCOMA
    (45) EXPRESION -> . EXPRE cuad_or OR pila_operadores_add EXPRESION
    (46) EXPRESION -> . EXPRE cuad_or
    (47) EXPRE -> . EXPR cuad_and AND pila_operadores_add EXPRE
    (48) EXPRE -> . EXPR cuad_and
    (49) EXPR -> . EXP cuad_comp EXPR_P
    (57) EXP -> . TERM cuad_sumres EXP_P
    (61) TERM -> . FACTOR cuad_muldiv TERM_P
    (65) FACTOR -> . PARIZQ fondo_falso_add EXPRESION PARDER fondo_falso_pop
    (66) FACTOR -> . VAR_CTE
    (67) VAR_CTE -> . ID pila_operando_id
    (68) VAR_CTE -> . CTE_INT pila_operando_int
    (69) VAR_CTE -> . CTE_FLT pila_operando_float
    (70) VAR_CTE -> . CTE_CHAR pila_operando_char

    PARIZQ          shift and go to state 96
    ID              shift and go to state 104
    CTE_INT         shift and go to state 105
    CTE_FLT         shift and go to state 106
    CTE_CHAR        shift and go to state 107

    EXPRESION                      shift and go to state 139
    EXPRE                          shift and go to state 98
    EXPR                           shift and go to state 99
    EXP                            shift and go to state 100
    TERM                           shift and go to state 101
    FACTOR                         shift and go to state 102
    VAR_CTE                        shift and go to state 103

state 118

    (40) FUNC_CALL -> ID ver_func_id_era PARIZQ PARM . ver_param_num PARDER cuad_gosub
    (104) ver_param_num -> .

    PARDER          reduce using rule 104 (ver_param_num -> .)

    ver_param_num                  shift and go to state 140

state 119

    (41) PARM -> EXPRESION . ver_param PARM_P
    (103) ver_param -> .

    COMMA           reduce using rule 103 (ver_param -> .)
    PARDER          reduce using rule 103 (ver_param -> .)

    ver_param                      shift and go to state 141

state 120

    (42) PARM -> empty .

    PARDER          reduce using rule 42 (PARM -> empty .)


state 121

    (65) FACTOR -> PARIZQ fondo_falso_add . EXPRESION PARDER fondo_falso_pop
    (45) EXPRESION -> . EXPRE cuad_or OR pila_operadores_add EXPRESION
    (46) EXPRESION -> . EXPRE cuad_or
    (47) EXPRE -> . EXPR cuad_and AND pila_operadores_add EXPRE
    (48) EXPRE -> . EXPR cuad_and
    (49) EXPR -> . EXP cuad_comp EXPR_P
    (57) EXP -> . TERM cuad_sumres EXP_P
    (61) TERM -> . FACTOR cuad_muldiv TERM_P
    (65) FACTOR -> . PARIZQ fondo_falso_add EXPRESION PARDER fondo_falso_pop
    (66) FACTOR -> . VAR_CTE
    (67) VAR_CTE -> . ID pila_operando_id
    (68) VAR_CTE -> . CTE_INT pila_operando_int
    (69) VAR_CTE -> . CTE_FLT pila_operando_float
    (70) VAR_CTE -> . CTE_CHAR pila_operando_char

    PARIZQ          shift and go to state 96
    ID              shift and go to state 104
    CTE_INT         shift and go to state 105
    CTE_FLT         shift and go to state 106
    CTE_CHAR        shift and go to state 107

    EXPRESION                      shift and go to state 142
    EXPRE                          shift and go to state 98
    EXPR                           shift and go to state 99
    EXP                            shift and go to state 100
    TERM                           shift and go to state 101
    FACTOR                         shift and go to state 102
    VAR_CTE                        shift and go to state 103

state 122

    (31) CONDICION -> IF PARIZQ EXPRESION PARDER . ver_if LLVEIZQ ESTATUTO_P LLVEDER CONDICION_P
    (90) ver_if -> .

    LLVEIZQ         reduce using rule 90 (ver_if -> .)

    ver_if                         shift and go to state 143

state 123

    (45) EXPRESION -> EXPRE cuad_or . OR pila_operadores_add EXPRESION
    (46) EXPRESION -> EXPRE cuad_or .

    OR              shift and go to state 144
    PARDER          reduce using rule 46 (EXPRESION -> EXPRE cuad_or .)
    COMMA           reduce using rule 46 (EXPRESION -> EXPRE cuad_or .)
    PTOCOMA         reduce using rule 46 (EXPRESION -> EXPRE cuad_or .)


state 124

    (47) EXPRE -> EXPR cuad_and . AND pila_operadores_add EXPRE
    (48) EXPRE -> EXPR cuad_and .

    AND             shift and go to state 145
    OR              reduce using rule 48 (EXPRE -> EXPR cuad_and .)
    PARDER          reduce using rule 48 (EXPRE -> EXPR cuad_and .)
    COMMA           reduce using rule 48 (EXPRE -> EXPR cuad_and .)
    PTOCOMA         reduce using rule 48 (EXPRE -> EXPR cuad_and .)


state 125

    (49) EXPR -> EXP cuad_comp . EXPR_P
    (50) EXPR_P -> . LT pila_operadores_add EXPR
    (51) EXPR_P -> . GT pila_operadores_add EXPR
    (52) EXPR_P -> . DIFF pila_operadores_add EXPR
    (53) EXPR_P -> . LTE pila_operadores_add EXPR
    (54) EXPR_P -> . GTE pila_operadores_add EXPR
    (55) EXPR_P -> . EQUAL pila_operadores_add EXPR
    (56) EXPR_P -> . empty
    (71) empty -> .

    LT              shift and go to state 147
    GT              shift and go to state 148
    DIFF            shift and go to state 149
    LTE             shift and go to state 150
    GTE             shift and go to state 151
    EQUAL           shift and go to state 152
    AND             reduce using rule 71 (empty -> .)
    OR              reduce using rule 71 (empty -> .)
    PARDER          reduce using rule 71 (empty -> .)
    COMMA           reduce using rule 71 (empty -> .)
    PTOCOMA         reduce using rule 71 (empty -> .)

    EXPR_P                         shift and go to state 146
    empty                          shift and go to state 153

state 126

    (57) EXP -> TERM cuad_sumres . EXP_P
    (58) EXP_P -> . MAS pila_operadores_add EXP
    (59) EXP_P -> . MENOS pila_operadores_add EXP
    (60) EXP_P -> . empty
    (71) empty -> .

    MAS             shift and go to state 155
    MENOS           shift and go to state 156
    LT              reduce using rule 71 (empty -> .)
    GT              reduce using rule 71 (empty -> .)
    DIFF            reduce using rule 71 (empty -> .)
    LTE             reduce using rule 71 (empty -> .)
    GTE             reduce using rule 71 (empty -> .)
    EQUAL           reduce using rule 71 (empty -> .)
    AND             reduce using rule 71 (empty -> .)
    OR              reduce using rule 71 (empty -> .)
    PARDER          reduce using rule 71 (empty -> .)
    COMMA           reduce using rule 71 (empty -> .)
    PTOCOMA         reduce using rule 71 (empty -> .)

    EXP_P                          shift and go to state 154
    empty                          shift and go to state 157

state 127

    (61) TERM -> FACTOR cuad_muldiv . TERM_P
    (62) TERM_P -> . MULT pila_operadores_add TERM
    (63) TERM_P -> . DIV pila_operadores_add TERM
    (64) TERM_P -> . empty
    (71) empty -> .

    MULT            shift and go to state 159
    DIV             shift and go to state 160
    MAS             reduce using rule 71 (empty -> .)
    MENOS           reduce using rule 71 (empty -> .)
    LT              reduce using rule 71 (empty -> .)
    GT              reduce using rule 71 (empty -> .)
    DIFF            reduce using rule 71 (empty -> .)
    LTE             reduce using rule 71 (empty -> .)
    GTE             reduce using rule 71 (empty -> .)
    EQUAL           reduce using rule 71 (empty -> .)
    AND             reduce using rule 71 (empty -> .)
    OR              reduce using rule 71 (empty -> .)
    PARDER          reduce using rule 71 (empty -> .)
    COMMA           reduce using rule 71 (empty -> .)
    PTOCOMA         reduce using rule 71 (empty -> .)

    TERM_P                         shift and go to state 158
    empty                          shift and go to state 161

state 128

    (67) VAR_CTE -> ID pila_operando_id .

    MULT            reduce using rule 67 (VAR_CTE -> ID pila_operando_id .)
    DIV             reduce using rule 67 (VAR_CTE -> ID pila_operando_id .)
    MAS             reduce using rule 67 (VAR_CTE -> ID pila_operando_id .)
    MENOS           reduce using rule 67 (VAR_CTE -> ID pila_operando_id .)
    LT              reduce using rule 67 (VAR_CTE -> ID pila_operando_id .)
    GT              reduce using rule 67 (VAR_CTE -> ID pila_operando_id .)
    DIFF            reduce using rule 67 (VAR_CTE -> ID pila_operando_id .)
    LTE             reduce using rule 67 (VAR_CTE -> ID pila_operando_id .)
    GTE             reduce using rule 67 (VAR_CTE -> ID pila_operando_id .)
    EQUAL           reduce using rule 67 (VAR_CTE -> ID pila_operando_id .)
    AND             reduce using rule 67 (VAR_CTE -> ID pila_operando_id .)
    OR              reduce using rule 67 (VAR_CTE -> ID pila_operando_id .)
    PARDER          reduce using rule 67 (VAR_CTE -> ID pila_operando_id .)
    COMMA           reduce using rule 67 (VAR_CTE -> ID pila_operando_id .)
    PTOCOMA         reduce using rule 67 (VAR_CTE -> ID pila_operando_id .)


state 129

    (68) VAR_CTE -> CTE_INT pila_operando_int .

    MULT            reduce using rule 68 (VAR_CTE -> CTE_INT pila_operando_int .)
    DIV             reduce using rule 68 (VAR_CTE -> CTE_INT pila_operando_int .)
    MAS             reduce using rule 68 (VAR_CTE -> CTE_INT pila_operando_int .)
    MENOS           reduce using rule 68 (VAR_CTE -> CTE_INT pila_operando_int .)
    LT              reduce using rule 68 (VAR_CTE -> CTE_INT pila_operando_int .)
    GT              reduce using rule 68 (VAR_CTE -> CTE_INT pila_operando_int .)
    DIFF            reduce using rule 68 (VAR_CTE -> CTE_INT pila_operando_int .)
    LTE             reduce using rule 68 (VAR_CTE -> CTE_INT pila_operando_int .)
    GTE             reduce using rule 68 (VAR_CTE -> CTE_INT pila_operando_int .)
    EQUAL           reduce using rule 68 (VAR_CTE -> CTE_INT pila_operando_int .)
    AND             reduce using rule 68 (VAR_CTE -> CTE_INT pila_operando_int .)
    OR              reduce using rule 68 (VAR_CTE -> CTE_INT pila_operando_int .)
    PARDER          reduce using rule 68 (VAR_CTE -> CTE_INT pila_operando_int .)
    COMMA           reduce using rule 68 (VAR_CTE -> CTE_INT pila_operando_int .)
    PTOCOMA         reduce using rule 68 (VAR_CTE -> CTE_INT pila_operando_int .)


state 130

    (69) VAR_CTE -> CTE_FLT pila_operando_float .

    MULT            reduce using rule 69 (VAR_CTE -> CTE_FLT pila_operando_float .)
    DIV             reduce using rule 69 (VAR_CTE -> CTE_FLT pila_operando_float .)
    MAS             reduce using rule 69 (VAR_CTE -> CTE_FLT pila_operando_float .)
    MENOS           reduce using rule 69 (VAR_CTE -> CTE_FLT pila_operando_float .)
    LT              reduce using rule 69 (VAR_CTE -> CTE_FLT pila_operando_float .)
    GT              reduce using rule 69 (VAR_CTE -> CTE_FLT pila_operando_float .)
    DIFF            reduce using rule 69 (VAR_CTE -> CTE_FLT pila_operando_float .)
    LTE             reduce using rule 69 (VAR_CTE -> CTE_FLT pila_operando_float .)
    GTE             reduce using rule 69 (VAR_CTE -> CTE_FLT pila_operando_float .)
    EQUAL           reduce using rule 69 (VAR_CTE -> CTE_FLT pila_operando_float .)
    AND             reduce using rule 69 (VAR_CTE -> CTE_FLT pila_operando_float .)
    OR              reduce using rule 69 (VAR_CTE -> CTE_FLT pila_operando_float .)
    PARDER          reduce using rule 69 (VAR_CTE -> CTE_FLT pila_operando_float .)
    COMMA           reduce using rule 69 (VAR_CTE -> CTE_FLT pila_operando_float .)
    PTOCOMA         reduce using rule 69 (VAR_CTE -> CTE_FLT pila_operando_float .)


state 131

    (70) VAR_CTE -> CTE_CHAR pila_operando_char .

    MULT            reduce using rule 70 (VAR_CTE -> CTE_CHAR pila_operando_char .)
    DIV             reduce using rule 70 (VAR_CTE -> CTE_CHAR pila_operando_char .)
    MAS             reduce using rule 70 (VAR_CTE -> CTE_CHAR pila_operando_char .)
    MENOS           reduce using rule 70 (VAR_CTE -> CTE_CHAR pila_operando_char .)
    LT              reduce using rule 70 (VAR_CTE -> CTE_CHAR pila_operando_char .)
    GT              reduce using rule 70 (VAR_CTE -> CTE_CHAR pila_operando_char .)
    DIFF            reduce using rule 70 (VAR_CTE -> CTE_CHAR pila_operando_char .)
    LTE             reduce using rule 70 (VAR_CTE -> CTE_CHAR pila_operando_char .)
    GTE             reduce using rule 70 (VAR_CTE -> CTE_CHAR pila_operando_char .)
    EQUAL           reduce using rule 70 (VAR_CTE -> CTE_CHAR pila_operando_char .)
    AND             reduce using rule 70 (VAR_CTE -> CTE_CHAR pila_operando_char .)
    OR              reduce using rule 70 (VAR_CTE -> CTE_CHAR pila_operando_char .)
    PARDER          reduce using rule 70 (VAR_CTE -> CTE_CHAR pila_operando_char .)
    COMMA           reduce using rule 70 (VAR_CTE -> CTE_CHAR pila_operando_char .)
    PTOCOMA         reduce using rule 70 (VAR_CTE -> CTE_CHAR pila_operando_char .)


state 132

    (34) LOOP_WHILE -> WHILE add_jump PARIZQ EXPRESION . PARDER ver_while LLVEIZQ ESTATUTO_P LLVEDER while_end

    PARDER          shift and go to state 162


state 133

    (35) ESCRITURA -> PRINT PARIZQ PRINTABLE PARDER .

    ID              reduce using rule 35 (ESCRITURA -> PRINT PARIZQ PRINTABLE PARDER .)
    IF              reduce using rule 35 (ESCRITURA -> PRINT PARIZQ PRINTABLE PARDER .)
    WHILE           reduce using rule 35 (ESCRITURA -> PRINT PARIZQ PRINTABLE PARDER .)
    PRINT           reduce using rule 35 (ESCRITURA -> PRINT PARIZQ PRINTABLE PARDER .)
    LLVEDER         reduce using rule 35 (ESCRITURA -> PRINT PARIZQ PRINTABLE PARDER .)
    RETURN          reduce using rule 35 (ESCRITURA -> PRINT PARIZQ PRINTABLE PARDER .)


state 134

    (36) PRINTABLE -> EXPRESION cuad_print . PRINTABLE_P
    (38) PRINTABLE_P -> . COMMA PRINTABLE
    (39) PRINTABLE_P -> . empty
    (71) empty -> .

    COMMA           shift and go to state 164
    PARDER          reduce using rule 71 (empty -> .)

    PRINTABLE_P                    shift and go to state 163
    empty                          shift and go to state 165

state 135

    (37) PRINTABLE -> CTE_STR cuad_print_str . PRINTABLE_P
    (38) PRINTABLE_P -> . COMMA PRINTABLE
    (39) PRINTABLE_P -> . empty
    (71) empty -> .

    COMMA           shift and go to state 164
    PARDER          reduce using rule 71 (empty -> .)

    PRINTABLE_P                    shift and go to state 166
    empty                          shift and go to state 165

state 136

    (20) PARAMS_P -> COMMA TYPE . ID ADD_VAR update_param_table PARAMS_P

    ID              shift and go to state 167


state 137

    (10) FUNCS -> FUNC TYPE ID ADD_FUNC PARIZQ PARAMS PARDER LLVEIZQ func_jump ESTATUTO_P RETURN . EXPRESION cuad_return PTOCOMA LLVEDER endFunc
    (45) EXPRESION -> . EXPRE cuad_or OR pila_operadores_add EXPRESION
    (46) EXPRESION -> . EXPRE cuad_or
    (47) EXPRE -> . EXPR cuad_and AND pila_operadores_add EXPRE
    (48) EXPRE -> . EXPR cuad_and
    (49) EXPR -> . EXP cuad_comp EXPR_P
    (57) EXP -> . TERM cuad_sumres EXP_P
    (61) TERM -> . FACTOR cuad_muldiv TERM_P
    (65) FACTOR -> . PARIZQ fondo_falso_add EXPRESION PARDER fondo_falso_pop
    (66) FACTOR -> . VAR_CTE
    (67) VAR_CTE -> . ID pila_operando_id
    (68) VAR_CTE -> . CTE_INT pila_operando_int
    (69) VAR_CTE -> . CTE_FLT pila_operando_float
    (70) VAR_CTE -> . CTE_CHAR pila_operando_char

    PARIZQ          shift and go to state 96
    ID              shift and go to state 104
    CTE_INT         shift and go to state 105
    CTE_FLT         shift and go to state 106
    CTE_CHAR        shift and go to state 107

    EXPRESION                      shift and go to state 168
    EXPRE                          shift and go to state 98
    EXPR                           shift and go to state 99
    EXP                            shift and go to state 100
    TERM                           shift and go to state 101
    FACTOR                         shift and go to state 102
    VAR_CTE                        shift and go to state 103

state 138

    (11) FUNCS -> FUNC VOID CURR_TYPE ID ADD_FUNC PARIZQ PARAMS PARDER LLVEIZQ func_jump ESTATUTO_P . LLVEDER endFunc

    LLVEDER         shift and go to state 169


state 139

    (30) ASIGNACION -> ID pila_operando_id ASIGN pila_operadores_add EXPRESION . cuad_asign PTOCOMA
    (88) cuad_asign -> .

    PTOCOMA         reduce using rule 88 (cuad_asign -> .)

    cuad_asign                     shift and go to state 170

state 140

    (40) FUNC_CALL -> ID ver_func_id_era PARIZQ PARM ver_param_num . PARDER cuad_gosub

    PARDER          shift and go to state 171


state 141

    (41) PARM -> EXPRESION ver_param . PARM_P
    (43) PARM_P -> . COMMA EXPRESION ver_param PARM_P
    (44) PARM_P -> . empty
    (71) empty -> .

    COMMA           shift and go to state 173
    PARDER          reduce using rule 71 (empty -> .)

    PARM_P                         shift and go to state 172
    empty                          shift and go to state 174

state 142

    (65) FACTOR -> PARIZQ fondo_falso_add EXPRESION . PARDER fondo_falso_pop

    PARDER          shift and go to state 175


state 143

    (31) CONDICION -> IF PARIZQ EXPRESION PARDER ver_if . LLVEIZQ ESTATUTO_P LLVEDER CONDICION_P

    LLVEIZQ         shift and go to state 176


state 144

    (45) EXPRESION -> EXPRE cuad_or OR . pila_operadores_add EXPRESION
    (80) pila_operadores_add -> .

    PARIZQ          reduce using rule 80 (pila_operadores_add -> .)
    ID              reduce using rule 80 (pila_operadores_add -> .)
    CTE_INT         reduce using rule 80 (pila_operadores_add -> .)
    CTE_FLT         reduce using rule 80 (pila_operadores_add -> .)
    CTE_CHAR        reduce using rule 80 (pila_operadores_add -> .)

    pila_operadores_add            shift and go to state 177

state 145

    (47) EXPRE -> EXPR cuad_and AND . pila_operadores_add EXPRE
    (80) pila_operadores_add -> .

    PARIZQ          reduce using rule 80 (pila_operadores_add -> .)
    ID              reduce using rule 80 (pila_operadores_add -> .)
    CTE_INT         reduce using rule 80 (pila_operadores_add -> .)
    CTE_FLT         reduce using rule 80 (pila_operadores_add -> .)
    CTE_CHAR        reduce using rule 80 (pila_operadores_add -> .)

    pila_operadores_add            shift and go to state 178

state 146

    (49) EXPR -> EXP cuad_comp EXPR_P .

    AND             reduce using rule 49 (EXPR -> EXP cuad_comp EXPR_P .)
    OR              reduce using rule 49 (EXPR -> EXP cuad_comp EXPR_P .)
    PARDER          reduce using rule 49 (EXPR -> EXP cuad_comp EXPR_P .)
    COMMA           reduce using rule 49 (EXPR -> EXP cuad_comp EXPR_P .)
    PTOCOMA         reduce using rule 49 (EXPR -> EXP cuad_comp EXPR_P .)


state 147

    (50) EXPR_P -> LT . pila_operadores_add EXPR
    (80) pila_operadores_add -> .

    PARIZQ          reduce using rule 80 (pila_operadores_add -> .)
    ID              reduce using rule 80 (pila_operadores_add -> .)
    CTE_INT         reduce using rule 80 (pila_operadores_add -> .)
    CTE_FLT         reduce using rule 80 (pila_operadores_add -> .)
    CTE_CHAR        reduce using rule 80 (pila_operadores_add -> .)

    pila_operadores_add            shift and go to state 179

state 148

    (51) EXPR_P -> GT . pila_operadores_add EXPR
    (80) pila_operadores_add -> .

    PARIZQ          reduce using rule 80 (pila_operadores_add -> .)
    ID              reduce using rule 80 (pila_operadores_add -> .)
    CTE_INT         reduce using rule 80 (pila_operadores_add -> .)
    CTE_FLT         reduce using rule 80 (pila_operadores_add -> .)
    CTE_CHAR        reduce using rule 80 (pila_operadores_add -> .)

    pila_operadores_add            shift and go to state 180

state 149

    (52) EXPR_P -> DIFF . pila_operadores_add EXPR
    (80) pila_operadores_add -> .

    PARIZQ          reduce using rule 80 (pila_operadores_add -> .)
    ID              reduce using rule 80 (pila_operadores_add -> .)
    CTE_INT         reduce using rule 80 (pila_operadores_add -> .)
    CTE_FLT         reduce using rule 80 (pila_operadores_add -> .)
    CTE_CHAR        reduce using rule 80 (pila_operadores_add -> .)

    pila_operadores_add            shift and go to state 181

state 150

    (53) EXPR_P -> LTE . pila_operadores_add EXPR
    (80) pila_operadores_add -> .

    PARIZQ          reduce using rule 80 (pila_operadores_add -> .)
    ID              reduce using rule 80 (pila_operadores_add -> .)
    CTE_INT         reduce using rule 80 (pila_operadores_add -> .)
    CTE_FLT         reduce using rule 80 (pila_operadores_add -> .)
    CTE_CHAR        reduce using rule 80 (pila_operadores_add -> .)

    pila_operadores_add            shift and go to state 182

state 151

    (54) EXPR_P -> GTE . pila_operadores_add EXPR
    (80) pila_operadores_add -> .

    PARIZQ          reduce using rule 80 (pila_operadores_add -> .)
    ID              reduce using rule 80 (pila_operadores_add -> .)
    CTE_INT         reduce using rule 80 (pila_operadores_add -> .)
    CTE_FLT         reduce using rule 80 (pila_operadores_add -> .)
    CTE_CHAR        reduce using rule 80 (pila_operadores_add -> .)

    pila_operadores_add            shift and go to state 183

state 152

    (55) EXPR_P -> EQUAL . pila_operadores_add EXPR
    (80) pila_operadores_add -> .

    PARIZQ          reduce using rule 80 (pila_operadores_add -> .)
    ID              reduce using rule 80 (pila_operadores_add -> .)
    CTE_INT         reduce using rule 80 (pila_operadores_add -> .)
    CTE_FLT         reduce using rule 80 (pila_operadores_add -> .)
    CTE_CHAR        reduce using rule 80 (pila_operadores_add -> .)

    pila_operadores_add            shift and go to state 184

state 153

    (56) EXPR_P -> empty .

    AND             reduce using rule 56 (EXPR_P -> empty .)
    OR              reduce using rule 56 (EXPR_P -> empty .)
    PARDER          reduce using rule 56 (EXPR_P -> empty .)
    COMMA           reduce using rule 56 (EXPR_P -> empty .)
    PTOCOMA         reduce using rule 56 (EXPR_P -> empty .)


state 154

    (57) EXP -> TERM cuad_sumres EXP_P .

    LT              reduce using rule 57 (EXP -> TERM cuad_sumres EXP_P .)
    GT              reduce using rule 57 (EXP -> TERM cuad_sumres EXP_P .)
    DIFF            reduce using rule 57 (EXP -> TERM cuad_sumres EXP_P .)
    LTE             reduce using rule 57 (EXP -> TERM cuad_sumres EXP_P .)
    GTE             reduce using rule 57 (EXP -> TERM cuad_sumres EXP_P .)
    EQUAL           reduce using rule 57 (EXP -> TERM cuad_sumres EXP_P .)
    AND             reduce using rule 57 (EXP -> TERM cuad_sumres EXP_P .)
    OR              reduce using rule 57 (EXP -> TERM cuad_sumres EXP_P .)
    PARDER          reduce using rule 57 (EXP -> TERM cuad_sumres EXP_P .)
    COMMA           reduce using rule 57 (EXP -> TERM cuad_sumres EXP_P .)
    PTOCOMA         reduce using rule 57 (EXP -> TERM cuad_sumres EXP_P .)


state 155

    (58) EXP_P -> MAS . pila_operadores_add EXP
    (80) pila_operadores_add -> .

    PARIZQ          reduce using rule 80 (pila_operadores_add -> .)
    ID              reduce using rule 80 (pila_operadores_add -> .)
    CTE_INT         reduce using rule 80 (pila_operadores_add -> .)
    CTE_FLT         reduce using rule 80 (pila_operadores_add -> .)
    CTE_CHAR        reduce using rule 80 (pila_operadores_add -> .)

    pila_operadores_add            shift and go to state 185

state 156

    (59) EXP_P -> MENOS . pila_operadores_add EXP
    (80) pila_operadores_add -> .

    PARIZQ          reduce using rule 80 (pila_operadores_add -> .)
    ID              reduce using rule 80 (pila_operadores_add -> .)
    CTE_INT         reduce using rule 80 (pila_operadores_add -> .)
    CTE_FLT         reduce using rule 80 (pila_operadores_add -> .)
    CTE_CHAR        reduce using rule 80 (pila_operadores_add -> .)

    pila_operadores_add            shift and go to state 186

state 157

    (60) EXP_P -> empty .

    LT              reduce using rule 60 (EXP_P -> empty .)
    GT              reduce using rule 60 (EXP_P -> empty .)
    DIFF            reduce using rule 60 (EXP_P -> empty .)
    LTE             reduce using rule 60 (EXP_P -> empty .)
    GTE             reduce using rule 60 (EXP_P -> empty .)
    EQUAL           reduce using rule 60 (EXP_P -> empty .)
    AND             reduce using rule 60 (EXP_P -> empty .)
    OR              reduce using rule 60 (EXP_P -> empty .)
    PARDER          reduce using rule 60 (EXP_P -> empty .)
    COMMA           reduce using rule 60 (EXP_P -> empty .)
    PTOCOMA         reduce using rule 60 (EXP_P -> empty .)


state 158

    (61) TERM -> FACTOR cuad_muldiv TERM_P .

    MAS             reduce using rule 61 (TERM -> FACTOR cuad_muldiv TERM_P .)
    MENOS           reduce using rule 61 (TERM -> FACTOR cuad_muldiv TERM_P .)
    LT              reduce using rule 61 (TERM -> FACTOR cuad_muldiv TERM_P .)
    GT              reduce using rule 61 (TERM -> FACTOR cuad_muldiv TERM_P .)
    DIFF            reduce using rule 61 (TERM -> FACTOR cuad_muldiv TERM_P .)
    LTE             reduce using rule 61 (TERM -> FACTOR cuad_muldiv TERM_P .)
    GTE             reduce using rule 61 (TERM -> FACTOR cuad_muldiv TERM_P .)
    EQUAL           reduce using rule 61 (TERM -> FACTOR cuad_muldiv TERM_P .)
    AND             reduce using rule 61 (TERM -> FACTOR cuad_muldiv TERM_P .)
    OR              reduce using rule 61 (TERM -> FACTOR cuad_muldiv TERM_P .)
    PARDER          reduce using rule 61 (TERM -> FACTOR cuad_muldiv TERM_P .)
    COMMA           reduce using rule 61 (TERM -> FACTOR cuad_muldiv TERM_P .)
    PTOCOMA         reduce using rule 61 (TERM -> FACTOR cuad_muldiv TERM_P .)


state 159

    (62) TERM_P -> MULT . pila_operadores_add TERM
    (80) pila_operadores_add -> .

    PARIZQ          reduce using rule 80 (pila_operadores_add -> .)
    ID              reduce using rule 80 (pila_operadores_add -> .)
    CTE_INT         reduce using rule 80 (pila_operadores_add -> .)
    CTE_FLT         reduce using rule 80 (pila_operadores_add -> .)
    CTE_CHAR        reduce using rule 80 (pila_operadores_add -> .)

    pila_operadores_add            shift and go to state 187

state 160

    (63) TERM_P -> DIV . pila_operadores_add TERM
    (80) pila_operadores_add -> .

    PARIZQ          reduce using rule 80 (pila_operadores_add -> .)
    ID              reduce using rule 80 (pila_operadores_add -> .)
    CTE_INT         reduce using rule 80 (pila_operadores_add -> .)
    CTE_FLT         reduce using rule 80 (pila_operadores_add -> .)
    CTE_CHAR        reduce using rule 80 (pila_operadores_add -> .)

    pila_operadores_add            shift and go to state 188

state 161

    (64) TERM_P -> empty .

    MAS             reduce using rule 64 (TERM_P -> empty .)
    MENOS           reduce using rule 64 (TERM_P -> empty .)
    LT              reduce using rule 64 (TERM_P -> empty .)
    GT              reduce using rule 64 (TERM_P -> empty .)
    DIFF            reduce using rule 64 (TERM_P -> empty .)
    LTE             reduce using rule 64 (TERM_P -> empty .)
    GTE             reduce using rule 64 (TERM_P -> empty .)
    EQUAL           reduce using rule 64 (TERM_P -> empty .)
    AND             reduce using rule 64 (TERM_P -> empty .)
    OR              reduce using rule 64 (TERM_P -> empty .)
    PARDER          reduce using rule 64 (TERM_P -> empty .)
    COMMA           reduce using rule 64 (TERM_P -> empty .)
    PTOCOMA         reduce using rule 64 (TERM_P -> empty .)


state 162

    (34) LOOP_WHILE -> WHILE add_jump PARIZQ EXPRESION PARDER . ver_while LLVEIZQ ESTATUTO_P LLVEDER while_end
    (94) ver_while -> .

    LLVEIZQ         reduce using rule 94 (ver_while -> .)

    ver_while                      shift and go to state 189

state 163

    (36) PRINTABLE -> EXPRESION cuad_print PRINTABLE_P .

    PARDER          reduce using rule 36 (PRINTABLE -> EXPRESION cuad_print PRINTABLE_P .)


state 164

    (38) PRINTABLE_P -> COMMA . PRINTABLE
    (36) PRINTABLE -> . EXPRESION cuad_print PRINTABLE_P
    (37) PRINTABLE -> . CTE_STR cuad_print_str PRINTABLE_P
    (45) EXPRESION -> . EXPRE cuad_or OR pila_operadores_add EXPRESION
    (46) EXPRESION -> . EXPRE cuad_or
    (47) EXPRE -> . EXPR cuad_and AND pila_operadores_add EXPRE
    (48) EXPRE -> . EXPR cuad_and
    (49) EXPR -> . EXP cuad_comp EXPR_P
    (57) EXP -> . TERM cuad_sumres EXP_P
    (61) TERM -> . FACTOR cuad_muldiv TERM_P
    (65) FACTOR -> . PARIZQ fondo_falso_add EXPRESION PARDER fondo_falso_pop
    (66) FACTOR -> . VAR_CTE
    (67) VAR_CTE -> . ID pila_operando_id
    (68) VAR_CTE -> . CTE_INT pila_operando_int
    (69) VAR_CTE -> . CTE_FLT pila_operando_float
    (70) VAR_CTE -> . CTE_CHAR pila_operando_char

    CTE_STR         shift and go to state 111
    PARIZQ          shift and go to state 96
    ID              shift and go to state 104
    CTE_INT         shift and go to state 105
    CTE_FLT         shift and go to state 106
    CTE_CHAR        shift and go to state 107

    PRINTABLE                      shift and go to state 190
    EXPRESION                      shift and go to state 110
    EXPRE                          shift and go to state 98
    EXPR                           shift and go to state 99
    EXP                            shift and go to state 100
    TERM                           shift and go to state 101
    FACTOR                         shift and go to state 102
    VAR_CTE                        shift and go to state 103

state 165

    (39) PRINTABLE_P -> empty .

    PARDER          reduce using rule 39 (PRINTABLE_P -> empty .)


state 166

    (37) PRINTABLE -> CTE_STR cuad_print_str PRINTABLE_P .

    PARDER          reduce using rule 37 (PRINTABLE -> CTE_STR cuad_print_str PRINTABLE_P .)


state 167

    (20) PARAMS_P -> COMMA TYPE ID . ADD_VAR update_param_table PARAMS_P
    (74) ADD_VAR -> .

    COMMA           reduce using rule 74 (ADD_VAR -> .)
    PARDER          reduce using rule 74 (ADD_VAR -> .)

    ADD_VAR                        shift and go to state 191

state 168

    (10) FUNCS -> FUNC TYPE ID ADD_FUNC PARIZQ PARAMS PARDER LLVEIZQ func_jump ESTATUTO_P RETURN EXPRESION . cuad_return PTOCOMA LLVEDER endFunc
    (89) cuad_return -> .

    PTOCOMA         reduce using rule 89 (cuad_return -> .)

    cuad_return                    shift and go to state 192

state 169

    (11) FUNCS -> FUNC VOID CURR_TYPE ID ADD_FUNC PARIZQ PARAMS PARDER LLVEIZQ func_jump ESTATUTO_P LLVEDER . endFunc
    (101) endFunc -> .

    FUNC            reduce using rule 101 (endFunc -> .)
    VOID            reduce using rule 101 (endFunc -> .)

    endFunc                        shift and go to state 193

state 170

    (30) ASIGNACION -> ID pila_operando_id ASIGN pila_operadores_add EXPRESION cuad_asign . PTOCOMA

    PTOCOMA         shift and go to state 194


state 171

    (40) FUNC_CALL -> ID ver_func_id_era PARIZQ PARM ver_param_num PARDER . cuad_gosub
    (105) cuad_gosub -> .

    ID              reduce using rule 105 (cuad_gosub -> .)
    IF              reduce using rule 105 (cuad_gosub -> .)
    WHILE           reduce using rule 105 (cuad_gosub -> .)
    PRINT           reduce using rule 105 (cuad_gosub -> .)
    LLVEDER         reduce using rule 105 (cuad_gosub -> .)
    RETURN          reduce using rule 105 (cuad_gosub -> .)

    cuad_gosub                     shift and go to state 195

state 172

    (41) PARM -> EXPRESION ver_param PARM_P .

    PARDER          reduce using rule 41 (PARM -> EXPRESION ver_param PARM_P .)


state 173

    (43) PARM_P -> COMMA . EXPRESION ver_param PARM_P
    (45) EXPRESION -> . EXPRE cuad_or OR pila_operadores_add EXPRESION
    (46) EXPRESION -> . EXPRE cuad_or
    (47) EXPRE -> . EXPR cuad_and AND pila_operadores_add EXPRE
    (48) EXPRE -> . EXPR cuad_and
    (49) EXPR -> . EXP cuad_comp EXPR_P
    (57) EXP -> . TERM cuad_sumres EXP_P
    (61) TERM -> . FACTOR cuad_muldiv TERM_P
    (65) FACTOR -> . PARIZQ fondo_falso_add EXPRESION PARDER fondo_falso_pop
    (66) FACTOR -> . VAR_CTE
    (67) VAR_CTE -> . ID pila_operando_id
    (68) VAR_CTE -> . CTE_INT pila_operando_int
    (69) VAR_CTE -> . CTE_FLT pila_operando_float
    (70) VAR_CTE -> . CTE_CHAR pila_operando_char

    PARIZQ          shift and go to state 96
    ID              shift and go to state 104
    CTE_INT         shift and go to state 105
    CTE_FLT         shift and go to state 106
    CTE_CHAR        shift and go to state 107

    EXPRESION                      shift and go to state 196
    EXPRE                          shift and go to state 98
    EXPR                           shift and go to state 99
    EXP                            shift and go to state 100
    TERM                           shift and go to state 101
    FACTOR                         shift and go to state 102
    VAR_CTE                        shift and go to state 103

state 174

    (44) PARM_P -> empty .

    PARDER          reduce using rule 44 (PARM_P -> empty .)


state 175

    (65) FACTOR -> PARIZQ fondo_falso_add EXPRESION PARDER . fondo_falso_pop
    (82) fondo_falso_pop -> .

    MULT            reduce using rule 82 (fondo_falso_pop -> .)
    DIV             reduce using rule 82 (fondo_falso_pop -> .)
    MAS             reduce using rule 82 (fondo_falso_pop -> .)
    MENOS           reduce using rule 82 (fondo_falso_pop -> .)
    LT              reduce using rule 82 (fondo_falso_pop -> .)
    GT              reduce using rule 82 (fondo_falso_pop -> .)
    DIFF            reduce using rule 82 (fondo_falso_pop -> .)
    LTE             reduce using rule 82 (fondo_falso_pop -> .)
    GTE             reduce using rule 82 (fondo_falso_pop -> .)
    EQUAL           reduce using rule 82 (fondo_falso_pop -> .)
    AND             reduce using rule 82 (fondo_falso_pop -> .)
    OR              reduce using rule 82 (fondo_falso_pop -> .)
    PARDER          reduce using rule 82 (fondo_falso_pop -> .)
    COMMA           reduce using rule 82 (fondo_falso_pop -> .)
    PTOCOMA         reduce using rule 82 (fondo_falso_pop -> .)

    fondo_falso_pop                shift and go to state 197

state 176

    (31) CONDICION -> IF PARIZQ EXPRESION PARDER ver_if LLVEIZQ . ESTATUTO_P LLVEDER CONDICION_P
    (28) ESTATUTO_P -> . ESTATUTO ESTATUTO_P
    (29) ESTATUTO_P -> . empty
    (23) ESTATUTO -> . ASIGNACION
    (24) ESTATUTO -> . CONDICION
    (25) ESTATUTO -> . LOOP_WHILE
    (26) ESTATUTO -> . ESCRITURA
    (27) ESTATUTO -> . FUNC_CALL
    (71) empty -> .
    (30) ASIGNACION -> . ID pila_operando_id ASIGN pila_operadores_add EXPRESION cuad_asign PTOCOMA
    (31) CONDICION -> . IF PARIZQ EXPRESION PARDER ver_if LLVEIZQ ESTATUTO_P LLVEDER CONDICION_P
    (34) LOOP_WHILE -> . WHILE add_jump PARIZQ EXPRESION PARDER ver_while LLVEIZQ ESTATUTO_P LLVEDER while_end
    (35) ESCRITURA -> . PRINT PARIZQ PRINTABLE PARDER
    (40) FUNC_CALL -> . ID ver_func_id_era PARIZQ PARM ver_param_num PARDER cuad_gosub

    LLVEDER         reduce using rule 71 (empty -> .)
    ID              shift and go to state 75
    IF              shift and go to state 76
    WHILE           shift and go to state 77
    PRINT           shift and go to state 78

    ESTATUTO_P                     shift and go to state 198
    ESTATUTO                       shift and go to state 68
    empty                          shift and go to state 69
    ASIGNACION                     shift and go to state 70
    CONDICION                      shift and go to state 71
    LOOP_WHILE                     shift and go to state 72
    ESCRITURA                      shift and go to state 73
    FUNC_CALL                      shift and go to state 74

state 177

    (45) EXPRESION -> EXPRE cuad_or OR pila_operadores_add . EXPRESION
    (45) EXPRESION -> . EXPRE cuad_or OR pila_operadores_add EXPRESION
    (46) EXPRESION -> . EXPRE cuad_or
    (47) EXPRE -> . EXPR cuad_and AND pila_operadores_add EXPRE
    (48) EXPRE -> . EXPR cuad_and
    (49) EXPR -> . EXP cuad_comp EXPR_P
    (57) EXP -> . TERM cuad_sumres EXP_P
    (61) TERM -> . FACTOR cuad_muldiv TERM_P
    (65) FACTOR -> . PARIZQ fondo_falso_add EXPRESION PARDER fondo_falso_pop
    (66) FACTOR -> . VAR_CTE
    (67) VAR_CTE -> . ID pila_operando_id
    (68) VAR_CTE -> . CTE_INT pila_operando_int
    (69) VAR_CTE -> . CTE_FLT pila_operando_float
    (70) VAR_CTE -> . CTE_CHAR pila_operando_char

    PARIZQ          shift and go to state 96
    ID              shift and go to state 104
    CTE_INT         shift and go to state 105
    CTE_FLT         shift and go to state 106
    CTE_CHAR        shift and go to state 107

    EXPRE                          shift and go to state 98
    EXPRESION                      shift and go to state 199
    EXPR                           shift and go to state 99
    EXP                            shift and go to state 100
    TERM                           shift and go to state 101
    FACTOR                         shift and go to state 102
    VAR_CTE                        shift and go to state 103

state 178

    (47) EXPRE -> EXPR cuad_and AND pila_operadores_add . EXPRE
    (47) EXPRE -> . EXPR cuad_and AND pila_operadores_add EXPRE
    (48) EXPRE -> . EXPR cuad_and
    (49) EXPR -> . EXP cuad_comp EXPR_P
    (57) EXP -> . TERM cuad_sumres EXP_P
    (61) TERM -> . FACTOR cuad_muldiv TERM_P
    (65) FACTOR -> . PARIZQ fondo_falso_add EXPRESION PARDER fondo_falso_pop
    (66) FACTOR -> . VAR_CTE
    (67) VAR_CTE -> . ID pila_operando_id
    (68) VAR_CTE -> . CTE_INT pila_operando_int
    (69) VAR_CTE -> . CTE_FLT pila_operando_float
    (70) VAR_CTE -> . CTE_CHAR pila_operando_char

    PARIZQ          shift and go to state 96
    ID              shift and go to state 104
    CTE_INT         shift and go to state 105
    CTE_FLT         shift and go to state 106
    CTE_CHAR        shift and go to state 107

    EXPR                           shift and go to state 99
    EXPRE                          shift and go to state 200
    EXP                            shift and go to state 100
    TERM                           shift and go to state 101
    FACTOR                         shift and go to state 102
    VAR_CTE                        shift and go to state 103

state 179

    (50) EXPR_P -> LT pila_operadores_add . EXPR
    (49) EXPR -> . EXP cuad_comp EXPR_P
    (57) EXP -> . TERM cuad_sumres EXP_P
    (61) TERM -> . FACTOR cuad_muldiv TERM_P
    (65) FACTOR -> . PARIZQ fondo_falso_add EXPRESION PARDER fondo_falso_pop
    (66) FACTOR -> . VAR_CTE
    (67) VAR_CTE -> . ID pila_operando_id
    (68) VAR_CTE -> . CTE_INT pila_operando_int
    (69) VAR_CTE -> . CTE_FLT pila_operando_float
    (70) VAR_CTE -> . CTE_CHAR pila_operando_char

    PARIZQ          shift and go to state 96
    ID              shift and go to state 104
    CTE_INT         shift and go to state 105
    CTE_FLT         shift and go to state 106
    CTE_CHAR        shift and go to state 107

    EXPR                           shift and go to state 201
    EXP                            shift and go to state 100
    TERM                           shift and go to state 101
    FACTOR                         shift and go to state 102
    VAR_CTE                        shift and go to state 103

state 180

    (51) EXPR_P -> GT pila_operadores_add . EXPR
    (49) EXPR -> . EXP cuad_comp EXPR_P
    (57) EXP -> . TERM cuad_sumres EXP_P
    (61) TERM -> . FACTOR cuad_muldiv TERM_P
    (65) FACTOR -> . PARIZQ fondo_falso_add EXPRESION PARDER fondo_falso_pop
    (66) FACTOR -> . VAR_CTE
    (67) VAR_CTE -> . ID pila_operando_id
    (68) VAR_CTE -> . CTE_INT pila_operando_int
    (69) VAR_CTE -> . CTE_FLT pila_operando_float
    (70) VAR_CTE -> . CTE_CHAR pila_operando_char

    PARIZQ          shift and go to state 96
    ID              shift and go to state 104
    CTE_INT         shift and go to state 105
    CTE_FLT         shift and go to state 106
    CTE_CHAR        shift and go to state 107

    EXPR                           shift and go to state 202
    EXP                            shift and go to state 100
    TERM                           shift and go to state 101
    FACTOR                         shift and go to state 102
    VAR_CTE                        shift and go to state 103

state 181

    (52) EXPR_P -> DIFF pila_operadores_add . EXPR
    (49) EXPR -> . EXP cuad_comp EXPR_P
    (57) EXP -> . TERM cuad_sumres EXP_P
    (61) TERM -> . FACTOR cuad_muldiv TERM_P
    (65) FACTOR -> . PARIZQ fondo_falso_add EXPRESION PARDER fondo_falso_pop
    (66) FACTOR -> . VAR_CTE
    (67) VAR_CTE -> . ID pila_operando_id
    (68) VAR_CTE -> . CTE_INT pila_operando_int
    (69) VAR_CTE -> . CTE_FLT pila_operando_float
    (70) VAR_CTE -> . CTE_CHAR pila_operando_char

    PARIZQ          shift and go to state 96
    ID              shift and go to state 104
    CTE_INT         shift and go to state 105
    CTE_FLT         shift and go to state 106
    CTE_CHAR        shift and go to state 107

    EXPR                           shift and go to state 203
    EXP                            shift and go to state 100
    TERM                           shift and go to state 101
    FACTOR                         shift and go to state 102
    VAR_CTE                        shift and go to state 103

state 182

    (53) EXPR_P -> LTE pila_operadores_add . EXPR
    (49) EXPR -> . EXP cuad_comp EXPR_P
    (57) EXP -> . TERM cuad_sumres EXP_P
    (61) TERM -> . FACTOR cuad_muldiv TERM_P
    (65) FACTOR -> . PARIZQ fondo_falso_add EXPRESION PARDER fondo_falso_pop
    (66) FACTOR -> . VAR_CTE
    (67) VAR_CTE -> . ID pila_operando_id
    (68) VAR_CTE -> . CTE_INT pila_operando_int
    (69) VAR_CTE -> . CTE_FLT pila_operando_float
    (70) VAR_CTE -> . CTE_CHAR pila_operando_char

    PARIZQ          shift and go to state 96
    ID              shift and go to state 104
    CTE_INT         shift and go to state 105
    CTE_FLT         shift and go to state 106
    CTE_CHAR        shift and go to state 107

    EXPR                           shift and go to state 204
    EXP                            shift and go to state 100
    TERM                           shift and go to state 101
    FACTOR                         shift and go to state 102
    VAR_CTE                        shift and go to state 103

state 183

    (54) EXPR_P -> GTE pila_operadores_add . EXPR
    (49) EXPR -> . EXP cuad_comp EXPR_P
    (57) EXP -> . TERM cuad_sumres EXP_P
    (61) TERM -> . FACTOR cuad_muldiv TERM_P
    (65) FACTOR -> . PARIZQ fondo_falso_add EXPRESION PARDER fondo_falso_pop
    (66) FACTOR -> . VAR_CTE
    (67) VAR_CTE -> . ID pila_operando_id
    (68) VAR_CTE -> . CTE_INT pila_operando_int
    (69) VAR_CTE -> . CTE_FLT pila_operando_float
    (70) VAR_CTE -> . CTE_CHAR pila_operando_char

    PARIZQ          shift and go to state 96
    ID              shift and go to state 104
    CTE_INT         shift and go to state 105
    CTE_FLT         shift and go to state 106
    CTE_CHAR        shift and go to state 107

    EXPR                           shift and go to state 205
    EXP                            shift and go to state 100
    TERM                           shift and go to state 101
    FACTOR                         shift and go to state 102
    VAR_CTE                        shift and go to state 103

state 184

    (55) EXPR_P -> EQUAL pila_operadores_add . EXPR
    (49) EXPR -> . EXP cuad_comp EXPR_P
    (57) EXP -> . TERM cuad_sumres EXP_P
    (61) TERM -> . FACTOR cuad_muldiv TERM_P
    (65) FACTOR -> . PARIZQ fondo_falso_add EXPRESION PARDER fondo_falso_pop
    (66) FACTOR -> . VAR_CTE
    (67) VAR_CTE -> . ID pila_operando_id
    (68) VAR_CTE -> . CTE_INT pila_operando_int
    (69) VAR_CTE -> . CTE_FLT pila_operando_float
    (70) VAR_CTE -> . CTE_CHAR pila_operando_char

    PARIZQ          shift and go to state 96
    ID              shift and go to state 104
    CTE_INT         shift and go to state 105
    CTE_FLT         shift and go to state 106
    CTE_CHAR        shift and go to state 107

    EXPR                           shift and go to state 206
    EXP                            shift and go to state 100
    TERM                           shift and go to state 101
    FACTOR                         shift and go to state 102
    VAR_CTE                        shift and go to state 103

state 185

    (58) EXP_P -> MAS pila_operadores_add . EXP
    (57) EXP -> . TERM cuad_sumres EXP_P
    (61) TERM -> . FACTOR cuad_muldiv TERM_P
    (65) FACTOR -> . PARIZQ fondo_falso_add EXPRESION PARDER fondo_falso_pop
    (66) FACTOR -> . VAR_CTE
    (67) VAR_CTE -> . ID pila_operando_id
    (68) VAR_CTE -> . CTE_INT pila_operando_int
    (69) VAR_CTE -> . CTE_FLT pila_operando_float
    (70) VAR_CTE -> . CTE_CHAR pila_operando_char

    PARIZQ          shift and go to state 96
    ID              shift and go to state 104
    CTE_INT         shift and go to state 105
    CTE_FLT         shift and go to state 106
    CTE_CHAR        shift and go to state 107

    EXP                            shift and go to state 207
    TERM                           shift and go to state 101
    FACTOR                         shift and go to state 102
    VAR_CTE                        shift and go to state 103

state 186

    (59) EXP_P -> MENOS pila_operadores_add . EXP
    (57) EXP -> . TERM cuad_sumres EXP_P
    (61) TERM -> . FACTOR cuad_muldiv TERM_P
    (65) FACTOR -> . PARIZQ fondo_falso_add EXPRESION PARDER fondo_falso_pop
    (66) FACTOR -> . VAR_CTE
    (67) VAR_CTE -> . ID pila_operando_id
    (68) VAR_CTE -> . CTE_INT pila_operando_int
    (69) VAR_CTE -> . CTE_FLT pila_operando_float
    (70) VAR_CTE -> . CTE_CHAR pila_operando_char

    PARIZQ          shift and go to state 96
    ID              shift and go to state 104
    CTE_INT         shift and go to state 105
    CTE_FLT         shift and go to state 106
    CTE_CHAR        shift and go to state 107

    EXP                            shift and go to state 208
    TERM                           shift and go to state 101
    FACTOR                         shift and go to state 102
    VAR_CTE                        shift and go to state 103

state 187

    (62) TERM_P -> MULT pila_operadores_add . TERM
    (61) TERM -> . FACTOR cuad_muldiv TERM_P
    (65) FACTOR -> . PARIZQ fondo_falso_add EXPRESION PARDER fondo_falso_pop
    (66) FACTOR -> . VAR_CTE
    (67) VAR_CTE -> . ID pila_operando_id
    (68) VAR_CTE -> . CTE_INT pila_operando_int
    (69) VAR_CTE -> . CTE_FLT pila_operando_float
    (70) VAR_CTE -> . CTE_CHAR pila_operando_char

    PARIZQ          shift and go to state 96
    ID              shift and go to state 104
    CTE_INT         shift and go to state 105
    CTE_FLT         shift and go to state 106
    CTE_CHAR        shift and go to state 107

    TERM                           shift and go to state 209
    FACTOR                         shift and go to state 102
    VAR_CTE                        shift and go to state 103

state 188

    (63) TERM_P -> DIV pila_operadores_add . TERM
    (61) TERM -> . FACTOR cuad_muldiv TERM_P
    (65) FACTOR -> . PARIZQ fondo_falso_add EXPRESION PARDER fondo_falso_pop
    (66) FACTOR -> . VAR_CTE
    (67) VAR_CTE -> . ID pila_operando_id
    (68) VAR_CTE -> . CTE_INT pila_operando_int
    (69) VAR_CTE -> . CTE_FLT pila_operando_float
    (70) VAR_CTE -> . CTE_CHAR pila_operando_char

    PARIZQ          shift and go to state 96
    ID              shift and go to state 104
    CTE_INT         shift and go to state 105
    CTE_FLT         shift and go to state 106
    CTE_CHAR        shift and go to state 107

    TERM                           shift and go to state 210
    FACTOR                         shift and go to state 102
    VAR_CTE                        shift and go to state 103

state 189

    (34) LOOP_WHILE -> WHILE add_jump PARIZQ EXPRESION PARDER ver_while . LLVEIZQ ESTATUTO_P LLVEDER while_end

    LLVEIZQ         shift and go to state 211


state 190

    (38) PRINTABLE_P -> COMMA PRINTABLE .

    PARDER          reduce using rule 38 (PRINTABLE_P -> COMMA PRINTABLE .)


state 191

    (20) PARAMS_P -> COMMA TYPE ID ADD_VAR . update_param_table PARAMS_P
    (99) update_param_table -> .

    COMMA           reduce using rule 99 (update_param_table -> .)
    PARDER          reduce using rule 99 (update_param_table -> .)

    update_param_table             shift and go to state 212

state 192

    (10) FUNCS -> FUNC TYPE ID ADD_FUNC PARIZQ PARAMS PARDER LLVEIZQ func_jump ESTATUTO_P RETURN EXPRESION cuad_return . PTOCOMA LLVEDER endFunc

    PTOCOMA         shift and go to state 213


state 193

    (11) FUNCS -> FUNC VOID CURR_TYPE ID ADD_FUNC PARIZQ PARAMS PARDER LLVEIZQ func_jump ESTATUTO_P LLVEDER endFunc .

    FUNC            reduce using rule 11 (FUNCS -> FUNC VOID CURR_TYPE ID ADD_FUNC PARIZQ PARAMS PARDER LLVEIZQ func_jump ESTATUTO_P LLVEDER endFunc .)
    VOID            reduce using rule 11 (FUNCS -> FUNC VOID CURR_TYPE ID ADD_FUNC PARIZQ PARAMS PARDER LLVEIZQ func_jump ESTATUTO_P LLVEDER endFunc .)


state 194

    (30) ASIGNACION -> ID pila_operando_id ASIGN pila_operadores_add EXPRESION cuad_asign PTOCOMA .

    ID              reduce using rule 30 (ASIGNACION -> ID pila_operando_id ASIGN pila_operadores_add EXPRESION cuad_asign PTOCOMA .)
    IF              reduce using rule 30 (ASIGNACION -> ID pila_operando_id ASIGN pila_operadores_add EXPRESION cuad_asign PTOCOMA .)
    WHILE           reduce using rule 30 (ASIGNACION -> ID pila_operando_id ASIGN pila_operadores_add EXPRESION cuad_asign PTOCOMA .)
    PRINT           reduce using rule 30 (ASIGNACION -> ID pila_operando_id ASIGN pila_operadores_add EXPRESION cuad_asign PTOCOMA .)
    LLVEDER         reduce using rule 30 (ASIGNACION -> ID pila_operando_id ASIGN pila_operadores_add EXPRESION cuad_asign PTOCOMA .)
    RETURN          reduce using rule 30 (ASIGNACION -> ID pila_operando_id ASIGN pila_operadores_add EXPRESION cuad_asign PTOCOMA .)


state 195

    (40) FUNC_CALL -> ID ver_func_id_era PARIZQ PARM ver_param_num PARDER cuad_gosub .

    ID              reduce using rule 40 (FUNC_CALL -> ID ver_func_id_era PARIZQ PARM ver_param_num PARDER cuad_gosub .)
    IF              reduce using rule 40 (FUNC_CALL -> ID ver_func_id_era PARIZQ PARM ver_param_num PARDER cuad_gosub .)
    WHILE           reduce using rule 40 (FUNC_CALL -> ID ver_func_id_era PARIZQ PARM ver_param_num PARDER cuad_gosub .)
    PRINT           reduce using rule 40 (FUNC_CALL -> ID ver_func_id_era PARIZQ PARM ver_param_num PARDER cuad_gosub .)
    LLVEDER         reduce using rule 40 (FUNC_CALL -> ID ver_func_id_era PARIZQ PARM ver_param_num PARDER cuad_gosub .)
    RETURN          reduce using rule 40 (FUNC_CALL -> ID ver_func_id_era PARIZQ PARM ver_param_num PARDER cuad_gosub .)


state 196

    (43) PARM_P -> COMMA EXPRESION . ver_param PARM_P
    (103) ver_param -> .

    COMMA           reduce using rule 103 (ver_param -> .)
    PARDER          reduce using rule 103 (ver_param -> .)

    ver_param                      shift and go to state 214

state 197

    (65) FACTOR -> PARIZQ fondo_falso_add EXPRESION PARDER fondo_falso_pop .

    MULT            reduce using rule 65 (FACTOR -> PARIZQ fondo_falso_add EXPRESION PARDER fondo_falso_pop .)
    DIV             reduce using rule 65 (FACTOR -> PARIZQ fondo_falso_add EXPRESION PARDER fondo_falso_pop .)
    MAS             reduce using rule 65 (FACTOR -> PARIZQ fondo_falso_add EXPRESION PARDER fondo_falso_pop .)
    MENOS           reduce using rule 65 (FACTOR -> PARIZQ fondo_falso_add EXPRESION PARDER fondo_falso_pop .)
    LT              reduce using rule 65 (FACTOR -> PARIZQ fondo_falso_add EXPRESION PARDER fondo_falso_pop .)
    GT              reduce using rule 65 (FACTOR -> PARIZQ fondo_falso_add EXPRESION PARDER fondo_falso_pop .)
    DIFF            reduce using rule 65 (FACTOR -> PARIZQ fondo_falso_add EXPRESION PARDER fondo_falso_pop .)
    LTE             reduce using rule 65 (FACTOR -> PARIZQ fondo_falso_add EXPRESION PARDER fondo_falso_pop .)
    GTE             reduce using rule 65 (FACTOR -> PARIZQ fondo_falso_add EXPRESION PARDER fondo_falso_pop .)
    EQUAL           reduce using rule 65 (FACTOR -> PARIZQ fondo_falso_add EXPRESION PARDER fondo_falso_pop .)
    AND             reduce using rule 65 (FACTOR -> PARIZQ fondo_falso_add EXPRESION PARDER fondo_falso_pop .)
    OR              reduce using rule 65 (FACTOR -> PARIZQ fondo_falso_add EXPRESION PARDER fondo_falso_pop .)
    PARDER          reduce using rule 65 (FACTOR -> PARIZQ fondo_falso_add EXPRESION PARDER fondo_falso_pop .)
    COMMA           reduce using rule 65 (FACTOR -> PARIZQ fondo_falso_add EXPRESION PARDER fondo_falso_pop .)
    PTOCOMA         reduce using rule 65 (FACTOR -> PARIZQ fondo_falso_add EXPRESION PARDER fondo_falso_pop .)


state 198

    (31) CONDICION -> IF PARIZQ EXPRESION PARDER ver_if LLVEIZQ ESTATUTO_P . LLVEDER CONDICION_P

    LLVEDER         shift and go to state 215


state 199

    (45) EXPRESION -> EXPRE cuad_or OR pila_operadores_add EXPRESION .

    PARDER          reduce using rule 45 (EXPRESION -> EXPRE cuad_or OR pila_operadores_add EXPRESION .)
    COMMA           reduce using rule 45 (EXPRESION -> EXPRE cuad_or OR pila_operadores_add EXPRESION .)
    PTOCOMA         reduce using rule 45 (EXPRESION -> EXPRE cuad_or OR pila_operadores_add EXPRESION .)


state 200

    (47) EXPRE -> EXPR cuad_and AND pila_operadores_add EXPRE .

    OR              reduce using rule 47 (EXPRE -> EXPR cuad_and AND pila_operadores_add EXPRE .)
    PARDER          reduce using rule 47 (EXPRE -> EXPR cuad_and AND pila_operadores_add EXPRE .)
    COMMA           reduce using rule 47 (EXPRE -> EXPR cuad_and AND pila_operadores_add EXPRE .)
    PTOCOMA         reduce using rule 47 (EXPRE -> EXPR cuad_and AND pila_operadores_add EXPRE .)


state 201

    (50) EXPR_P -> LT pila_operadores_add EXPR .

    AND             reduce using rule 50 (EXPR_P -> LT pila_operadores_add EXPR .)
    OR              reduce using rule 50 (EXPR_P -> LT pila_operadores_add EXPR .)
    PARDER          reduce using rule 50 (EXPR_P -> LT pila_operadores_add EXPR .)
    COMMA           reduce using rule 50 (EXPR_P -> LT pila_operadores_add EXPR .)
    PTOCOMA         reduce using rule 50 (EXPR_P -> LT pila_operadores_add EXPR .)


state 202

    (51) EXPR_P -> GT pila_operadores_add EXPR .

    AND             reduce using rule 51 (EXPR_P -> GT pila_operadores_add EXPR .)
    OR              reduce using rule 51 (EXPR_P -> GT pila_operadores_add EXPR .)
    PARDER          reduce using rule 51 (EXPR_P -> GT pila_operadores_add EXPR .)
    COMMA           reduce using rule 51 (EXPR_P -> GT pila_operadores_add EXPR .)
    PTOCOMA         reduce using rule 51 (EXPR_P -> GT pila_operadores_add EXPR .)


state 203

    (52) EXPR_P -> DIFF pila_operadores_add EXPR .

    AND             reduce using rule 52 (EXPR_P -> DIFF pila_operadores_add EXPR .)
    OR              reduce using rule 52 (EXPR_P -> DIFF pila_operadores_add EXPR .)
    PARDER          reduce using rule 52 (EXPR_P -> DIFF pila_operadores_add EXPR .)
    COMMA           reduce using rule 52 (EXPR_P -> DIFF pila_operadores_add EXPR .)
    PTOCOMA         reduce using rule 52 (EXPR_P -> DIFF pila_operadores_add EXPR .)


state 204

    (53) EXPR_P -> LTE pila_operadores_add EXPR .

    AND             reduce using rule 53 (EXPR_P -> LTE pila_operadores_add EXPR .)
    OR              reduce using rule 53 (EXPR_P -> LTE pila_operadores_add EXPR .)
    PARDER          reduce using rule 53 (EXPR_P -> LTE pila_operadores_add EXPR .)
    COMMA           reduce using rule 53 (EXPR_P -> LTE pila_operadores_add EXPR .)
    PTOCOMA         reduce using rule 53 (EXPR_P -> LTE pila_operadores_add EXPR .)


state 205

    (54) EXPR_P -> GTE pila_operadores_add EXPR .

    AND             reduce using rule 54 (EXPR_P -> GTE pila_operadores_add EXPR .)
    OR              reduce using rule 54 (EXPR_P -> GTE pila_operadores_add EXPR .)
    PARDER          reduce using rule 54 (EXPR_P -> GTE pila_operadores_add EXPR .)
    COMMA           reduce using rule 54 (EXPR_P -> GTE pila_operadores_add EXPR .)
    PTOCOMA         reduce using rule 54 (EXPR_P -> GTE pila_operadores_add EXPR .)


state 206

    (55) EXPR_P -> EQUAL pila_operadores_add EXPR .

    AND             reduce using rule 55 (EXPR_P -> EQUAL pila_operadores_add EXPR .)
    OR              reduce using rule 55 (EXPR_P -> EQUAL pila_operadores_add EXPR .)
    PARDER          reduce using rule 55 (EXPR_P -> EQUAL pila_operadores_add EXPR .)
    COMMA           reduce using rule 55 (EXPR_P -> EQUAL pila_operadores_add EXPR .)
    PTOCOMA         reduce using rule 55 (EXPR_P -> EQUAL pila_operadores_add EXPR .)


state 207

    (58) EXP_P -> MAS pila_operadores_add EXP .

    LT              reduce using rule 58 (EXP_P -> MAS pila_operadores_add EXP .)
    GT              reduce using rule 58 (EXP_P -> MAS pila_operadores_add EXP .)
    DIFF            reduce using rule 58 (EXP_P -> MAS pila_operadores_add EXP .)
    LTE             reduce using rule 58 (EXP_P -> MAS pila_operadores_add EXP .)
    GTE             reduce using rule 58 (EXP_P -> MAS pila_operadores_add EXP .)
    EQUAL           reduce using rule 58 (EXP_P -> MAS pila_operadores_add EXP .)
    AND             reduce using rule 58 (EXP_P -> MAS pila_operadores_add EXP .)
    OR              reduce using rule 58 (EXP_P -> MAS pila_operadores_add EXP .)
    PARDER          reduce using rule 58 (EXP_P -> MAS pila_operadores_add EXP .)
    COMMA           reduce using rule 58 (EXP_P -> MAS pila_operadores_add EXP .)
    PTOCOMA         reduce using rule 58 (EXP_P -> MAS pila_operadores_add EXP .)


state 208

    (59) EXP_P -> MENOS pila_operadores_add EXP .

    LT              reduce using rule 59 (EXP_P -> MENOS pila_operadores_add EXP .)
    GT              reduce using rule 59 (EXP_P -> MENOS pila_operadores_add EXP .)
    DIFF            reduce using rule 59 (EXP_P -> MENOS pila_operadores_add EXP .)
    LTE             reduce using rule 59 (EXP_P -> MENOS pila_operadores_add EXP .)
    GTE             reduce using rule 59 (EXP_P -> MENOS pila_operadores_add EXP .)
    EQUAL           reduce using rule 59 (EXP_P -> MENOS pila_operadores_add EXP .)
    AND             reduce using rule 59 (EXP_P -> MENOS pila_operadores_add EXP .)
    OR              reduce using rule 59 (EXP_P -> MENOS pila_operadores_add EXP .)
    PARDER          reduce using rule 59 (EXP_P -> MENOS pila_operadores_add EXP .)
    COMMA           reduce using rule 59 (EXP_P -> MENOS pila_operadores_add EXP .)
    PTOCOMA         reduce using rule 59 (EXP_P -> MENOS pila_operadores_add EXP .)


state 209

    (62) TERM_P -> MULT pila_operadores_add TERM .

    MAS             reduce using rule 62 (TERM_P -> MULT pila_operadores_add TERM .)
    MENOS           reduce using rule 62 (TERM_P -> MULT pila_operadores_add TERM .)
    LT              reduce using rule 62 (TERM_P -> MULT pila_operadores_add TERM .)
    GT              reduce using rule 62 (TERM_P -> MULT pila_operadores_add TERM .)
    DIFF            reduce using rule 62 (TERM_P -> MULT pila_operadores_add TERM .)
    LTE             reduce using rule 62 (TERM_P -> MULT pila_operadores_add TERM .)
    GTE             reduce using rule 62 (TERM_P -> MULT pila_operadores_add TERM .)
    EQUAL           reduce using rule 62 (TERM_P -> MULT pila_operadores_add TERM .)
    AND             reduce using rule 62 (TERM_P -> MULT pila_operadores_add TERM .)
    OR              reduce using rule 62 (TERM_P -> MULT pila_operadores_add TERM .)
    PARDER          reduce using rule 62 (TERM_P -> MULT pila_operadores_add TERM .)
    COMMA           reduce using rule 62 (TERM_P -> MULT pila_operadores_add TERM .)
    PTOCOMA         reduce using rule 62 (TERM_P -> MULT pila_operadores_add TERM .)


state 210

    (63) TERM_P -> DIV pila_operadores_add TERM .

    MAS             reduce using rule 63 (TERM_P -> DIV pila_operadores_add TERM .)
    MENOS           reduce using rule 63 (TERM_P -> DIV pila_operadores_add TERM .)
    LT              reduce using rule 63 (TERM_P -> DIV pila_operadores_add TERM .)
    GT              reduce using rule 63 (TERM_P -> DIV pila_operadores_add TERM .)
    DIFF            reduce using rule 63 (TERM_P -> DIV pila_operadores_add TERM .)
    LTE             reduce using rule 63 (TERM_P -> DIV pila_operadores_add TERM .)
    GTE             reduce using rule 63 (TERM_P -> DIV pila_operadores_add TERM .)
    EQUAL           reduce using rule 63 (TERM_P -> DIV pila_operadores_add TERM .)
    AND             reduce using rule 63 (TERM_P -> DIV pila_operadores_add TERM .)
    OR              reduce using rule 63 (TERM_P -> DIV pila_operadores_add TERM .)
    PARDER          reduce using rule 63 (TERM_P -> DIV pila_operadores_add TERM .)
    COMMA           reduce using rule 63 (TERM_P -> DIV pila_operadores_add TERM .)
    PTOCOMA         reduce using rule 63 (TERM_P -> DIV pila_operadores_add TERM .)


state 211

    (34) LOOP_WHILE -> WHILE add_jump PARIZQ EXPRESION PARDER ver_while LLVEIZQ . ESTATUTO_P LLVEDER while_end
    (28) ESTATUTO_P -> . ESTATUTO ESTATUTO_P
    (29) ESTATUTO_P -> . empty
    (23) ESTATUTO -> . ASIGNACION
    (24) ESTATUTO -> . CONDICION
    (25) ESTATUTO -> . LOOP_WHILE
    (26) ESTATUTO -> . ESCRITURA
    (27) ESTATUTO -> . FUNC_CALL
    (71) empty -> .
    (30) ASIGNACION -> . ID pila_operando_id ASIGN pila_operadores_add EXPRESION cuad_asign PTOCOMA
    (31) CONDICION -> . IF PARIZQ EXPRESION PARDER ver_if LLVEIZQ ESTATUTO_P LLVEDER CONDICION_P
    (34) LOOP_WHILE -> . WHILE add_jump PARIZQ EXPRESION PARDER ver_while LLVEIZQ ESTATUTO_P LLVEDER while_end
    (35) ESCRITURA -> . PRINT PARIZQ PRINTABLE PARDER
    (40) FUNC_CALL -> . ID ver_func_id_era PARIZQ PARM ver_param_num PARDER cuad_gosub

    LLVEDER         reduce using rule 71 (empty -> .)
    ID              shift and go to state 75
    IF              shift and go to state 76
    WHILE           shift and go to state 77
    PRINT           shift and go to state 78

    ESTATUTO_P                     shift and go to state 216
    ESTATUTO                       shift and go to state 68
    empty                          shift and go to state 69
    ASIGNACION                     shift and go to state 70
    CONDICION                      shift and go to state 71
    LOOP_WHILE                     shift and go to state 72
    ESCRITURA                      shift and go to state 73
    FUNC_CALL                      shift and go to state 74

state 212

    (20) PARAMS_P -> COMMA TYPE ID ADD_VAR update_param_table . PARAMS_P
    (20) PARAMS_P -> . COMMA TYPE ID ADD_VAR update_param_table PARAMS_P
    (21) PARAMS_P -> . empty
    (71) empty -> .

    COMMA           shift and go to state 113
    PARDER          reduce using rule 71 (empty -> .)

    PARAMS_P                       shift and go to state 217
    empty                          shift and go to state 114

state 213

    (10) FUNCS -> FUNC TYPE ID ADD_FUNC PARIZQ PARAMS PARDER LLVEIZQ func_jump ESTATUTO_P RETURN EXPRESION cuad_return PTOCOMA . LLVEDER endFunc

    LLVEDER         shift and go to state 218


state 214

    (43) PARM_P -> COMMA EXPRESION ver_param . PARM_P
    (43) PARM_P -> . COMMA EXPRESION ver_param PARM_P
    (44) PARM_P -> . empty
    (71) empty -> .

    COMMA           shift and go to state 173
    PARDER          reduce using rule 71 (empty -> .)

    PARM_P                         shift and go to state 219
    empty                          shift and go to state 174

state 215

    (31) CONDICION -> IF PARIZQ EXPRESION PARDER ver_if LLVEIZQ ESTATUTO_P LLVEDER . CONDICION_P
    (32) CONDICION_P -> . ELSE else_jump LLVEIZQ ESTATUTO_P LLVEDER if_end
    (33) CONDICION_P -> . if_end
    (91) if_end -> .

    ELSE            shift and go to state 221
    ID              reduce using rule 91 (if_end -> .)
    IF              reduce using rule 91 (if_end -> .)
    WHILE           reduce using rule 91 (if_end -> .)
    PRINT           reduce using rule 91 (if_end -> .)
    LLVEDER         reduce using rule 91 (if_end -> .)
    RETURN          reduce using rule 91 (if_end -> .)

    CONDICION_P                    shift and go to state 220
    if_end                         shift and go to state 222

state 216

    (34) LOOP_WHILE -> WHILE add_jump PARIZQ EXPRESION PARDER ver_while LLVEIZQ ESTATUTO_P . LLVEDER while_end

    LLVEDER         shift and go to state 223


state 217

    (20) PARAMS_P -> COMMA TYPE ID ADD_VAR update_param_table PARAMS_P .

    PARDER          reduce using rule 20 (PARAMS_P -> COMMA TYPE ID ADD_VAR update_param_table PARAMS_P .)


state 218

    (10) FUNCS -> FUNC TYPE ID ADD_FUNC PARIZQ PARAMS PARDER LLVEIZQ func_jump ESTATUTO_P RETURN EXPRESION cuad_return PTOCOMA LLVEDER . endFunc
    (101) endFunc -> .

    FUNC            reduce using rule 101 (endFunc -> .)
    VOID            reduce using rule 101 (endFunc -> .)

    endFunc                        shift and go to state 224

state 219

    (43) PARM_P -> COMMA EXPRESION ver_param PARM_P .

    PARDER          reduce using rule 43 (PARM_P -> COMMA EXPRESION ver_param PARM_P .)


state 220

    (31) CONDICION -> IF PARIZQ EXPRESION PARDER ver_if LLVEIZQ ESTATUTO_P LLVEDER CONDICION_P .

    ID              reduce using rule 31 (CONDICION -> IF PARIZQ EXPRESION PARDER ver_if LLVEIZQ ESTATUTO_P LLVEDER CONDICION_P .)
    IF              reduce using rule 31 (CONDICION -> IF PARIZQ EXPRESION PARDER ver_if LLVEIZQ ESTATUTO_P LLVEDER CONDICION_P .)
    WHILE           reduce using rule 31 (CONDICION -> IF PARIZQ EXPRESION PARDER ver_if LLVEIZQ ESTATUTO_P LLVEDER CONDICION_P .)
    PRINT           reduce using rule 31 (CONDICION -> IF PARIZQ EXPRESION PARDER ver_if LLVEIZQ ESTATUTO_P LLVEDER CONDICION_P .)
    LLVEDER         reduce using rule 31 (CONDICION -> IF PARIZQ EXPRESION PARDER ver_if LLVEIZQ ESTATUTO_P LLVEDER CONDICION_P .)
    RETURN          reduce using rule 31 (CONDICION -> IF PARIZQ EXPRESION PARDER ver_if LLVEIZQ ESTATUTO_P LLVEDER CONDICION_P .)


state 221

    (32) CONDICION_P -> ELSE . else_jump LLVEIZQ ESTATUTO_P LLVEDER if_end
    (92) else_jump -> .

    LLVEIZQ         reduce using rule 92 (else_jump -> .)

    else_jump                      shift and go to state 225

state 222

    (33) CONDICION_P -> if_end .

    ID              reduce using rule 33 (CONDICION_P -> if_end .)
    IF              reduce using rule 33 (CONDICION_P -> if_end .)
    WHILE           reduce using rule 33 (CONDICION_P -> if_end .)
    PRINT           reduce using rule 33 (CONDICION_P -> if_end .)
    LLVEDER         reduce using rule 33 (CONDICION_P -> if_end .)
    RETURN          reduce using rule 33 (CONDICION_P -> if_end .)


state 223

    (34) LOOP_WHILE -> WHILE add_jump PARIZQ EXPRESION PARDER ver_while LLVEIZQ ESTATUTO_P LLVEDER . while_end
    (95) while_end -> .

    ID              reduce using rule 95 (while_end -> .)
    IF              reduce using rule 95 (while_end -> .)
    WHILE           reduce using rule 95 (while_end -> .)
    PRINT           reduce using rule 95 (while_end -> .)
    LLVEDER         reduce using rule 95 (while_end -> .)
    RETURN          reduce using rule 95 (while_end -> .)

    while_end                      shift and go to state 226

state 224

    (10) FUNCS -> FUNC TYPE ID ADD_FUNC PARIZQ PARAMS PARDER LLVEIZQ func_jump ESTATUTO_P RETURN EXPRESION cuad_return PTOCOMA LLVEDER endFunc .

    FUNC            reduce using rule 10 (FUNCS -> FUNC TYPE ID ADD_FUNC PARIZQ PARAMS PARDER LLVEIZQ func_jump ESTATUTO_P RETURN EXPRESION cuad_return PTOCOMA LLVEDER endFunc .)
    VOID            reduce using rule 10 (FUNCS -> FUNC TYPE ID ADD_FUNC PARIZQ PARAMS PARDER LLVEIZQ func_jump ESTATUTO_P RETURN EXPRESION cuad_return PTOCOMA LLVEDER endFunc .)


state 225

    (32) CONDICION_P -> ELSE else_jump . LLVEIZQ ESTATUTO_P LLVEDER if_end

    LLVEIZQ         shift and go to state 227


state 226

    (34) LOOP_WHILE -> WHILE add_jump PARIZQ EXPRESION PARDER ver_while LLVEIZQ ESTATUTO_P LLVEDER while_end .

    ID              reduce using rule 34 (LOOP_WHILE -> WHILE add_jump PARIZQ EXPRESION PARDER ver_while LLVEIZQ ESTATUTO_P LLVEDER while_end .)
    IF              reduce using rule 34 (LOOP_WHILE -> WHILE add_jump PARIZQ EXPRESION PARDER ver_while LLVEIZQ ESTATUTO_P LLVEDER while_end .)
    WHILE           reduce using rule 34 (LOOP_WHILE -> WHILE add_jump PARIZQ EXPRESION PARDER ver_while LLVEIZQ ESTATUTO_P LLVEDER while_end .)
    PRINT           reduce using rule 34 (LOOP_WHILE -> WHILE add_jump PARIZQ EXPRESION PARDER ver_while LLVEIZQ ESTATUTO_P LLVEDER while_end .)
    LLVEDER         reduce using rule 34 (LOOP_WHILE -> WHILE add_jump PARIZQ EXPRESION PARDER ver_while LLVEIZQ ESTATUTO_P LLVEDER while_end .)
    RETURN          reduce using rule 34 (LOOP_WHILE -> WHILE add_jump PARIZQ EXPRESION PARDER ver_while LLVEIZQ ESTATUTO_P LLVEDER while_end .)


state 227

    (32) CONDICION_P -> ELSE else_jump LLVEIZQ . ESTATUTO_P LLVEDER if_end
    (28) ESTATUTO_P -> . ESTATUTO ESTATUTO_P
    (29) ESTATUTO_P -> . empty
    (23) ESTATUTO -> . ASIGNACION
    (24) ESTATUTO -> . CONDICION
    (25) ESTATUTO -> . LOOP_WHILE
    (26) ESTATUTO -> . ESCRITURA
    (27) ESTATUTO -> . FUNC_CALL
    (71) empty -> .
    (30) ASIGNACION -> . ID pila_operando_id ASIGN pila_operadores_add EXPRESION cuad_asign PTOCOMA
    (31) CONDICION -> . IF PARIZQ EXPRESION PARDER ver_if LLVEIZQ ESTATUTO_P LLVEDER CONDICION_P
    (34) LOOP_WHILE -> . WHILE add_jump PARIZQ EXPRESION PARDER ver_while LLVEIZQ ESTATUTO_P LLVEDER while_end
    (35) ESCRITURA -> . PRINT PARIZQ PRINTABLE PARDER
    (40) FUNC_CALL -> . ID ver_func_id_era PARIZQ PARM ver_param_num PARDER cuad_gosub

    LLVEDER         reduce using rule 71 (empty -> .)
    ID              shift and go to state 75
    IF              shift and go to state 76
    WHILE           shift and go to state 77
    PRINT           shift and go to state 78

    ESTATUTO_P                     shift and go to state 228
    ESTATUTO                       shift and go to state 68
    empty                          shift and go to state 69
    ASIGNACION                     shift and go to state 70
    CONDICION                      shift and go to state 71
    LOOP_WHILE                     shift and go to state 72
    ESCRITURA                      shift and go to state 73
    FUNC_CALL                      shift and go to state 74

state 228

    (32) CONDICION_P -> ELSE else_jump LLVEIZQ ESTATUTO_P . LLVEDER if_end

    LLVEDER         shift and go to state 229


state 229

    (32) CONDICION_P -> ELSE else_jump LLVEIZQ ESTATUTO_P LLVEDER . if_end
    (91) if_end -> .

    ID              reduce using rule 91 (if_end -> .)
    IF              reduce using rule 91 (if_end -> .)
    WHILE           reduce using rule 91 (if_end -> .)
    PRINT           reduce using rule 91 (if_end -> .)
    LLVEDER         reduce using rule 91 (if_end -> .)
    RETURN          reduce using rule 91 (if_end -> .)

    if_end                         shift and go to state 230

state 230

    (32) CONDICION_P -> ELSE else_jump LLVEIZQ ESTATUTO_P LLVEDER if_end .

    ID              reduce using rule 32 (CONDICION_P -> ELSE else_jump LLVEIZQ ESTATUTO_P LLVEDER if_end .)
    IF              reduce using rule 32 (CONDICION_P -> ELSE else_jump LLVEIZQ ESTATUTO_P LLVEDER if_end .)
    WHILE           reduce using rule 32 (CONDICION_P -> ELSE else_jump LLVEIZQ ESTATUTO_P LLVEDER if_end .)
    PRINT           reduce using rule 32 (CONDICION_P -> ELSE else_jump LLVEIZQ ESTATUTO_P LLVEDER if_end .)
    LLVEDER         reduce using rule 32 (CONDICION_P -> ELSE else_jump LLVEIZQ ESTATUTO_P LLVEDER if_end .)
    RETURN          reduce using rule 32 (CONDICION_P -> ELSE else_jump LLVEIZQ ESTATUTO_P LLVEDER if_end .)

